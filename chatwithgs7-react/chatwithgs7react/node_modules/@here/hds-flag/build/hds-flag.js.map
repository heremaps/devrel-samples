{"version":3,"file":"hds-flag.js","sourceRoot":"","sources":["../src/hds-flag.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAC,aAAa,EAAE,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC1D,OAAO,gBAAgB,CAAC;AAExB,OAAO,mBAAmB,CAAC;AAC3B,OAAO,EAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAiB,MAAM,KAAK,CAAC;AAC9D,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAC7E,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AACrD,OAAO,EAAC,MAAM,EAAC,MAAM,mBAAmB,CAAC;AAezC;;;;;;GAMG;AAEI,IAAM,IAAI,YAAV,MAAM,IAAK,SAAQ,UAAU;IAA7B;;QAKqB,YAAO,GAAgB,QAAQ,CAAC;QAChC,SAAI,GAAa,OAAO,CAAC;QAEG,iBAAY,GAAiB,SAAS,CAAC;QAI5E,aAAQ,GAAG,KAAK,CAAC;IAuCpC,CAAC;IArCC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,YAAY,EAAE,MAAI,CAAC,aAAa,EAAE,CAAC;IAC1D,CAAC;IAES,OAAO,CAAC,kBAAkC;QAClD,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACjD;IACH,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO,OAAO,CAAC;SAChB;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QACxD,OAAO,IAAI,CAAA;cACD,IAAI,CAAC,IAAI;kBACL,IAAI,CAAC,YAAY;cACrB,QAAQ;iBACL,CAAC;IAChB,CAAC;IAES,MAAM;QACd,MAAM,OAAO,GAAG;YACd,CAAC,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI;YAC7B,CAAC,aAAa,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI;YACnC,aAAa,EAAE,IAAI,CAAC,QAAQ;SAC7B,CAAC;QACF,OAAO,IAAI,CAAA,iCAAiC,QAAQ,CAAC,OAAO,CAAC;QACzD,IAAI,CAAC,UAAU,EAAE;;;;WAId,CAAC;IACV,CAAC;;AAjDM,kBAAa,GAAG,CAAC,CAAC;AAElB,WAAM,GAAG,MAAM,CAAC;AAEG;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;qCAAiC;AAChC;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;kCAA0B;AACzB;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;kCAAe;AACc;IAArD,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,eAAe,EAAC,CAAC;0CAAwC;AAC9E;IAAd,KAAK,CAAC,MAAM,CAAC;yCAAyC;AACrB;IAAjC,KAAK,CAAC,yBAAyB,CAAC;qCAAiC;AACpC;IAA7B,kBAAkB,CAAC,EAAE,EAAE,IAAI,CAAC;2CAA2C;AAC/D;IAAR,KAAK,EAAE;sCAA0B;AAZvB,IAAI;IADhB,aAAa,CAAC,UAAU,CAAC;GACb,IAAI,CAmDhB;SAnDY,IAAI","sourcesContent":["import {customElement, isSlotEmpty} from '@here/hds-base';\nimport '@here/hds-icon';\nimport {IconCategory} from '@here/hds-iconlibrary';\nimport '@here/hds-tooltip';\nimport {html, LitElement, nothing, PropertyValues} from 'lit';\nimport {property, query, queryAssignedNodes, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {styles} from './hds-flag.css.js';\n\nexport type FlagVariant =\n  | 'subtle'\n  | 'warning'\n  | 'success'\n  | 'error'\n  | 'custom'\n  | 'subtle-quiet'\n  | 'warning-quiet'\n  | 'success-quiet'\n  | 'error-quiet'\n  | 'custom-quiet';\nexport type FlagSize = 'small' | 'medium' | 'large';\n\n/**\n * @slot default Content for the Flag label\n *\n * @cssprop --hds-flag-custom-accent-color Accent color value\n * @cssprop --hds-flag-custom-font-color Font color value\n * @cssprop --hds-icon-color Icon color value\n */\n@customElement('hds-flag')\nexport class Flag extends LitElement {\n  static flagIdCounter = 0;\n\n  static styles = styles;\n\n  @property({type: String}) variant: FlagVariant = 'subtle';\n  @property({type: String}) size: FlagSize = 'small';\n  @property({type: String}) icon?: string;\n  @property({type: String, attribute: 'icon-category'}) iconCategory: IconCategory = 'core-ui';\n  @query('slot') protected slotElement!: HTMLSlotElement;\n  @query('.hds-flag-label-wrapper') protected labelEl!: HTMLElement;\n  @queryAssignedNodes('', true) protected slotItemsList!: HTMLSlotElement;\n  @state() private iconOnly = false;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.id = this.id || `hds-flag-${++Flag.flagIdCounter}`;\n  }\n\n  protected updated(_changedProperties: PropertyValues) {\n    super.updated(_changedProperties);\n    if (this.icon) {\n      this.iconOnly = isSlotEmpty(this.slotItemsList);\n    }\n  }\n\n  protected renderIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n    const iconSize = this.size === 'small' ? '8px' : '16px';\n    return html` <hds-icon\n      name=\"${this.icon}\"\n      category=\"${this.iconCategory}\"\n      size=\"${iconSize}\"\n    ></hds-icon>`;\n  }\n\n  protected render() {\n    const classes = {\n      [`--size-${this.size}`]: true,\n      [`--variant-${this.variant}`]: true,\n      '--icon-only': this.iconOnly,\n    };\n    return html` <div class=\"hds-flag-wrapper ${classMap(classes)}\">\n      ${this.renderIcon()}\n      <div class=\"hds-flag-label-wrapper\">\n        <slot></slot>\n      </div>\n    </div>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hds-flag': Flag;\n  }\n}\n"]}