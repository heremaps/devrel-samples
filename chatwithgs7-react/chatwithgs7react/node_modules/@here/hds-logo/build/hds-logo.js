var Logo_1;
import { __decorate } from "tslib";
import { customElement, stringToHtml } from '@here/hds-base';
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-logo.css.js';
import { HERE_LOGO } from './logo.svg.js';
let Logo = Logo_1 = class Logo extends LitElement {
    constructor() {
        super(...arguments);
        this.inverted = false;
        this.monochrome = false;
        this.size = 'extra-small';
        this.padding = false;
        this.background = false;
    }
    static getSvgLogo() {
        return html `${stringToHtml(HERE_LOGO)}`;
    }
    render() {
        const logoClasses = {
            'hds-logo-wrapper': true,
            [`size-${this.size}`]: true,
            padded: this.background || this.padding,
            [this.inverted ? 'inverted' : 'non-inverted']: true,
            [this.monochrome ? 'monochrome' : 'non-monochrome']: true,
            [this.background ? 'has-background' : 'no-background']: true,
        };
        return html ` <div class="${classMap(logoClasses)}">${Logo_1.getSvgLogo()}</div> `;
    }
};
Logo.styles = styles;
Logo.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
__decorate([
    property({ type: Boolean })
], Logo.prototype, "inverted", void 0);
__decorate([
    property({ type: Boolean })
], Logo.prototype, "monochrome", void 0);
__decorate([
    property({ type: String })
], Logo.prototype, "size", void 0);
__decorate([
    property({ type: Boolean })
], Logo.prototype, "padding", void 0);
__decorate([
    property({ type: Boolean })
], Logo.prototype, "background", void 0);
Logo = Logo_1 = __decorate([
    customElement('hds-logo')
], Logo);
export { Logo };
//# sourceMappingURL=hds-logo.js.map