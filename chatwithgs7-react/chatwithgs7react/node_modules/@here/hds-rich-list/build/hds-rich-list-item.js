import { __decorate } from "tslib";
import { customElement, stringToHtml } from '@here/hds-base';
import { Icon } from '@here/hds-icon';
import { ListItem } from '@here/hds-list';
import { html, nothing } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-rich-list-item.css.js';
/**
 *
 * @slot action Content for custom actions on the right side
 *
 * @event {CustomEvent<{id: string, action: string, file?: File}>} action Fired when one of the action buttons has been clicked `RichListItemActionPayload`
 */
let RichListItem = class RichListItem extends ListItem {
    constructor() {
        super(...arguments);
        this.richVariant = 'default';
        this.state = 'default';
        this.headline = '';
        this.subTitle = '';
        this.progressText = '';
        this.progress = 0;
        this.progressVariant = 'determinate';
        this.errorText = '';
        this.filePreview = false;
        this.iconDefault = 'time';
        this.iconDefaultCategory = 'core-ui';
        this.iconProgress = 'time';
        this.iconProgressCategory = 'core-ui';
        this.iconError = 'alert';
        this.iconErrorCategory = 'core-ui';
        this.iconSuccess = 'checkmark';
        this.iconSuccessCategory = 'core-ui';
        this.hideIcon = false;
        this.hideCancel = false;
        this.hideRetry = false;
        this.hideDelete = false;
        this.unhoverable = false;
        this.unpressable = false;
        this.unselectable = false;
        this.unfocusable = false;
    }
    static get styles() {
        return [super.styles, styles];
    }
    async updated(_changedProperties) {
        await this.updateComplete;
        super.updated(_changedProperties);
        if (_changedProperties.has('file')) {
            this._loadFilePreview();
        }
    }
    render() {
        const title = this.file !== undefined
            ? this.file.name.replace(/(\.[a-zA-Z0-9]+)$/, '<span>$1</span>')
            : this.headline;
        const canRenderErrorText = this.state === 'error' && this.errorText !== '';
        const subTitleText = canRenderErrorText ? this.errorText : this.subTitle;
        const classes = {
            item: true,
            '-hds-rich-list-item-wrapper': true,
            '-hds-list-item-wrapper': true,
            'hds-list-item-variant-solid-default': true,
            'hds-list-item-h-padding-dense': true,
            disabled: this.disabled,
            dragging: this.dragging,
            selected: this.selected,
            [`${this.unhoverable ? 'unhoverable' : 'hoverable'}`]: true,
            [`${this.unselectable ? 'unselectable' : 'selectable'}`]: true,
            [`${this.unpressable ? 'unpressable' : 'pressable'}`]: true,
            [`${this.unfocusable ? 'unfocusable' : 'focusable'}`]: true,
            'has-error-text': canRenderErrorText,
            'has-sub-title-text': subTitleText,
        };
        classes[`-rich-list-item-variant-${this.richVariant}`] = true;
        if (this.richVariant === 'default') {
            classes['hds-list-item-size-extra-large'] = true;
        }
        else if (this.richVariant === 'dense') {
            classes['hds-list-item-size-small'] = true;
        }
        classes[`-rich-list-item-state-${this.state}`] = true;
        if (this.state === 'error') {
            classes['hds-list-item-variant-solid-error'] = true;
        }
        return html `
      <div class="${classMap(classes)}" @click="${super.onItemClick}" tabindex="-1">
        <div class="thumbnail">${this._renderFilePreview()} ${this._renderIcon()}</div>
        <div class="content-wrapper">
          <div class="upper">
            <div class="title">${stringToHtml(title)}</div>
            <div class="progress">${this.progressText}</div>
          </div>
          <div class="lower">
            <div class="sub-title">${subTitleText}</div>
          </div>
          ${this._renderProgressBar()}
        </div>
        <div class="actions">
          <slot name="action" @click="${this._emitEventOnAction}"></slot>
          ${this._renderAction('retry', 'refresh')} ${this._renderAction('cancel', 'cross')}
          ${this._renderAction('delete', 'delete')}
        </div>
      </div>
    `;
    }
    canRenderFilePreview() {
        return this.filePreview && this.file !== undefined && this.file.type.indexOf('image/') === 0;
    }
    async _emitEventOnAction(e) {
        e.stopPropagation();
        const action = e.target.getAttribute('data-action') || 'custom';
        const detail = { id: this.id, action };
        if (this.file !== undefined) {
            detail.file = this.file;
        }
        await this.updateComplete;
        this.dispatchEvent(new CustomEvent('action', {
            detail,
            bubbles: true,
        }));
    }
    _renderIcon() {
        if (this.hideIcon || this.canRenderFilePreview()) {
            return nothing;
        }
        const iconProps = {
            'default--default': {
                size: '24px',
                style: 'outline',
                name: this.iconDefault,
                category: this.iconDefaultCategory,
            },
            'default--progress': {
                size: '24px',
                style: 'outline',
                name: this.iconProgress,
                category: this.iconProgressCategory,
            },
            'default--error': {
                size: '24px',
                style: 'outline',
                name: this.iconError,
                category: this.iconErrorCategory,
            },
            'default--success': {
                size: '24px',
                style: 'outline',
                name: this.iconSuccess,
                category: this.iconSuccessCategory,
            },
            'dense--default': {
                size: '16px',
                style: 'solid',
                name: this.iconDefault,
                category: this.iconDefaultCategory,
            },
            'dense--progress': {
                size: '16px',
                style: 'solid',
                name: this.iconProgress,
                category: this.iconProgressCategory,
            },
            'dense--error': {
                size: '16px',
                style: 'solid',
                name: this.iconError,
                category: this.iconErrorCategory,
            },
            'dense--success': {
                size: '16px',
                style: 'solid',
                name: this.iconSuccess,
                category: this.iconSuccessCategory,
            },
        }[`${this.richVariant}--${this.state}`];
        if (this.file !== undefined) {
            iconProps.name = Icon.getNameByMediaType(this.file.type);
            iconProps.category = 'file';
        }
        return html `
      <hds-icon
        name="${iconProps.name}"
        size="${iconProps.size}"
        category="${iconProps.category}"
        icon-style="${iconProps.style}"
      >
      </hds-icon>
    `;
    }
    _renderProgressBar() {
        if (this.state === 'progress') {
            return html `
        <div class="progress-wrapper">
          <hds-progress-indicator
            color="${this.selected ? 'on-dark' : 'action'}"
            type="linear"
            variant="${this.progressVariant}"
            ?disabled="${this.disabled}"
            progress="${this.progress}"
          ></hds-progress-indicator>
        </div>
      `;
        }
        return nothing;
    }
    _renderFilePreview() {
        if (this.canRenderFilePreview()) {
            return html `<img width="40" height="40" alt="preview" />`;
        }
        return nothing;
    }
    _loadFilePreview() {
        if (this.canRenderFilePreview()) {
            this.imgFilePreview.src = '';
            const reader = new FileReader();
            reader.onloadend = () => {
                this.imgFilePreview.src = reader.result;
            };
            reader.readAsDataURL(this.file);
        }
    }
    _renderAction(action, icon) {
        const canRenderRetry = action === 'retry' && this.state === 'error' && !this.hideRetry;
        const canRenderCancel = action === 'cancel' &&
            ['default', 'progress', 'error'].includes(this.state) &&
            !this.hideCancel;
        const canRenderDelete = action === 'delete' && this.state === 'success' && !this.hideDelete;
        if (canRenderRetry || canRenderCancel || canRenderDelete) {
            return html ` <hds-icon
        @click="${this._emitEventOnAction}"
        data-action="${action}"
        name="${icon}"
        size="16px"
      >
      </hds-icon>`;
        }
        return nothing;
    }
};
__decorate([
    property({ type: String, attribute: false })
], RichListItem.prototype, "richVariant", void 0);
__decorate([
    property({ type: String, attribute: 'state' })
], RichListItem.prototype, "state", void 0);
__decorate([
    property({ type: String })
], RichListItem.prototype, "headline", void 0);
__decorate([
    property({ type: String, attribute: 'sub-title' })
], RichListItem.prototype, "subTitle", void 0);
__decorate([
    property({ type: String, attribute: 'progress-text' })
], RichListItem.prototype, "progressText", void 0);
__decorate([
    property({ type: Number, attribute: 'progress' })
], RichListItem.prototype, "progress", void 0);
__decorate([
    property({ type: String, attribute: 'progress-variant' })
], RichListItem.prototype, "progressVariant", void 0);
__decorate([
    property({ type: String, attribute: 'error-text' })
], RichListItem.prototype, "errorText", void 0);
__decorate([
    property({ type: Object, attribute: false })
], RichListItem.prototype, "file", void 0);
__decorate([
    property({ type: Boolean, attribute: 'file-preview' })
], RichListItem.prototype, "filePreview", void 0);
__decorate([
    property({ type: String, attribute: 'icon-default' })
], RichListItem.prototype, "iconDefault", void 0);
__decorate([
    property({ type: String, attribute: 'icon-default-category' })
], RichListItem.prototype, "iconDefaultCategory", void 0);
__decorate([
    property({ type: String, attribute: 'icon-progress' })
], RichListItem.prototype, "iconProgress", void 0);
__decorate([
    property({ type: String, attribute: 'icon-progress-category' })
], RichListItem.prototype, "iconProgressCategory", void 0);
__decorate([
    property({ type: String, attribute: 'icon-error' })
], RichListItem.prototype, "iconError", void 0);
__decorate([
    property({ type: String, attribute: 'icon-error-category' })
], RichListItem.prototype, "iconErrorCategory", void 0);
__decorate([
    property({ type: String, attribute: 'icon-success' })
], RichListItem.prototype, "iconSuccess", void 0);
__decorate([
    property({ type: String, attribute: 'icon-success-category' })
], RichListItem.prototype, "iconSuccessCategory", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-icon' })
], RichListItem.prototype, "hideIcon", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-cancel' })
], RichListItem.prototype, "hideCancel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-retry' })
], RichListItem.prototype, "hideRetry", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-delete' })
], RichListItem.prototype, "hideDelete", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], RichListItem.prototype, "unhoverable", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], RichListItem.prototype, "unpressable", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], RichListItem.prototype, "unselectable", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], RichListItem.prototype, "unfocusable", void 0);
__decorate([
    query('img')
], RichListItem.prototype, "imgFilePreview", void 0);
RichListItem = __decorate([
    customElement('hds-rich-list-item')
], RichListItem);
export { RichListItem };
//# sourceMappingURL=hds-rich-list-item.js.map