import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-icon';
import { List } from '@here/hds-list';
import { html } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { RichListItem } from './hds-rich-list-item.js';
import { styles } from './hds-rich-list.css.js';
/**
 * @slot default Content for the list of `hds-rich-list-item` elements
 *
 * @event {CustomEvent<{id: string; index: number}>} select Fired when an item has been selected `ListSelectPayload`
 * @event {CustomEvent<{id: string, action: string, file:  File | undefined}>} action Fired when one of the action buttons has been clicked `RichListItemActionPayload`
 */
let RichList = class RichList extends List {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.richVariant = 'default';
        this.horizontalPadding = 'dense';
    }
    static get styles() {
        return [super.styles, styles];
    }
    async updated(_changedProperties) {
        super.updated(_changedProperties);
        const items = this._getSlotItems();
        for (let i = 0; i < items.length; i += 1) {
            if (_changedProperties.has('variant')) {
                items[i].richVariant = this.richVariant;
            }
        }
    }
    render() {
        const role = this.innerRole || 'listbox';
        const ariaLabel = this.innerAriaLabel || 'list';
        const classes = {
            list: true,
            '-hds-rich-list-wrapper': true,
            '-hds-list-wrapper': true,
            disabled: this.disabled,
        };
        return html `
      <div
        class="${classMap(classes)}"
        role="${role}"
        tabindex="0"
        aria-label="${ariaLabel}"
        @select="${super.onSelect}"
        @keydown="${super.onKeypress}"
      >
        <slot></slot>
      </div>
    `;
    }
    _getSlotItems() {
        return this.itemsSlot
            .assignedNodes({ flatten: true })
            .filter((e) => e instanceof RichListItem);
    }
};
__decorate([
    property({ type: Boolean })
], RichList.prototype, "disabled", void 0);
__decorate([
    property({ type: String, attribute: 'variant' })
], RichList.prototype, "richVariant", void 0);
__decorate([
    property({ type: String, attribute: false })
], RichList.prototype, "horizontalPadding", void 0);
__decorate([
    query('slot')
], RichList.prototype, "itemsSlot", void 0);
RichList = __decorate([
    customElement('hds-rich-list')
], RichList);
export { RichList };
//# sourceMappingURL=hds-rich-list.js.map