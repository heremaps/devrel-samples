import React, { useEffect, useRef, useImperativeHandle } from 'react';
import { Toggle } from '@here/hds-toggle';
// eslint-disable-next-line no-new
new Toggle();
const HDSToggle = React.forwardRef(({ children, checked, value, disabled, id, name, description, className, onCheck, onChange, showRequired, required, ...rest }, ref) => {
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onCheck && onCheck(e.detail);
        onChange && onChange(e);
    };
    useEffect(() => {
        if (innerRef.current && (onCheck || onChange)) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleChange);
        };
    }, [onCheck, onChange, innerRef]);
    return (React.createElement("hds-toggle", { ...(checked && { checked: true }), ...(disabled && { disabled: true }), ...(showRequired && { 'show-required': showRequired }), ...(className && { class: className }), value: value, required: required, id: id, name: name, ref: innerRef, ...rest },
        children,
        description && React.createElement("span", { slot: "description" }, description)));
});
HDSToggle.defaultProps = {
    checked: false,
    disabled: false,
    required: false,
    id: '',
    name: '',
    ariaLabel: '',
    showRequired: false,
    autocomplete: '',
};
export default HDSToggle;
//# sourceMappingURL=HDSToggle.js.map