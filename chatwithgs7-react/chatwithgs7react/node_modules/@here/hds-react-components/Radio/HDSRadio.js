import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { Radio } from '@here/hds-radio';
new Radio();
const HDSRadio = React.forwardRef((props, ref) => {
    const { checked, defaultChecked, disabled, id, name, value, size, description, className, children, onChange, autocomplete, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e);
    };
    useEffect(() => {
        if (innerRef.current && onChange) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleChange);
        };
    }, [onChange, innerRef]);
    return (React.createElement("hds-radio", { ...(checked && { checked }), ...(defaultChecked && { defaultChecked }), ...(disabled && { disabled }), ...(className && { class: className }), ...(autocomplete && { autocomplete }), ...(size && { size }), id: id, name: name, value: value, ref: innerRef, ...rest },
        children,
        description && React.createElement("span", { slot: "description" }, description)));
});
HDSRadio.defaultProps = {
    checked: false,
    disabled: false,
    size: 'medium',
    value: '',
    name: '',
    description: '',
    autocomplete: '',
};
export default HDSRadio;
//# sourceMappingURL=HDSRadio.js.map