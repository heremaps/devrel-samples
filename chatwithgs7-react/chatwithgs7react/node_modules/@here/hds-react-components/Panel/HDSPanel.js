import React, { useEffect, useImperativeHandle } from 'react';
import { Panel } from '@here/hds-panel';
// eslint-disable-next-line no-new
new Panel();
const HDSPanel = React.forwardRef((props, ref) => {
    const { variant, panelPosition, panelInteraction, partialSize, expanded, children, className, onChange, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e.detail);
    };
    useEffect(() => {
        if (onChange && innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => innerRef.current?.removeEventListener('change', _handleChange);
    }, [onChange, innerRef]);
    const attributes = {};
    variant && (attributes.variant = variant);
    panelInteraction && (attributes['panel-interaction'] = panelInteraction);
    panelPosition && (attributes['panel-position'] = panelPosition);
    partialSize && (attributes['partial-size'] = partialSize);
    expanded && (attributes.expanded = expanded);
    return (React.createElement("hds-panel", { ...attributes, ...(className && { class: className }), ...rest, ref: innerRef }, children));
});
HDSPanel.defaultProps = {
    variant: 'vertical',
    panelPosition: 'left',
    panelInteraction: 'none',
    partialSize: 0,
    expanded: 'open',
};
export default HDSPanel;
//# sourceMappingURL=HDSPanel.js.map