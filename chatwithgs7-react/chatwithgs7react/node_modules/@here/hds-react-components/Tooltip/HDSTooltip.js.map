{"version":3,"file":"HDSTooltip.js","sourceRoot":"","sources":["../src/Tooltip/HDSTooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC9E,OAAO,EAAC,OAAO,EAAC,MAAM,mBAAmB,CAAC;AAC1C,kCAAkC;AAClC,IAAI,OAAO,EAAE,CAAC;AAWd,IAAI,SAAS,GAAG,CAAC,CAAC;AAElB,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAA2B,EAAE,GAAG,EAAE,EAAE;IACvE,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,EAAC,GACzF,KAAK,CAAC;IACR,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,MAAM,CAAC,eAAe,EAAE,IAAI,SAAS,EAAE,EAAE,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC;QAChD,CAAC,CAAC,aAAa;YACb,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC,CAAC;QAChD,CAAC,CAAC,OAAO,CAAC;IACZ,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAElD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,YAAY,EAAE;YACvD,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAClE,UAAU,CAAC,IAAI,CAAC,CAAC;SAClB;IACH,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,CACL;QACG,WAAW;QACX,OAAO,IAAI,CACV,qCACE,EAAE,EAAE,KAAK,CAAC,OAAO,KACb,CAAC,QAAQ,IAAI,EAAC,QAAQ,EAAC,CAAC,KACxB,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,KACjC,CAAC,WAAW,IAAI,EAAC,WAAW,EAAC,CAAC,KAC9B,CAAC,OAAO,IAAI,EAAC,OAAO,EAAC,CAAC,EAC1B,GAAG,EAAE,GAAG,KACJ,CAAC,QAAQ,IAAI,EAAC,QAAQ,EAAC,CAAC,KACxB,IAAI;YAER,iCAAM,OAAO,CAAO,CACR,CACf,CACA,CACJ,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,UAAU,CAAC,YAAY,GAAG;IACxB,EAAE,EAAE,EAAE;IACN,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,QAAQ;IAClB,WAAW,EAAE,KAAK;IAClB,OAAO,EAAE,kBAAkB;CAC5B,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import React, {useEffect, useImperativeHandle, useRef, useState} from 'react';\nimport {Tooltip} from '@here/hds-tooltip';\n// eslint-disable-next-line no-new\nnew Tooltip();\n\ninterface HDSTooltipProperties extends React.HTMLAttributes<HTMLElement> {\n  id?: string;\n  content: React.ReactNode;\n  position?: string;\n  interactive?: boolean;\n  trigger?: string;\n  disabled?: boolean;\n}\n\nlet idCounter = 1;\n\nconst HDSTooltip = React.forwardRef((props: HDSTooltipProperties, ref) => {\n  const {position, children, interactive, trigger, id, content, disabled, className, ...rest} =\n    props;\n  const [isReady, setIsReady] = useState(false);\n  const targetRef = useRef<HTMLElement>(null);\n  const idRef = useRef(`hds-tooltip-${id || idCounter++}`);\n  const targetClone = React.isValidElement(children)\n    ? // @ts-ignore\n      React.cloneElement(children, {ref: targetRef})\n    : content;\n  useImperativeHandle(ref, () => targetRef.current);\n\n  useEffect(() => {\n    if (targetRef.current && targetRef.current.setAttribute) {\n      targetRef.current.setAttribute('data-hds-tooltip', idRef.current);\n      setIsReady(true);\n    }\n  }, [targetRef]);\n\n  return (\n    <>\n      {targetClone}\n      {isReady && (\n        <hds-tooltip\n          id={idRef.current}\n          {...(position && {position})}\n          {...(className && {class: className})}\n          {...(interactive && {interactive})}\n          {...(trigger && {trigger})}\n          ref={ref}\n          {...(disabled && {disabled})}\n          {...rest}\n        >\n          <div>{content}</div>\n        </hds-tooltip>\n      )}\n    </>\n  );\n});\n\nHDSTooltip.defaultProps = {\n  id: '',\n  disabled: false,\n  position: 'bottom',\n  interactive: false,\n  trigger: 'mouseenter focus',\n};\n\nexport default HDSTooltip;\n"]}