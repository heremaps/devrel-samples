import React, { useEffect, useImperativeHandle, useRef, useState } from 'react';
import { Tooltip } from '@here/hds-tooltip';
// eslint-disable-next-line no-new
new Tooltip();
let idCounter = 1;
const HDSTooltip = React.forwardRef((props, ref) => {
    const { position, children, interactive, trigger, id, content, disabled, className, ...rest } = props;
    const [isReady, setIsReady] = useState(false);
    const targetRef = useRef(null);
    const idRef = useRef(`hds-tooltip-${id || idCounter++}`);
    const targetClone = React.isValidElement(children)
        ? // @ts-ignore
            React.cloneElement(children, { ref: targetRef })
        : content;
    useImperativeHandle(ref, () => targetRef.current);
    useEffect(() => {
        if (targetRef.current && targetRef.current.setAttribute) {
            targetRef.current.setAttribute('data-hds-tooltip', idRef.current);
            setIsReady(true);
        }
    }, [targetRef]);
    return (React.createElement(React.Fragment, null,
        targetClone,
        isReady && (React.createElement("hds-tooltip", { id: idRef.current, ...(position && { position }), ...(className && { class: className }), ...(interactive && { interactive }), ...(trigger && { trigger }), ref: ref, ...(disabled && { disabled }), ...rest },
            React.createElement("div", null, content)))));
});
HDSTooltip.defaultProps = {
    id: '',
    disabled: false,
    position: 'bottom',
    interactive: false,
    trigger: 'mouseenter focus',
};
export default HDSTooltip;
//# sourceMappingURL=HDSTooltip.js.map