{"version":3,"file":"HDSTabBar.js","sourceRoot":"","sources":["../src/Tabs/HDSTabBar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAqC,MAAM,gBAAgB,CAAC;AAC1E,OAAO,KAAK,EAAE,EAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AAEpE,kCAAkC;AAClC,IAAI,MAAM,EAAE,CAAC;AAWb,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAAqB,EAAE,GAAG,EAAE,EAAE;IAChE,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAC,GAC1F,KAAK,CAAC;IACR,MAAM,QAAQ,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAE3C,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAEjD,MAAM,eAAe,GAAG,CAAC,CAAmC,EAAE,EAAE;QAC9D,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,OAAO;YAAE,OAAO;QAC1C,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;IACF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,eAAgC,CAAC,CAAC;aAC/E;SACF;QACD,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,OAAO,EAAE,mBAAmB,CAAC,QAAQ,EAAE,eAAgC,CAAC,CAAC;QACpF,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEzB,OAAO,CACL,qCACE,OAAO,EAAE,OAAO,KACZ,CAAC,cAAc,IAAI,EAAC,kBAAkB,EAAE,cAAc,EAAC,CAAC,KACxD,CAAC,QAAQ,IAAI,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC,KACrC,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,gBACzB,SAAS,EACrB,GAAG,EAAE,QAAQ,KACT,IAAI,IAEP,QAAQ,CACG,CACf,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,YAAY,GAAG;IACvB,OAAO,EAAE,SAAS;IAClB,cAAc,EAAE,KAAK;IACrB,SAAS,EAAE,SAAS;IACpB,QAAQ,EAAE,SAAS;CACpB,CAAC;AAEF,eAAe,SAAS,CAAC","sourcesContent":["import {TabBar, TabBarSelectPayload, TabBarVariant} from '@here/hds-tabs';\nimport React, {useEffect, useImperativeHandle, useRef} from 'react';\n\n// eslint-disable-next-line no-new\nnew TabBar();\n\ninterface HDSTabBarProps extends Omit<React.HTMLAttributes<HTMLElement>, 'onSelect'> {\n  children: React.ReactNode;\n  onSelect?: (tabIndex: TabBarSelectPayload) => void;\n  selectFirstTab?: boolean;\n  ariaLabel?: string;\n  ariaRole?: string;\n  variant?: TabBarVariant;\n}\n\nconst HDSTabBar = React.forwardRef((props: HDSTabBarProps, ref) => {\n  const {children, variant, className, onSelect, selectFirstTab, ariaLabel, ariaRole, ...rest} =\n    props;\n  const innerRef = useRef<HTMLElement>(null);\n\n  useImperativeHandle(ref, () => innerRef.current);\n\n  const _handleSelected = (e: CustomEvent<TabBarSelectPayload>) => {\n    if (e.target !== innerRef.current) return;\n    onSelect && onSelect(e.detail);\n  };\n  useEffect(() => {\n    if (innerRef.current) {\n      if (onSelect) {\n        innerRef.current.addEventListener('select', _handleSelected as EventListener);\n      }\n    }\n    return () => {\n      innerRef.current?.removeEventListener('select', _handleSelected as EventListener);\n    };\n  }, [onSelect, innerRef]);\n\n  return (\n    <hds-tab-bar\n      variant={variant}\n      {...(selectFirstTab && {'select-first-tab': selectFirstTab})}\n      {...(ariaRole && {'aria-role': ariaRole})}\n      {...(className && {class: className})}\n      aria-label={ariaLabel}\n      ref={innerRef}\n      {...rest}\n    >\n      {children}\n    </hds-tab-bar>\n  );\n});\n\nHDSTabBar.defaultProps = {\n  variant: 'default',\n  selectFirstTab: false,\n  ariaLabel: undefined,\n  ariaRole: 'tablist',\n};\n\nexport default HDSTabBar;\n"]}