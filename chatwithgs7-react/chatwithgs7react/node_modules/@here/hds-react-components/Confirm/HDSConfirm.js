import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { Confirm } from '@here/hds-confirm';
// eslint-disable-next-line no-new
new Confirm();
const HDSConfirm = React.forwardRef(({ className, children, onClose, onChange, onConfirm, onThirdButton, onCancel, icon, iconCategory, iconColor, hideCloseBtn, header, footer, disableCloseOnOverlayClick, disableCloseOnEscape, confirmText, cancelText, thirdButtonText, ...props }, ref) => {
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleClose = (e) => {
        if (e.target !== innerRef.current)
            return;
        onClose && onClose(e.detail);
        onChange && onChange(e.detail);
    };
    const _handleAction = (e) => {
        if (e.target !== innerRef.current)
            return;
        switch (e.detail.from) {
            case 'thirdButton':
                onThirdButton && onThirdButton();
                break;
            case 'confirm':
                onConfirm && onConfirm();
                break;
            case 'cancel':
                onCancel && onCancel();
                break;
        }
    };
    useEffect(() => {
        if (innerRef.current) {
            (onChange || onClose) &&
                innerRef.current.addEventListener('change', _handleClose);
            (onConfirm || onCancel || onThirdButton) &&
                innerRef.current.addEventListener('action', _handleAction);
        }
        return () => {
            innerRef.current?.removeEventListener('close', _handleClose);
            innerRef.current?.removeEventListener('action', _handleAction);
        };
    }, [onClose, onChange, onConfirm, onThirdButton, onCancel, innerRef]);
    const attributes = {};
    icon && (attributes.icon = icon);
    iconCategory && (attributes['icon-category'] = iconCategory);
    iconColor && (attributes['icon-color'] = iconColor);
    hideCloseBtn && (attributes['hide-close-btn'] = hideCloseBtn);
    disableCloseOnOverlayClick &&
        (attributes['disable-close-on-overlay-click'] = disableCloseOnOverlayClick);
    disableCloseOnEscape && (attributes['disable-close-on-escape'] = disableCloseOnEscape);
    confirmText && (attributes['confirm-text'] = confirmText);
    cancelText && (attributes['cancel-text'] = cancelText);
    thirdButtonText && (attributes['third-button-text'] = thirdButtonText);
    return (React.createElement("hds-confirm", { ...props, ...attributes, ...(className && { class: className }), ref: innerRef },
        React.createElement("span", { slot: "header" }, header),
        React.createElement("div", { slot: "body" }, children),
        footer && React.createElement("div", { slot: "footer" }, footer)));
});
HDSConfirm.defaultProps = {
    hideCloseBtn: false,
    closeAriaLabel: 'Close',
    icon: '',
    iconColor: '',
    iconCategory: 'core-ui',
    disableCloseOnOverlayClick: false,
    disableCloseOnEscape: false,
    confirmText: 'Done',
    cancelText: 'Cancel',
    thirdButtonText: 'Settings',
};
export default HDSConfirm;
//# sourceMappingURL=HDSConfirm.js.map