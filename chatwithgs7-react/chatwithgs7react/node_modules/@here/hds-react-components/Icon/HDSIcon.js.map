{"version":3,"file":"HDSIcon.js","sourceRoot":"","sources":["../src/Icon/HDSIcon.tsx"],"names":[],"mappings":"AACA,OAAO,EAAC,SAAS,EAAE,mBAAmB,EAAC,MAAM,OAAO,CAAC;AACrD,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAC,IAAI,EAAiC,MAAM,gBAAgB,CAAC;AAEpE,kCAAkC;AAClC,IAAI,IAAI,EAAE,CAAC;AAWX,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAAwB,EAAE,GAAG,EAAE,EAAE;IACjE,MAAM,EAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI,EAAC,GAAG,KAAK,CAAC;IAE1D,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAc,IAAI,CAAC,CAAC;IACjD,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAEjD,MAAM,eAAe,GAAG,CAAC,CAAmC,EAAE,EAAE;QAC9D,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,OAAO;YAAE,OAAO;QAC1C,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,UAAU,IAAI,QAAQ,CAAC,OAAO,EAAE;YAClC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,eAAgC,CAAC,CAAC;SACjF;QACD,OAAO,GAAG,EAAE,CACV,QAAQ,CAAC,OAAO,EAAE,mBAAmB,CAAC,UAAU,EAAE,eAAgC,CAAC,CAAC;IACxF,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;IAE3B,OAAO,CACL,qCACM,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,KACjC,CAAC,SAAS,IAAI,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,EAC5C,GAAG,EAAE,QAAQ,KACT,IAAI,GACE,CACb,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,YAAY,GAAG;IACrB,QAAQ,EAAE,SAAS;IACnB,SAAS,EAAE,OAAO;IAClB,IAAI,EAAE,MAAM;CACb,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["import {IconCategory} from '@here/hds-iconlibrary';\nimport {useEffect, useImperativeHandle} from 'react';\nimport * as React from 'react';\nimport {Icon, IconNotFoundPayload, IconStyle} from '@here/hds-icon';\n\n// eslint-disable-next-line no-new\nnew Icon();\n\ninterface HDSIconProperties extends Omit<React.HTMLAttributes<HTMLElement>, 'onError'> {\n  name: string;\n  category?: IconCategory;\n  iconStyle?: IconStyle;\n  size?: string;\n  // eslint-disable-next-line no-unused-vars\n  onNotFound?: (e: IconNotFoundPayload) => void;\n}\n\nconst HDSIcon = React.forwardRef((props: HDSIconProperties, ref) => {\n  const {iconStyle, className, onNotFound, ...rest} = props;\n\n  const innerRef = React.useRef<HTMLElement>(null);\n  useImperativeHandle(ref, () => innerRef.current);\n\n  const _handleNotFound = (e: CustomEvent<IconNotFoundPayload>) => {\n    if (e.target !== innerRef.current) return;\n    onNotFound && onNotFound(e.detail);\n  };\n\n  useEffect(() => {\n    if (onNotFound && innerRef.current) {\n      innerRef.current.addEventListener('notfound', _handleNotFound as EventListener);\n    }\n    return () =>\n      innerRef.current?.removeEventListener('notfound', _handleNotFound as EventListener);\n  }, [onNotFound, innerRef]);\n\n  return (\n    <hds-icon\n      {...(className && {class: className})}\n      {...(iconStyle && {'icon-style': iconStyle})}\n      ref={innerRef}\n      {...rest}\n    ></hds-icon>\n  );\n});\n\nHDSIcon.defaultProps = {\n  category: 'core-ui',\n  iconStyle: 'solid',\n  size: '16px',\n};\n\nexport default HDSIcon;\n"]}