import React, { useRef, useEffect, useImperativeHandle } from 'react';
import { Notification, } from '@here/hds-notification';
// eslint-disable-next-line no-new
new Notification();
const HDSNotification = React.forwardRef((props, ref) => {
    const { children, variant, status, size, hideIcon, timeout, open, keepNode, inline, hideClose, closeAriaLabel, onClose, onChange, onAction, className, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleClose = (e) => {
        if (e.target !== innerRef.current)
            return;
        onClose && onClose(e.detail);
        onChange && onChange(e);
    };
    const _handleActionClick = (e) => {
        onAction && onAction(e.detail);
    };
    useEffect(() => {
        if (innerRef.current && (onClose || onChange)) {
            innerRef.current.addEventListener('change', _handleClose);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleClose);
        };
    }, [onClose, onChange, innerRef]);
    useEffect(() => {
        if (innerRef.current && onAction) {
            innerRef.current.addEventListener('action', _handleActionClick);
        }
        return () => {
            innerRef.current?.removeEventListener('action', _handleActionClick);
        };
    }, [onAction, innerRef]);
    return (React.createElement("hds-notification", { open: open, "keep-node": keepNode, variant: variant, status: status, size: size, timeout: timeout, ...(className && { class: className }), ...(hideClose && { 'hide-close': hideClose }), ...(hideIcon && { 'hide-icon': hideIcon }), ...(closeAriaLabel && { 'close-aria-label': closeAriaLabel }), ...(inline && { inline }), ref: innerRef, ...rest }, children));
});
HDSNotification.defaultProps = {
    open: true,
    variant: 'solid',
    status: 'default',
    size: 'medium',
    timeout: 0,
    keepNode: true,
    hideIcon: false,
    hideClose: false,
};
export default HDSNotification;
//# sourceMappingURL=HDSNotification.js.map