import React, { createContext, useCallback, useMemo, useState } from 'react';
import HDSToastContainer from './HDSToastContainer.js';
import HDSNotification from './HDSNotification.js';
let toastsCounter = 1;
const ToastContext = createContext({});
export default ToastContext;
const HDSNotificationWrapper = (props) => {
    const { onClose, toastId, removeToast, children } = props;
    const handleClose = (e) => {
        if (onClose) {
            onClose(e);
        }
        removeToast(toastId);
    };
    return (React.createElement(HDSNotification, { ...props, onClose: handleClose }, children));
};
export const HDSToastContextProvider = ({ position, children }) => {
    const [toasts, setToasts] = useState([]);
    const addToast = useCallback((toastElement) => {
        const id = `hds-toast-${toastsCounter++}`;
        toastElement.id = id;
        toastElement.toastId = id;
        setToasts(currValue => [...currValue, toastElement]);
    }, [setToasts]);
    const removeToast = (toastId) => {
        setToasts(currValue => currValue.filter(toast => toast.toastId !== toastId));
    };
    const contextValue = useMemo(() => ({ addToast }), [addToast]);
    return (React.createElement(ToastContext.Provider, { value: contextValue },
        children,
        React.createElement(HDSToastContainer, { position: position }, toasts.map(toast => (React.createElement(HDSNotificationWrapper, { ...toast, toastId: toast.toastId, id: toast.id, key: toast.toastId, removeToast: removeToast }, toast.body))))));
};
HDSToastContextProvider.defaultProps = {
    position: 'bottom-right',
};
//# sourceMappingURL=HDSToastContextProvider.js.map