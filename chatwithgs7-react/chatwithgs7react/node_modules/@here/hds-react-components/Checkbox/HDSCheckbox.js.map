{"version":3,"file":"HDSCheckbox.js","sourceRoot":"","sources":["../src/Checkbox/HDSCheckbox.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAC,SAAS,EAAE,MAAM,EAAE,mBAAmB,EAAC,MAAM,OAAO,CAAC;AACpE,OAAO,EAAC,QAAQ,EAAsC,MAAM,oBAAoB,CAAC;AAEjF,kCAAkC;AAClC,IAAI,QAAQ,EAAE,CAAC;AAkBf,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAClC,CACE,EACE,QAAQ,EACR,OAAO,EACP,KAAK,EACL,IAAI,EACJ,QAAQ,EACR,EAAE,EACF,IAAI,EACJ,WAAW,EACX,SAAS,EACT,SAAS,EACT,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,QAAQ,EACR,YAAY,EACZ,GAAG,IAAI,EACe,EACxB,GAAG,EACH,EAAE;IACF,MAAM,QAAQ,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAE3C,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAEjD,MAAM,aAAa,GAAG,CAAC,CAAqC,EAAE,EAAE;QAC9D,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,OAAO;YAAE,OAAO;QAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC7B,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,OAAO,IAAI,CAAC,OAAO,IAAI,QAAQ,CAAC,EAAE;YAC7C,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAA8B,CAAC,CAAC;SAC7E;QACD,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,OAAO,EAAE,mBAAmB,CAAC,QAAQ,EAAE,aAA8B,CAAC,CAAC;QAClF,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAElC,OAAO,CACL,yCACM,CAAC,OAAO,IAAI,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,KAC5B,CAAC,QAAQ,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,KAC9B,CAAC,YAAY,IAAI,EAAC,eAAe,EAAE,YAAY,EAAC,CAAC,KACjD,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,KACjC,CAAC,YAAY,IAAI,EAAC,YAAY,EAAC,CAAC,KAChC,CAAC,SAAS,IAAI,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,EAC5C,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,EAClB,EAAE,EAAE,EAAE,EACN,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,QAAQ,KACT,IAAI;QAEP,QAAQ;QACR,WAAW,IAAI,8BAAM,IAAI,EAAC,aAAa,IAAE,WAAW,CAAQ,CAChD,CAChB,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,WAAW,CAAC,YAAY,GAAG;IACzB,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,KAAK;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,YAAY,EAAE,KAAK;IACnB,IAAI,EAAE,EAAE;IACR,YAAY,EAAE,EAAE;IAChB,SAAS,EAAE,EAAE;CACd,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import React, {useEffect, useRef, useImperativeHandle} from 'react';\nimport {Checkbox, CheckboxSize, CheckboxChangePayload} from '@here/hds-checkbox';\n\n// eslint-disable-next-line no-new\nnew Checkbox();\n\nexport interface HDSCheckboxProperties extends Omit<React.HTMLAttributes<HTMLElement>, 'onChange'> {\n  checked?: boolean;\n  value?: string;\n  size?: CheckboxSize;\n  disabled?: boolean;\n  id?: string;\n  ariaLabel?: string;\n  name?: string;\n  description?: React.ReactNode;\n  showRequired?: boolean;\n  required?: boolean;\n  autocomplete?: string;\n  onCheck?: (detail: CheckboxChangePayload) => void;\n  onChange?: (event: CustomEvent<CheckboxChangePayload>) => void;\n}\n\nconst HDSCheckbox = React.forwardRef(\n  (\n    {\n      children,\n      checked,\n      value,\n      size,\n      disabled,\n      id,\n      name,\n      description,\n      ariaLabel,\n      className,\n      onCheck,\n      onChange,\n      showRequired,\n      required,\n      autocomplete,\n      ...rest\n    }: HDSCheckboxProperties,\n    ref\n  ) => {\n    const innerRef = useRef<HTMLElement>(null);\n\n    useImperativeHandle(ref, () => innerRef.current);\n\n    const _handleChange = (e: CustomEvent<CheckboxChangePayload>) => {\n      if (e.target !== innerRef.current) return;\n      onCheck && onCheck(e.detail);\n      onChange && onChange(e);\n    };\n\n    useEffect(() => {\n      if (innerRef.current && (onCheck || onChange)) {\n        innerRef.current.addEventListener('change', _handleChange as EventListener);\n      }\n      return () => {\n        innerRef.current?.removeEventListener('change', _handleChange as EventListener);\n      };\n    }, [onCheck, onChange, innerRef]);\n\n    return (\n      <hds-checkbox\n        {...(checked && {checked: true})}\n        {...(disabled && {disabled: true})}\n        {...(showRequired && {'show-required': showRequired})}\n        {...(className && {class: className})}\n        {...(autocomplete && {autocomplete})}\n        {...(ariaLabel && {'aria-label': ariaLabel})}\n        value={value}\n        size={size}\n        required={required}\n        id={id}\n        name={name}\n        ref={innerRef}\n        {...rest}\n      >\n        {children}\n        {description && <span slot=\"description\">{description}</span>}\n      </hds-checkbox>\n    );\n  }\n);\n\nHDSCheckbox.defaultProps = {\n  size: 'medium',\n  checked: false,\n  disabled: false,\n  required: false,\n  showRequired: false,\n  name: '',\n  autocomplete: '',\n  ariaLabel: '',\n};\n\nexport default HDSCheckbox;\n"]}