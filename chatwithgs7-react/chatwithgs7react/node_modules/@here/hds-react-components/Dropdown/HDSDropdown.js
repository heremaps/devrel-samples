import { Dropdown } from '@here/hds-dropdown';
import { List } from '@here/hds-list';
import React, { useEffect, useImperativeHandle, useRef } from 'react';
/* eslint-disable no-new */
new Dropdown();
new List();
const HDSDropdown = React.forwardRef((props, ref) => {
    const { open, hideOnScroll, placement, allowedPlacements, menu, trigger, onSelect, onChange, className, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleSelected = (e) => {
        if (e.target !== innerRef.current)
            return;
        onSelect && onSelect(e.detail);
    };
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e.detail);
    };
    useEffect(() => {
        if (innerRef.current) {
            if (onSelect) {
                innerRef.current.addEventListener('select', _handleSelected);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('select', _handleSelected);
        };
    }, [onSelect, innerRef]);
    useEffect(() => {
        if (innerRef.current) {
            if (onChange) {
                innerRef.current.addEventListener('change', _handleChange);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleChange);
        };
    }, [onChange, innerRef]);
    // const allowedAutoPositionsValue =
    //   allowedAutoPositions && allowedAutoPositions.length
    //     ? allowedAutoPositions.join(',')
    //     : undefined;
    return (React.createElement("hds-dropdown", { ...(open && { open }), ...(placement && { placement }), ...(className && { class: className }), ...(allowedPlacements &&
            allowedPlacements.length && { 'allowed-placements': allowedPlacements.join(',') }), ...(hideOnScroll && { 'hide-on-scroll': true }), ...rest, ref: innerRef },
        trigger && React.createElement("span", { slot: "trigger" }, trigger),
        menu && React.createElement("div", { slot: "menu" }, menu)));
});
HDSDropdown.defaultProps = {
    open: false,
    hideOnScroll: false,
    placement: 'bottom',
};
export default HDSDropdown;
//# sourceMappingURL=HDSDropdown.js.map