import React, { useEffect, useImperativeHandle } from 'react';
import { HeroSearch } from '@here/hds-hero-search';
// eslint-disable-next-line no-new
new HeroSearch();
const HDSHeroSearch = React.forwardRef((props, ref) => {
    const { children, value, id, name, placeholder, disabled, className, required, onAction, onChange, onKeyDown, onKeyUp, onBlur, onFocus, actions, onInput, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleAction = (e) => {
        if (e.target !== innerRef.current)
            return;
        onAction && onAction(e);
    };
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e);
    };
    const _handleInput = (e) => {
        if (e.target !== innerRef.current)
            return;
        onInput && onInput(e);
    };
    const _handleBlur = (e) => {
        if (e.target !== innerRef.current)
            return;
        onBlur && onBlur(e);
    };
    const _handleFocus = (e) => {
        if (e.target !== innerRef.current)
            return;
        onFocus && onFocus(e);
    };
    const _handleKeyDown = (e) => {
        if (e.target !== innerRef.current)
            return;
        onKeyDown && onKeyDown(e);
    };
    const _handleKeyUp = (e) => {
        if (e.target !== innerRef.current)
            return;
        onKeyUp && onKeyUp(e);
    };
    useEffect(() => {
        if (onAction && innerRef.current) {
            innerRef.current.addEventListener('action', _handleAction);
        }
        return () => innerRef.current?.removeEventListener('action', _handleAction);
    }, [onAction, innerRef]);
    useEffect(() => {
        if (onChange && innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => innerRef.current?.removeEventListener('change', _handleChange);
    }, [onChange, innerRef]);
    useEffect(() => {
        if (onInput && innerRef.current) {
            innerRef.current.addEventListener('input', _handleInput);
        }
        return () => innerRef.current?.removeEventListener('input', _handleInput);
    }, [onInput, innerRef]);
    useEffect(() => {
        if (onBlur && innerRef.current) {
            innerRef.current.addEventListener('blur', _handleBlur);
        }
        return () => innerRef.current?.removeEventListener('blur', _handleBlur);
    }, [onBlur, innerRef]);
    useEffect(() => {
        if (onFocus && innerRef.current) {
            innerRef.current.addEventListener('focus', _handleFocus);
        }
        return () => innerRef.current?.removeEventListener('focus', _handleFocus);
    }, [onFocus, innerRef]);
    useEffect(() => {
        if (onKeyDown && innerRef.current) {
            innerRef.current.addEventListener('keydown', _handleKeyDown);
        }
        return () => innerRef.current?.removeEventListener('keydown', _handleKeyDown);
    }, [onKeyDown, innerRef]);
    useEffect(() => {
        if (onKeyUp && innerRef.current) {
            innerRef.current.addEventListener('keyup', _handleKeyUp);
        }
        return () => innerRef.current?.removeEventListener('keyup', _handleKeyUp);
    }, [onKeyUp, innerRef]);
    return (React.createElement("hds-hero-search", { value: value, id: id, name: name, placeholder: placeholder, ...(disabled && { disabled: true }), ...(className && { class: className }), ...(required && { required: true }), ref: innerRef, ...rest },
        children,
        actions));
});
HDSHeroSearch.defaultProps = {
    id: '',
    name: undefined,
    placeholder: undefined,
    pattern: undefined,
    iconCategory: 'core-ui',
    disabled: false,
    required: false,
    ariaLabelledby: undefined,
    ariaLabel: '',
    passwordVisibility: 'masked',
    autocomplete: '',
};
export default HDSHeroSearch;
//# sourceMappingURL=HDSHeroSearch.js.map