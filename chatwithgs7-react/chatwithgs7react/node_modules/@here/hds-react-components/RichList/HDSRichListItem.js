import React, { useEffect, useImperativeHandle } from 'react';
import { RichListItem } from '@here/hds-rich-list';
// eslint-disable-next-line no-new
new RichListItem();
const HDSRichListItem = React.forwardRef((props, ref) => {
    const { children, disabled, state, headline, subTitle, progressText, progress, errorText, filePreview, iconDefault, iconDefaultCategory, iconProgress, iconProgressCategory, iconError, iconErrorCategory, iconSuccess, iconSuccessCategory, hideIcon, hideCancel, hideRetry, hideDelete, actions, file, className, progressVariant, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    useEffect(() => {
        if (innerRef.current) {
            innerRef.current.file = file;
        }
    }, [file, innerRef]);
    const attributes = {};
    subTitle && (attributes['sub-title'] = subTitle);
    progressText && (attributes['progress-text'] = progressText);
    errorText && (attributes['error-text'] = errorText);
    filePreview && (attributes['file-preview'] = true);
    iconDefault && (attributes['icon-default'] = iconDefault);
    iconDefaultCategory && (attributes['icon-default-category'] = iconDefaultCategory);
    iconProgress && (attributes['icon-progress'] = iconProgress);
    iconProgressCategory && (attributes['icon-progress-category'] = iconProgressCategory);
    iconError && (attributes['icon-error'] = iconError);
    iconErrorCategory && (attributes['icon-error-category'] = iconErrorCategory);
    iconSuccess && (attributes['icon-success'] = iconSuccess);
    iconSuccessCategory && (attributes['icon-success-category'] = iconSuccessCategory);
    hideIcon && (attributes['hide-icon'] = false);
    hideCancel && (attributes['hide-cancel'] = false);
    hideRetry && (attributes['hide-retry'] = false);
    hideDelete && (attributes['hide-delete'] = false);
    progressVariant && (attributes['progress-variant'] = progressVariant);
    return (React.createElement("hds-rich-list-item", { ...attributes, progress: progress, state: state, headline: headline, ref: innerRef, ...(disabled && { disabled }), ...(className && { class: className }), ...rest },
        children,
        actions));
});
HDSRichListItem.defaultProps = {
    disabled: false,
    state: 'default',
    headline: '',
    subTitle: '',
    progressText: '',
    progress: 0,
    progressVariant: 'determinate',
    errorText: '',
    filePreview: false,
    iconDefault: 'time',
    iconDefaultCategory: 'core-ui',
    iconProgress: 'time',
    iconProgressCategory: 'core-ui',
    iconError: 'alert',
    iconErrorCategory: 'core-ui',
    iconSuccess: 'checkmark',
    iconSuccessCategory: 'core-ui',
    hideIcon: false,
    hideCancel: false,
    hideRetry: false,
    hideDelete: false,
};
export default HDSRichListItem;
//# sourceMappingURL=HDSRichListItem.js.map