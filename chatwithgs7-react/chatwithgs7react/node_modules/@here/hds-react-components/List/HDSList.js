import { List } from '@here/hds-list';
import React, { useEffect, useImperativeHandle, useRef } from 'react';
// eslint-disable-next-line no-new
new List();
const HDSList = React.forwardRef((props, ref) => {
    const { unhoverable, unpressable, unfocusable, unselectable, disabled, onSelect, groupTitle, innerAriaLabel, innerRole, selectedIndex, variant, size, horizontalPadding, className, children, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleSelected = (e) => {
        if (e.target !== innerRef.current)
            return;
        onSelect && onSelect(e.detail);
    };
    useEffect(() => {
        if (innerRef.current) {
            if (onSelect) {
                innerRef.current.addEventListener('select', _handleSelected);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('select', _handleSelected);
        };
    }, [onSelect, innerRef]);
    return (React.createElement("hds-list", { ...(unhoverable && { unhoverable }), ...(unpressable && { unpressable }), ...(unfocusable && { unfocusable }), ...(unselectable && { unselectable }), ...(disabled && { disabled }), ...(groupTitle && { 'group-title': groupTitle }), ...(innerAriaLabel && { 'inner-aria-label': innerAriaLabel }), ...(innerRole && { 'inner-role': innerRole }), ...(selectedIndex && { 'selected-index': selectedIndex }), ...(horizontalPadding && { 'horizontal-padding': horizontalPadding }), ...(variant && { variant }), ...(size && { size }), ...(className && { class: className }), ...rest, ref: innerRef }, children));
});
HDSList.defaultProps = {
    innerRole: undefined,
    innerAriaLabel: undefined,
    truncate: true,
    groupTitle: '',
    variant: 'subtle',
    size: 'small',
    horizontalPadding: 'default',
    selectedIndex: -1,
    disabled: false,
    unhoverable: false,
    unpressable: false,
    unfocusable: false,
    unselectable: false,
};
export default HDSList;
//# sourceMappingURL=HDSList.js.map