import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { ListItem, } from '@here/hds-list';
// eslint-disable-next-line no-new
new ListItem();
const HDSListItem = React.forwardRef(({ unhoverable, unselectable, unpressable, unfocusable, selected, disabled, dragging, children, iconRight, iconRightCategory, iconCategory, className, onSelect, ...rest }, ref) => {
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleSelected = (e) => {
        if (e.target !== innerRef.current)
            return;
        onSelect && onSelect(e.detail);
    };
    useEffect(() => {
        if (innerRef.current) {
            if (onSelect) {
                innerRef.current.addEventListener('select', _handleSelected);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('select', _handleSelected);
        };
    }, [onSelect, innerRef]);
    return (React.createElement("hds-list-item", { ...(unhoverable && { unhoverable }), ...(unselectable && { unselectable }), ...(unpressable && { unpressable }), ...(unfocusable && { unfocusable }), ...(selected && { selected }), ...(disabled && { disabled }), ...(dragging && { dragging }), ...(iconRight && { 'icon-right': iconRight }), ...(iconRightCategory && { 'icon-right-category': iconRightCategory }), ...(iconCategory && { 'icon-category': iconCategory }), ...(className && { class: className }), ref: innerRef, ...rest }, children));
});
HDSListItem.defaultProps = {
    unhoverable: false,
    unpressable: false,
    unselectable: false,
    unfocusable: false,
    selected: false,
    dragging: false,
    icon: undefined,
    iconCategory: 'core-ui',
    iconRight: undefined,
    iconRightCategory: 'core-ui',
    variant: 'default',
    groupVariant: 'subtle',
    size: 'small',
};
export default HDSListItem;
//# sourceMappingURL=HDSListItem.js.map