import { useEffect, useImperativeHandle, useRef } from 'react';
import * as React from 'react';
import { Button } from '@here/hds-button';
import { HDSIcon } from '../Icon/index.js';
// eslint-disable-next-line no-new
new Button();
const HDSLinkButton = React.forwardRef((props, ref) => {
    const { children, disabled, size, variant, icon, iconRight, iconCategory, iconRightCategory, iconOnly, ...rest } = props;
    // Render the button as link
    const classesMap = {
        'hds-button': true,
    };
    classesMap[`hds-button--size-${size ?? 'medium'}`] = true;
    classesMap[`hds-button--variant-${variant ?? 'primary'}`] = true;
    classesMap['hds-button--icon'] = !!icon || !!iconRight;
    classesMap['hds-button--icononly'] = !!iconOnly;
    classesMap['hds-button--disabled'] = !!disabled;
    const classes = Object.keys(classesMap)
        .reduce((acc, key) => {
        if (classesMap[key]) {
            acc.push(key);
        }
        return acc;
    }, [])
        .join(' ');
    const Icon = icon ? React.createElement(HDSIcon, { name: icon, size: "16px", category: iconCategory }) : null;
    const IconRight = iconRight ? (React.createElement(HDSIcon, { name: iconRight, category: iconRightCategory, size: "16px" })) : null;
    const linkProps = {
        ...rest,
        ...children?.props,
        link: undefined,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ref: ref,
        className: classes,
        tabIndex: disabled ? -1 : 0,
        children: (React.createElement(React.Fragment, null,
            Icon,
            !iconOnly && children?.props?.children && (React.createElement("span", { className: "hds-button-label" }, children.props.children)),
            IconRight)),
    };
    return React.isValidElement(children) ? (React.cloneElement(children, { ...linkProps })) : (React.createElement("span", { ...linkProps, role: "button" },
        React.createElement(React.Fragment, null,
            Icon,
            !iconOnly && React.createElement("span", { className: "hds-button-label" }, children))));
});
const HDSButton = React.forwardRef((props, ref) => {
    const { children, className, disabled, selected, selectable, onClick, onSelect, size, variant, width, icon, iconCategory, iconRight, iconRightCategory, link, loading, ...rest } = props;
    // Render the button as link
    if (link) {
        return (React.createElement(HDSLinkButton, { ...props, ...(className && { class: className }) }, children));
    }
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleClick = (e) => {
        if (!disabled && onClick) {
            onClick(e);
        }
    };
    const _handleSelect = (e) => {
        if (e.target !== innerRef.current)
            return;
        onSelect && onSelect(e);
    };
    useEffect(() => {
        if (innerRef.current) {
            innerRef.current.addEventListener('click', _handleClick);
            innerRef.current.addEventListener('select', _handleSelect);
        }
        return () => {
            innerRef.current?.removeEventListener('click', _handleClick);
            innerRef.current?.removeEventListener('select', _handleSelect);
        };
    }, [onClick, onSelect, innerRef]);
    return (React.createElement("hds-button", { ...rest, ...(className && { class: className }), variant: variant, ...(selected && { selected: true }), ...(selectable && { selectable: true }), ...(disabled && { disabled: true }), ...(width && { width }), ...(icon && { icon }), ...(loading && { loading: true }), ...(iconCategory && { 'icon-category': iconCategory }), ...(iconRight && { 'icon-right': iconRight }), ...(iconRightCategory && { 'icon-right-category': iconRightCategory }), size: size, ref: innerRef }, children));
});
HDSButton.defaultProps = {
    type: 'button',
    variant: 'primary',
    size: 'medium',
    iconCategory: 'core-ui',
    iconRightCategory: 'core-ui',
};
export default HDSButton;
//# sourceMappingURL=HDSButton.js.map