import React, { useEffect, useImperativeHandle } from 'react';
import { Dropzone } from '@here/hds-dropzone';
// eslint-disable-next-line no-new
new Dropzone();
const HDSDropzone = React.forwardRef((props, ref) => {
    const { progress, error, disabled, multiple, accept, icon, iconCategory, orientation, reset, textDropzoneBrowseFiles, textDropzoneDropFiles, textDropzoneOr, textDropzoneUploading, textDropzoneDraggingOver, textDropzoneFileRestrictions, textAssistive, textError, textTitle, textFileRestrictions, className, onChange, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e.detail);
    };
    useEffect(() => {
        if (onChange && innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => innerRef.current?.removeEventListener('change', _handleChange);
    }, [onChange, innerRef]);
    useEffect(() => {
        if (reset && innerRef.current) {
            innerRef.current.reset();
        }
    }, [reset, innerRef]);
    const attributes = {};
    progress && (attributes.progress = true);
    error && (attributes.error = true);
    disabled && (attributes.disabled = true);
    multiple && (attributes.multiple = true);
    textDropzoneBrowseFiles && (attributes['text-dropzone-browse-files'] = textDropzoneBrowseFiles);
    textDropzoneDropFiles && (attributes['text-dropzone-drop-files'] = textDropzoneDropFiles);
    textDropzoneOr && (attributes['text-dropzone-or'] = textDropzoneOr);
    textDropzoneUploading && (attributes['text-dropzone-uploading'] = textDropzoneUploading);
    textDropzoneDraggingOver &&
        (attributes['text-dropzone-dragging-over'] = textDropzoneDraggingOver);
    textDropzoneFileRestrictions &&
        (attributes['text-dropzone-file-restrictions'] = textDropzoneFileRestrictions);
    textAssistive && (attributes['text-assistive'] = textAssistive);
    textError && (attributes['text-error'] = textError);
    textTitle && (attributes['text-title'] = textTitle);
    textFileRestrictions && (attributes['text-file-restrictions'] = textFileRestrictions);
    return (React.createElement("hds-dropzone", { icon: icon, ...(iconCategory && { 'icon-category': iconCategory }), ...(className && { class: className }), accept: accept, orientation: orientation, ref: innerRef, ...attributes, ...rest }));
});
HDSDropzone.displayName = 'hds-dropzone';
HDSDropzone.defaultProps = {
    progress: false,
    error: false,
    disabled: false,
    multiple: false,
    accept: '',
    icon: '',
    iconCategory: 'core-ui',
    orientation: 'horizontal',
    textDropzoneBrowseFiles: 'Browse files',
    textDropzoneDropFiles: 'Drop files here',
    textDropzoneOr: 'or',
    textDropzoneUploading: 'Uploading',
    textDropzoneDraggingOver: '',
    textDropzoneFileRestrictions: '',
    textAssistive: '',
    textError: '',
    textTitle: '',
    textFileRestrictions: '',
};
export default HDSDropzone;
//# sourceMappingURL=HDSDropzone.js.map