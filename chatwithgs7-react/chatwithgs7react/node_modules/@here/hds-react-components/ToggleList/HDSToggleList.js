import React, { useEffect, useImperativeHandle } from 'react';
import { ToggleList } from '@here/hds-togglelist';
// eslint-disable-next-line no-new
new ToggleList();
const HDSToggleList = React.forwardRef((props, ref) => {
    const { children, expandMode, defaultExpanded, className, onChange, onSelect, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        onChange && onChange(e.detail);
    };
    const _handleSelect = (e) => {
        onSelect && onSelect(e.detail);
    };
    useEffect(() => {
        if (onChange && innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => innerRef.current?.removeEventListener('change', _handleChange);
    }, [onChange, innerRef]);
    useEffect(() => {
        if (onSelect && innerRef.current) {
            innerRef.current.addEventListener('select', _handleSelect);
        }
        return () => innerRef.current?.removeEventListener('select', _handleSelect);
    }, [onSelect, innerRef]);
    return (React.createElement("hds-togglelist", { ...(expandMode && { 'expand-mode': expandMode }), ...(defaultExpanded && { 'default-expanded': defaultExpanded }), ...(className && { class: className }), ref: innerRef, ...rest }, children));
});
HDSToggleList.defaultProps = {
    expandMode: 'many',
    defaultExpanded: false,
};
export default HDSToggleList;
//# sourceMappingURL=HDSToggleList.js.map