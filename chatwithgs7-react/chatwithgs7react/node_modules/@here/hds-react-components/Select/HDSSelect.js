import React from 'react';
import { components } from 'react-select';
import { HDSIcon } from '../Icon/index.js';
import { HDSChip } from '../Chip/index.js';
import HDSOption from './HDSOption.js';
export const HDSSelectStyles = {
    container: styles => ({
        ...styles,
        font: 'var(--hds-body-small-font)',
        letterSpacing: 'var(--hds-body-small-letter-spacing)',
        background: 'var(--hds-background-secondary)',
        borderRadius: 'var(--hds-border-radius)',
    }),
    control: (styles, state) => {
        let border = 'var(--hds-border-width) solid var(--hds-foreground-tertiary)';
        border = state.isFocused ? 'var(--hds-border-width) solid transparent' : border;
        border = state.isDisabled
            ? 'var(--hds-border-width) solid var(--hds-foreground-tertiary-disabled)'
            : border;
        const boxShadow = state.isFocused ? '0 0 0 2px var(--hds-object-focused)' : 'none';
        return {
            ...styles,
            background: 'var(--hds-background--primary)',
            border,
            borderRadius: 'var(--hds-border-radius)',
            boxShadow,
            paddingRight: 'var(--hds-spacing-2)',
        };
    },
    input: styles => ({
        ...styles,
        margin: 'var(--hds-spacing-0) var(--hds-spacing-0) var(--hds-spacing-0) var(--hds-spacing-0)',
        padding: 'var(--hds-spacing-0)',
        color: 'var(--hds-foreground-primary)',
    }),
    placeholder: styles => ({
        ...styles,
        margin: 'var(--hds-spacing-0)',
        color: 'var(--hds-foreground-tertiary)',
    }),
    noOptionsMessage: styles => ({
        ...styles,
        color: 'var(--hds-foreground-inactive)',
        textAlign: 'left',
    }),
    singleValue: (styles, state) => ({
        ...styles,
        margin: 'var(--hds-spacing-0)',
        color: state.isDisabled
            ? 'var(--hds-foreground-primary-disabled)'
            : 'var(--hds-foreground-primary)',
    }),
    indicatorsContainer: styles => ({
        ...styles,
        alignItems: 'flex-start',
        alignSelf: 'flex-start',
        height: '40px',
    }),
    indicatorSeparator: () => ({
        display: 'none',
    }),
    menu: styles => ({
        ...styles,
        background: 'var(--hds-background-secondary)',
        border: 'none',
        boxShadow: 'none',
        borderRadius: 'var(--hds-border-radius)',
        filter: 'var(--hds-overlay)',
        margin: 'var(--hds-spacing-3) var(--hds-spacing-0)',
    }),
    menuList: styles => ({
        ...styles,
        padding: 'var(--hds-spacing-2) var(--hds-spacing-0)',
    }),
    option: styles => ({
        ...styles,
        padding: 'var(--hds-spacing-0)',
    }),
    valueContainer: styles => ({
        ...styles,
        gap: 'var(--hds-spacing-2)',
        padding: 'var(--hds-spacing-2) var(--hds-spacing-2) var(--hds-spacing-2) var(--hds-spacing-4)',
    }),
    multiValue: styles => ({
        ...styles,
        background: 'none',
        color: 'var(--hds-foreground-primary)',
        position: 'relative',
        margin: 'var(--hds-spacing-0)',
        '& > div': {
            padding: 'var(--hds-spacing-0)',
        },
    }),
    multiValueRemove: styles => ({
        ...styles,
        position: 'absolute',
        right: 'var(--hds-spacing-2)',
        opacity: '0',
        top: 'var(--hds-spacing-1)',
        width: '20px',
        height: '18px',
        cursor: 'pointer',
    }),
    clearIndicator: (styles, state) => ({
        ...styles,
        cursor: 'pointer',
        alignSelf: 'center',
        '--hds-icon-color': state.isDisabled
            ? 'var(--hds-foreground-secondary-disabled)'
            : 'var(--hds-foreground-secondary)',
    }),
    dropdownIndicator: (styles, state) => ({
        ...styles,
        alignSelf: 'center',
        '--hds-icon-color': state.isDisabled
            ? 'var(--hds-foreground-secondary-disabled)'
            : 'var(--hds-foreground-secondary)',
    }),
};
// Styles
const Base = {
    container: styles => ({
        ...styles,
        font: 'var(--hds-body-small-font)',
        letterSpacing: 'var(--hds-body-small-letter-spacing)',
        background: 'var(--hds-background-secondary)',
        borderRadius: 'var(--hds-border-radius)',
    }),
    control: (styles, state) => {
        let border = 'var(--hds-border-width) solid var(--hds-foreground-tertiary)';
        border = state.isFocused ? 'var(--hds-border-width) solid transparent' : border;
        border = state.isDisabled
            ? 'var(--hds-border-width) solid var(--hds-foreground-tertiary-disabled)'
            : border;
        const boxShadow = state.isFocused ? '0 0 0 2px var(--hds-object-focused)' : 'none';
        return {
            ...styles,
            background: 'var(--hds-background--primary)',
            border,
            borderRadius: 'var(--hds-border-radius)',
            boxShadow,
            paddingRight: 'var(--hds-spacing-3)',
            minHeight: 40,
        };
    },
    input: styles => ({
        ...styles,
        margin: 'var(--hds-spacing-0)',
        padding: 'var(--hds-spacing-0)',
        color: 'var(--hds-foreground-primary)',
    }),
    placeholder: styles => ({
        ...styles,
        margin: 'var(--hds-spacing-0)',
        color: 'var(--hds-foreground-tertiary)',
    }),
    noOptionsMessage: styles => ({
        ...styles,
        color: 'var(--hds-foreground-inactive)',
        textAlign: 'left',
    }),
    singleValue: (styles, state) => ({
        ...styles,
        margin: 'var(--hds-spacing-0)',
        color: state.isDisabled
            ? 'var(--hds-foreground-primary-disabled)'
            : 'var(--hds-foreground-primary)',
    }),
    indicatorsContainer: styles => ({
        ...styles,
        alignSelf: 'auto',
    }),
    indicatorSeparator: () => ({
        display: 'none',
    }),
    menu: styles => ({
        ...styles,
        background: 'var(--hds-background-secondary)',
        border: 'none',
        boxShadow: 'none',
        borderRadius: 'var(--hds-border-radius)',
        filter: 'var(--hds-overlay)',
        margin: 'var(--hds-spacing-3) var(--hds-spacing-0)',
    }),
    menuList: styles => ({
        ...styles,
        padding: 'var(--hds-spacing-2) var(--hds-spacing-0)',
    }),
    option: styles => ({
        ...styles,
        padding: 'var(--hds-spacing-0)',
    }),
    valueContainer: styles => ({
        ...styles,
        gap: 'var(--hds-spacing-2)',
        padding: 'calc(var(--hds-spacing-2) - 1px) var(--hds-spacing-0) calc(var(--hds-spacing-2) - 1px) var(--hds-spacing-4)',
    }),
    multiValue: styles => ({
        ...styles,
        background: 'none',
        color: 'var(--hds-foreground-primary)',
        position: 'relative',
        margin: 'var(--hds-spacing-0)',
        '& > div': {
            padding: 'var(--hds-spacing-0)',
        },
    }),
    multiValueRemove: styles => ({
        ...styles,
        position: 'absolute',
        right: 'var(--hds-spacing-2)',
        opacity: '0',
        top: 'var(--hds-spacing-1)',
        width: '20px',
        height: '18px',
        cursor: 'pointer',
    }),
    clearIndicator: (styles, state) => ({
        ...styles,
        cursor: 'pointer',
        alignSelf: 'center',
        '--hds-icon-color': state.isDisabled
            ? 'var(--hds-foreground-secondary-disabled)'
            : 'var(--hds-foreground-secondary)',
        padding: 'var(--hds-spacing-1)',
    }),
    dropdownIndicator: (styles, state) => ({
        ...styles,
        alignSelf: 'center',
        '--hds-icon-color': state.isDisabled
            ? 'var(--hds-foreground-secondary-disabled)'
            : 'var(--hds-foreground-secondary)',
        padding: 'var(--hds-spacing-1)',
    }),
};
const Small = {
    ...Base,
    control: (styles, state) => ({
        ...styles,
        ...Base.control(styles, state),
        minHeight: 22,
    }),
    indicatorsContainer: styles => ({
        ...Base.indicatorsContainer(styles),
        height: '24px',
    }),
    valueContainer: styles => ({
        ...Base.valueContainer(styles),
        padding: 'var(--hds-spacing-0) var(--hds-spacing-0) var(--hds-spacing-0) var(--hds-spacing-2)',
    }),
    dropdownIndicator: (styles, state) => ({
        ...Base.dropdownIndicator(styles, state),
        padding: 0,
    }),
};
const Large = {
    ...Base,
};
const Medium = {
    ...Base,
    control: (styles, state) => ({
        ...styles,
        ...Base.control(styles, state),
        minHeight: 30,
    }),
    valueContainer: styles => ({
        ...Base.valueContainer(styles),
        padding: 'calc(var(--hds-spacing-0) - 0px) var(--hds-spacing-0) calc(var(--hds-spacing-0) - 0px) var(--hds-spacing-4)',
    }),
};
const SubtleControl = (styles, state) => {
    const boxShadow = state.isFocused ? '0 0 0 2px var(--hds-object-focused)' : 'none';
    return {
        ...styles,
        background: 'transparent',
        border: 'var(--hds-border-width) solid transparent !important',
        borderRadius: 'var(--hds-border-radius)',
        boxShadow,
        paddingRight: 'var(--hds-spacing-3)',
        minHeight: 40,
    };
};
const SmallSublte = {
    ...Small,
    control: (styles, state) => ({
        ...styles,
        ...SubtleControl(styles, state),
        minHeight: 30,
    }),
};
const MediumSublte = {
    ...Medium,
    control: (styles, state) => ({
        ...styles,
        ...SubtleControl(styles, state),
        minHeight: 38,
    }),
};
const LargeSublte = {
    ...Large,
    control: (styles, state) => ({
        ...styles,
        ...SubtleControl(styles, state),
        minHeight: 46,
    }),
};
export const HDSSelectStyleGroups = {
    default: {
        small: Small,
        medium: Medium,
        large: Large,
    },
    subtle: {
        small: SmallSublte,
        medium: MediumSublte,
        large: LargeSublte,
    },
};
export const HDSSelectThemes = theme => ({
    ...theme,
    borderRadius: '0',
    colors: {
        ...theme.colors,
        primary25: 'var(--hds-background-hover)',
        primary50: '',
        primary: '',
    },
});
export const HDSSelectMultiOption = props => (React.createElement(components.Option, { ...props },
    React.createElement(HDSOption, { variant: "multiple", selected: props.isSelected, disabled: props.isDisabled }, props.label)));
export const HDSSelectSingleOption = props => (React.createElement(components.Option, { ...props },
    React.createElement(HDSOption, { selected: props.isSelected, disabled: props.isDisabled }, props.label)));
/*
 For removing the chips we are not using 'onRemove' callback provided by HDSChip component.
 Instead we are using the 'MultiValueRemove' component from react-select
 which remove/deselect the chips from the dropdown.
 'MultiValueRemove' component is placed on top of remove icon of HDSChip component with
 position absolute and opacity 0 (refer 'multiValueRemove' style above in HDSSelectStyles).
 When User clicks on remove icon of HDSChip component then 'MultiValueRemove' (which is react-select default remove)
 will get triggered and chips will deselect.
*/
export const HDSSelectChips = props => {
    const { data } = props;
    return (React.createElement(components.MultiValue, { ...props },
        React.createElement(HDSChip, { size: "small", removable: true, disabled: props.disabled || data.disabled }, data.label)));
};
export const HDSSelectDropdownIndicator = props => {
    const { selectProps: { menuIsOpen }, } = props;
    return (React.createElement(components.DropdownIndicator, { ...props }, menuIsOpen ? (React.createElement(HDSIcon, { iconStyle: "solid", name: "chevron-up", size: "16px" })) : (React.createElement(HDSIcon, { iconStyle: "solid", name: "chevron-down", size: "16px" }))));
};
export const HDSSelectClearIndicator = props => (React.createElement(components.ClearIndicator, { ...props },
    React.createElement(HDSIcon, { iconStyle: "solid", name: "clear", size: "16px" })));
//# sourceMappingURL=HDSSelect.js.map