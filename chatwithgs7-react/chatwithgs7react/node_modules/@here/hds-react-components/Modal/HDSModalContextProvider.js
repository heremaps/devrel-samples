import React, { createContext, useCallback, useMemo, useState } from 'react';
import HDSModal from './HDSModal.js';
import HDSModalContainer from './HDSModalContainer.js';
const HDSModalWrapper = props => {
    const { onClose } = props;
    const handleClose = (e) => {
        if (onClose) {
            onClose(e);
        }
    };
    return (React.createElement(HDSModal, { ...props, onClose: handleClose }, props.children));
};
const ModalContext = createContext({});
export default ModalContext;
let modalCounter = 1;
export const HDSModalContextProvider = ({ children }) => {
    const [modal, setModal] = useState([]);
    const addModal = useCallback((modalElement) => {
        modalElement.modalId = `hds-modal-${modalCounter++}`;
        setModal(currValue => [...currValue, modalElement]);
    }, [setModal]);
    const contextValue = useMemo(() => ({ addModal }), [addModal]);
    return (React.createElement(ModalContext.Provider, { value: contextValue },
        children,
        React.createElement(HDSModalContainer, null, modal.map(modalEl => (React.createElement(HDSModalWrapper, { ...modalEl, key: modalEl.modalId }, modalEl.body))))));
};
//# sourceMappingURL=HDSModalContextProvider.js.map