import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { Modal } from '@here/hds-modal';
// eslint-disable-next-line no-new
new Modal();
const HDSModal = React.forwardRef((props, ref) => {
    const { header, body, footer, onClose, onChange, onConfirm, onCancel, onThirdButton, icon, iconCategory, iconColor, hideCloseBtn, disableCloseOnOverlayClick, disableCloseOnEscape, closeAriaLabel, className, headingMessage, message, titleSize, hideHeader, hideFooter, confirmVariant, hideConfirm, hideCancel, hideThirdButton, confirmText, cancelText, thirdButtonText, children, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleClose = (e) => {
        if (e.target !== innerRef.current)
            return;
        onClose && onClose(e.detail);
        onChange && onChange(e.detail);
    };
    const _handleAction = (e) => {
        if (e.target !== innerRef.current)
            return;
        switch (e.detail.from) {
            case 'thirdButton':
                onThirdButton && onThirdButton();
                break;
            case 'confirm':
                onConfirm && onConfirm();
                break;
            case 'cancel':
                onCancel && onCancel();
                break;
        }
    };
    useEffect(() => {
        if (innerRef.current) {
            (onClose || onChange) &&
                innerRef.current.addEventListener('change', _handleClose);
            (onConfirm || onCancel || onThirdButton) &&
                innerRef.current?.addEventListener('action', _handleAction);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleClose);
            innerRef.current?.removeEventListener('action', _handleAction);
        };
    }, [onClose, onChange, onConfirm, onCancel, onThirdButton, innerRef]);
    // !!!
    //
    // Be aware of using spread operator '...' for pass property into element
    //
    // We usually do this, in our small components, using the following syntax to pass an attribute:
    // {...(hideCloseBtn && {'hide-close-btn': hideCloseBtn})}
    //
    // But keeping in mind that any JSX element, in simple words, is a function - React.createElement(),
    // which takes the details as an argument,
    // we should understand that in reality a union of types is happening under the hood of Typescript
    //
    // The following explains in more detail what actually happens when we use many spread operators:
    // https://github.com/microsoft/TypeScript/issues/34599#issuecomment-548150334
    //
    // !!!
    const attributes = {};
    icon && (attributes.icon = icon);
    iconCategory && (attributes['icon-category'] = iconCategory);
    iconColor && (attributes['icon-color'] = iconColor);
    hideCloseBtn && (attributes['hide-close-btn'] = hideCloseBtn);
    disableCloseOnOverlayClick &&
        (attributes['disable-close-on-overlay-click'] = disableCloseOnOverlayClick);
    disableCloseOnEscape && (attributes['disable-close-on-escape'] = disableCloseOnEscape);
    closeAriaLabel && (attributes['close-aria-label'] = closeAriaLabel);
    headingMessage && (attributes['heading-message'] = headingMessage);
    message && (attributes.message = message);
    titleSize && (attributes['title-size'] = titleSize);
    hideHeader && (attributes['hide-header'] = hideHeader);
    hideFooter && (attributes['hide-footer'] = hideFooter);
    confirmVariant && (attributes['confirm-variant'] = confirmVariant);
    hideConfirm && (attributes['hide-confirm'] = hideConfirm);
    hideCancel && (attributes['hide-cancel'] = hideCancel);
    hideThirdButton && (attributes['hide-third-button'] = hideThirdButton);
    confirmText && (attributes['confirm-text'] = confirmText);
    cancelText && (attributes['cancel-text'] = cancelText);
    thirdButtonText && (attributes['third-button-text'] = thirdButtonText);
    return (React.createElement("hds-modal", { ...attributes, ref: innerRef, ...(className && { class: className }), ...rest },
        header && React.createElement("div", { slot: "header" }, header),
        body ? React.createElement("div", { slot: "body" }, body) : children,
        footer && React.createElement("div", { slot: "footer" }, footer)));
});
export default HDSModal;
//# sourceMappingURL=HDSModal.js.map