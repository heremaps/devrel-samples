{"version":3,"file":"HDSModalContextProvider.js","sourceRoot":"","sources":["../src/Modal/HDSModalContextProvider.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,EAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAC3E,OAAO,QAA8B,MAAM,eAAe,CAAC;AAC3D,OAAO,iBAAiB,MAAM,wBAAwB,CAAC;AAOvD,MAAM,eAAe,GAAgC,KAAK,CAAC,EAAE;IAC3D,MAAM,EAAC,OAAO,EAAC,GAAG,KAAK,CAAC;IACxB,MAAM,WAAW,GAAG,CAAC,CAAqB,EAAE,EAAE;QAC5C,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,CAAC,CAAC,CAAC;SACZ;IACH,CAAC,CAAC;IACF,OAAO,CACL,oBAAC,QAAQ,OAAK,KAAK,EAAE,OAAO,EAAE,WAAW,IACtC,KAAK,CAAC,QAAQ,CACN,CACZ,CAAC;AACJ,CAAC,CAAC;AAOF,MAAM,YAAY,GAAG,aAAa,CAAC,EAAsB,CAAC,CAAC;AAE3D,eAAe,YAAY,CAAC;AAE5B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,MAAM,CAAC,MAAM,uBAAuB,GAA0C,CAAC,EAAC,QAAQ,EAAC,EAAE,EAAE;IAC3F,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,EAAyB,CAAC,CAAC;IAE9D,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,YAA+B,EAAE,EAAE;QAClC,YAAY,CAAC,OAAO,GAAG,aAAa,YAAY,EAAE,EAAE,CAAC;QACrD,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;IACtD,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,QAAQ,EAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAE7D,OAAO,CACL,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY;QACvC,QAAQ;QACT,oBAAC,iBAAiB,QACf,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CACpB,oBAAC,eAAe,OAAK,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,IAC/C,OAAO,CAAC,IAAI,CACG,CACnB,CAAC,CACgB,CACE,CACzB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {ModalChangePayload} from '@here/hds-modal';\nimport React, {createContext, useCallback, useMemo, useState} from 'react';\nimport HDSModal, {HDSModalProperties} from './HDSModal.js';\nimport HDSModalContainer from './HDSModalContainer.js';\n\nexport interface ModalWrapperProps extends HDSModalProperties {\n  modalId?: string;\n  body?: React.ReactNode;\n}\n\nconst HDSModalWrapper: React.FC<ModalWrapperProps> = props => {\n  const {onClose} = props;\n  const handleClose = (e: ModalChangePayload) => {\n    if (onClose) {\n      onClose(e);\n    }\n  };\n  return (\n    <HDSModal {...props} onClose={handleClose}>\n      {props.children}\n    </HDSModal>\n  );\n};\n\ninterface ModalContextType {\n  // eslint-disable-next-line no-unused-vars\n  addModal: (modal: ModalWrapperProps) => void;\n}\n\nconst ModalContext = createContext({} as ModalContextType);\n\nexport default ModalContext;\n\nlet modalCounter = 1;\n\nexport const HDSModalContextProvider: React.FC<{children: React.ReactNode}> = ({children}) => {\n  const [modal, setModal] = useState([] as ModalWrapperProps[]);\n\n  const addModal = useCallback(\n    (modalElement: ModalWrapperProps) => {\n      modalElement.modalId = `hds-modal-${modalCounter++}`;\n      setModal(currValue => [...currValue, modalElement]);\n    },\n    [setModal]\n  );\n\n  const contextValue = useMemo(() => ({addModal}), [addModal]);\n\n  return (\n    <ModalContext.Provider value={contextValue}>\n      {children}\n      <HDSModalContainer>\n        {modal.map(modalEl => (\n          <HDSModalWrapper {...modalEl} key={modalEl.modalId}>\n            {modalEl.body}\n          </HDSModalWrapper>\n        ))}\n      </HDSModalContainer>\n    </ModalContext.Provider>\n  );\n};\n"]}