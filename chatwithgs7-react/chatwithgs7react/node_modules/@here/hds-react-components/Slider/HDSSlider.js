import * as React from 'react';
import { Slider } from '@here/hds-slider';
import { useEffect, useImperativeHandle, useRef } from 'react';
// eslint-disable-next-line no-new
new Slider();
const HDSSlider = React.forwardRef((props, ref) => {
    const { disabled, min, max, step, type, size, textStart, textEnd, trackFillStart, noTrackFill, trackColors, trackColorsLengths, stepValues, stepLabels, iconStart, iconStartStyle, iconStartCategory, iconEnd, iconEndStyle, iconEndCategory, value, value2, className, onChange, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.target !== innerRef.current)
            return;
        onChange && onChange(e);
    };
    useEffect(() => {
        if (innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleChange);
        };
    }, [onChange, innerRef]);
    return (React.createElement("hds-slider", { ref: innerRef, ...(className && { class: className }), min: min, max: max, step: step, type: type, size: size, "text-start": textStart, "text-end": textEnd, "track-fill-start": trackFillStart, ...(noTrackFill && { 'no-track-fill': true }), "track-colors": trackColors, "track-colors-lengths": trackColorsLengths, "step-values": stepValues, "step-labels": stepLabels, "icon-start": iconStart, "icon-start-style": iconStartStyle, "icon-start-category": iconStartCategory, "icon-end": iconEnd, "icon-end-style": iconEndStyle, "icon-end-category": iconEndCategory, value: value, value2: value2, ...(disabled && { disabled: true }), ...rest }));
});
HDSSlider.displayName = 'HDSSlider';
HDSSlider.defaultProps = {
    disabled: false,
    min: 0,
    max: 100,
    step: 0,
    type: 'default',
    size: 'medium',
};
export default HDSSlider;
//# sourceMappingURL=HDSSlider.js.map