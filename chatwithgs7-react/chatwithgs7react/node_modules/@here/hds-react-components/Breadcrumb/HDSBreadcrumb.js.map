{"version":3,"file":"HDSBreadcrumb.js","sourceRoot":"","sources":["../src/Breadcrumb/HDSBreadcrumb.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAC,MAAM,OAAO,CAAC;AACpE,OAAO,EAAC,UAAU,EAA0B,MAAM,sBAAsB,CAAC;AACzE,kCAAkC;AAClC,IAAI,UAAU,EAAE,CAAC;AAUjB,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,KAA8B,EAAE,GAAG,EAAE,EAAE;IAC7E,MAAM,EAAC,QAAQ,EAAE,aAAa,EAAE,mBAAmB,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAC,GAC1F,KAAK,CAAC;IACR,MAAM,QAAQ,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAC3C,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAEjD,MAAM,aAAa,GAAG,CAAC,CAAuC,EAAE,EAAE;QAChE,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC/B,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,QAAQ,CAAC,OAAO,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE;YAC9C,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAA8B,CAAC,CAAC;SAC7E;QACD,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,OAAO,EAAE,mBAAmB,CAAC,QAAQ,EAAE,aAA8B,CAAC,CAAC;QAClF,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEnC,OAAO,CACL,wCACE,GAAG,EAAE,QAAQ,KACT,CAAC,aAAa,IAAI,EAAC,gBAAgB,EAAE,aAAa,EAAC,CAAC,KACpD,CAAC,mBAAmB,IAAI;YAC1B,sBAAsB,EAAE,mBAAmB;SAC5C,CAAC,KACE,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,KACjC,IAAI,IAEP,QAAQ,CACM,CAClB,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,aAAa,CAAC,YAAY,GAAG;IAC3B,aAAa,EAAE,IAAI;IACnB,mBAAmB,EAAE,CAAC;CACvB,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import React, {useEffect, useImperativeHandle, useRef} from 'react';\nimport {Breadcrumb, BreadcrumbChangePayload} from '@here/hds-breadcrumb';\n// eslint-disable-next-line no-new\nnew Breadcrumb();\n\ninterface HDSBreadcrumbProperties extends Omit<React.HTMLAttributes<HTMLElement>, 'onChange'> {\n  children: React.ReactNode;\n  truncateItems?: boolean;\n  truncateItemsBuffer?: number;\n  onExpand?: (e: BreadcrumbChangePayload) => void;\n  onChange?: (e: BreadcrumbChangePayload) => void;\n}\n\nconst HDSBreadcrumb = React.forwardRef((props: HDSBreadcrumbProperties, ref) => {\n  const {children, truncateItems, truncateItemsBuffer, className, onExpand, onChange, ...rest} =\n    props;\n  const innerRef = useRef<HTMLElement>(null);\n  useImperativeHandle(ref, () => innerRef.current);\n\n  const _handleChange = (e: CustomEvent<BreadcrumbChangePayload>) => {\n    onExpand && onExpand(e.detail);\n    onChange && onChange(e.detail);\n  };\n\n  useEffect(() => {\n    if (innerRef.current && (onExpand || onChange)) {\n      innerRef.current.addEventListener('change', _handleChange as EventListener);\n    }\n    return () => {\n      innerRef.current?.removeEventListener('change', _handleChange as EventListener);\n    };\n  }, [onChange, onExpand, innerRef]);\n\n  return (\n    <hds-breadcrumb\n      ref={innerRef}\n      {...(truncateItems && {'truncate-items': truncateItems})}\n      {...(truncateItemsBuffer && {\n        'truncate-item-buffer': truncateItemsBuffer,\n      })}\n      {...(className && {class: className})}\n      {...rest}\n    >\n      {children}\n    </hds-breadcrumb>\n  );\n});\n\nHDSBreadcrumb.defaultProps = {\n  truncateItems: true,\n  truncateItemsBuffer: 5,\n};\n\nexport default HDSBreadcrumb;\n"]}