import * as React from 'react';
import { Wizard } from '@here/hds-wizard';
import { useEffect, useImperativeHandle, useRef } from 'react';
// eslint-disable-next-line no-new
new Wizard();
const HDSWizard = React.forwardRef((props, ref) => {
    const { header, body, footer, stepper, stepperFooter, onClose, onConfirm, onCancel, onStepChange, onChange, className, hideCloseBtn, disableCloseOnOverlayClick, disableCloseOnEscape, closeAriaLabel, headingMessage, message, hideHeader, hideFooter, confirmVariant, hideConfirm, hideCancel, confirmText, cancelText, stepText, stepperHeading, children, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleClose = (e) => {
        if (e.target !== innerRef.current)
            return;
        onClose && onClose(e.detail);
        onChange && onChange(e.detail);
    };
    const _handleConfirm = () => onConfirm && onConfirm();
    const _handleCancel = () => onCancel && onCancel();
    const _handleAction = (e) => {
        if (e.target !== innerRef.current)
            return;
        if (e.detail.from === 'confirm') {
            _handleConfirm();
        }
        else {
            _handleCancel();
        }
    };
    useEffect(() => {
        if (innerRef.current) {
            (onClose || onChange) &&
                innerRef.current.addEventListener('change', _handleClose);
            (onConfirm || onCancel) &&
                innerRef.current.addEventListener('action', _handleAction);
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleClose);
            innerRef.current?.removeEventListener('action', _handleAction);
        };
    }, [onClose, onChange, onConfirm, onCancel, onStepChange, innerRef]);
    const attributes = {};
    hideCloseBtn && (attributes['hide-close-btn'] = true);
    disableCloseOnOverlayClick && (attributes['disable-close-on-overlay-click'] = true);
    disableCloseOnEscape && (attributes['disable-close-on-escape'] = true);
    closeAriaLabel && (attributes['close-aria-label'] = closeAriaLabel);
    headingMessage && (attributes['heading-message'] = headingMessage);
    message && (attributes.message = message);
    hideHeader && (attributes['hide-header'] = hideHeader);
    hideFooter && (attributes['hide-footer'] = hideFooter);
    confirmVariant && (attributes['confirm-variant'] = confirmVariant);
    hideConfirm && (attributes['hide-confirm'] = hideConfirm);
    hideCancel && (attributes['hide-cancel'] = hideCancel);
    confirmText && (attributes['confirm-text'] = confirmText);
    cancelText && (attributes['cancel-text'] = cancelText);
    stepText && (attributes['step-text'] = stepText);
    stepperHeading && (attributes['stepper-heading'] = stepperHeading);
    return (React.createElement("hds-wizard", { ref: innerRef, ...attributes, ...(className && { class: className }), ...rest },
        header && React.createElement("div", { slot: "header" }, header),
        body ? React.createElement("div", { slot: "body" }, body) : children,
        footer && React.createElement("div", { slot: "footer" }, footer),
        stepper && React.createElement("div", { slot: "stepper" }, stepper),
        stepperFooter && React.createElement("div", { slot: "stepper-footer" }, stepperFooter)));
});
export default HDSWizard;
//# sourceMappingURL=HDSWizard.js.map