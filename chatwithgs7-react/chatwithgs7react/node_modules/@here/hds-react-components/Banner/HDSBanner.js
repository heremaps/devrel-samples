// eslint-disable-next-line no-use-before-define
import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { Banner } from '@here/hds-banner';
// eslint-disable-next-line no-new
new Banner();
const HDSBanner = React.forwardRef((props, ref) => {
    const { timeout, message, state, variant, alignCenter, removable, className, open, icon, children, onClose, onChange, onTimeout, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleAction = (e) => {
        if (e.target !== innerRef.current)
            return;
        switch (e.detail.from) {
            case 'button':
                onClose && onClose(e.detail);
                break;
            case 'timeout':
                onTimeout && onTimeout(e.detail);
                break;
        }
        onChange && onChange(e);
    };
    useEffect(() => {
        if (innerRef.current) {
            if (onClose || onTimeout || onChange) {
                innerRef.current.addEventListener('change', _handleAction);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('change', _handleAction);
        };
    }, [onClose, onTimeout, onChange, innerRef]);
    return (React.createElement("hds-banner", { variant: variant, state: state, ...(className && { class: className }), timeout: timeout, ...(removable && { removable }), ...(alignCenter && { 'align-center': alignCenter }), ...(open && { open }), ...(icon && { icon }), ref: innerRef, ...rest },
        message && message,
        children && children));
});
HDSBanner.defaultProps = {
    timeout: 0,
    variant: 'default',
    alignCenter: false,
    removable: false,
    icon: false,
};
export default HDSBanner;
//# sourceMappingURL=HDSBanner.js.map