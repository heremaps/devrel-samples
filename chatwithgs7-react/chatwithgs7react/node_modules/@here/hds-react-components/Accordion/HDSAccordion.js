import React, { useEffect, useImperativeHandle } from 'react';
import { Accordion, } from '@here/hds-accordion';
// eslint-disable-next-line no-new
new Accordion();
const HDSAccordion = React.forwardRef((props, ref) => {
    const { children, disabled, variant, className, arrowPosition, expandMode, defaultExpanded, disableContentPadding, onChange, ...rest } = props;
    const innerRef = React.useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const _handleChange = (e) => {
        if (e.currentTarget !== innerRef.current)
            return;
        onChange && onChange(e.detail);
    };
    useEffect(() => {
        if (onChange && innerRef.current) {
            innerRef.current.addEventListener('change', _handleChange);
        }
        return () => innerRef.current?.removeEventListener('change', _handleChange);
    }, [onChange, innerRef]);
    return (React.createElement("hds-accordion", { variant: variant, ...(className && { class: className }), ...(disabled && { disabled }), ...(arrowPosition && { 'arrow-position': arrowPosition }), ...(expandMode && { 'expand-mode': expandMode }), ...(defaultExpanded && { 'default-expanded': defaultExpanded }), ...(disableContentPadding && { 'disable-content-padding': disableContentPadding }), ref: innerRef, ...rest }, children));
});
HDSAccordion.defaultProps = {
    variant: 'default',
    arrowPosition: 'end',
    expandMode: 'many',
    defaultExpanded: false,
    disableContentPadding: false,
    disabled: false,
};
export default HDSAccordion;
//# sourceMappingURL=HDSAccordion.js.map