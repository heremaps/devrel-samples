{"version":3,"file":"HDSChip.js","sourceRoot":"","sources":["../src/Chip/HDSChip.tsx"],"names":[],"mappings":"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","sourcesContent":["import {IconCategory} from '@here/hds-iconlibrary';\nimport React, {useEffect, useImperativeHandle, useRef} from 'react';\nimport {Chip, ChipSelectPayload, ChipSize} from '@here/hds-chip';\n\n// eslint-disable-next-line no-new\nnew Chip();\n\ninterface HDSChipProperties extends Omit<React.HTMLAttributes<HTMLElement>, 'onSelect'> {\n  size?: ChipSize;\n  disabled?: boolean;\n  selected?: boolean;\n  dragging?: boolean;\n  image?: string;\n  avatar?: string;\n  icon?: string;\n  iconCategory?: IconCategory;\n  maxWidth?: number;\n  order?: number;\n  selectable?: boolean;\n  removable?: boolean;\n  tooltip?: boolean;\n  removeButtonFocused?: boolean;\n  onRemove?: () => void;\n  onSelect?: (selected: ChipSelectPayload) => void;\n}\n\nconst HDSChip = React.forwardRef((props: HDSChipProperties, ref) => {\n  const {\n    className,\n    size,\n    disabled,\n    selected,\n    dragging,\n    image,\n    avatar,\n    icon,\n    iconCategory,\n    maxWidth,\n    order,\n    removable,\n    selectable,\n    tooltip,\n    removeButtonFocused,\n    onRemove,\n    onSelect,\n    children,\n    ...rest\n  } = props;\n  const innerRef = useRef<HTMLElement>(null);\n\n  useImperativeHandle(ref, () => innerRef.current);\n\n  const handleRemove = (e: CustomEvent) => {\n    if (e.target !== innerRef.current) return;\n    onRemove && onRemove();\n  };\n\n  const handleSelect = (e: CustomEvent<ChipSelectPayload>) => {\n    if (e.target !== innerRef.current) return;\n    onSelect && onSelect(e.detail);\n  };\n\n  useEffect(() => {\n    if (innerRef.current) {\n      if (onRemove) innerRef.current.addEventListener('remove', handleRemove as EventListener);\n    }\n    return () => {\n      innerRef.current?.removeEventListener('remove', handleRemove as EventListener);\n    };\n  }, [onRemove, innerRef]);\n\n  useEffect(() => {\n    if (innerRef.current) {\n      if (onSelect) {\n        innerRef.current.addEventListener('select', handleSelect as EventListener);\n      }\n    }\n    return () => {\n      innerRef.current?.removeEventListener('select', handleSelect as EventListener);\n    };\n  }, [onSelect, innerRef]);\n\n  return (\n    <hds-chip\n      {...(className && {class: className})}\n      size={size}\n      {...(disabled && {disabled: true})}\n      {...(selected && {selected: true})}\n      {...(dragging && {dragging: true})}\n      image={image}\n      avatar={avatar}\n      icon={icon}\n      {...(iconCategory && {'icon-category': iconCategory})}\n      {...(maxWidth && {'max-width': maxWidth})}\n      order={order}\n      {...(removable && {removable: true})}\n      {...(selectable && {selectable: true})}\n      {...(tooltip && {tooltip: true})}\n      {...(removeButtonFocused && {removeButtonFocused: true})}\n      {...rest}\n      ref={innerRef}\n    >\n      {children}\n    </hds-chip>\n  );\n});\n\nHDSChip.defaultProps = {\n  size: 'medium',\n  disabled: false,\n  selected: false,\n  dragging: false,\n  selectable: false,\n  order: 0,\n  removable: false,\n};\n\nexport default HDSChip;\n"]}