import React, { useEffect, useImperativeHandle, useRef } from 'react';
import { Chip } from '@here/hds-chip';
// eslint-disable-next-line no-new
new Chip();
const HDSChip = React.forwardRef((props, ref) => {
    const { className, size, disabled, selected, dragging, image, avatar, icon, iconCategory, maxWidth, order, removable, selectable, tooltip, removeButtonFocused, onRemove, onSelect, children, ...rest } = props;
    const innerRef = useRef(null);
    useImperativeHandle(ref, () => innerRef.current);
    const handleRemove = (e) => {
        if (e.target !== innerRef.current)
            return;
        onRemove && onRemove();
    };
    const handleSelect = (e) => {
        if (e.target !== innerRef.current)
            return;
        onSelect && onSelect(e.detail);
    };
    useEffect(() => {
        if (innerRef.current) {
            if (onRemove)
                innerRef.current.addEventListener('remove', handleRemove);
        }
        return () => {
            innerRef.current?.removeEventListener('remove', handleRemove);
        };
    }, [onRemove, innerRef]);
    useEffect(() => {
        if (innerRef.current) {
            if (onSelect) {
                innerRef.current.addEventListener('select', handleSelect);
            }
        }
        return () => {
            innerRef.current?.removeEventListener('select', handleSelect);
        };
    }, [onSelect, innerRef]);
    return (React.createElement("hds-chip", { ...(className && { class: className }), size: size, ...(disabled && { disabled: true }), ...(selected && { selected: true }), ...(dragging && { dragging: true }), image: image, avatar: avatar, icon: icon, ...(iconCategory && { 'icon-category': iconCategory }), ...(maxWidth && { 'max-width': maxWidth }), order: order, ...(removable && { removable: true }), ...(selectable && { selectable: true }), ...(tooltip && { tooltip: true }), ...(removeButtonFocused && { removeButtonFocused: true }), ...rest, ref: innerRef }, children));
});
HDSChip.defaultProps = {
    size: 'medium',
    disabled: false,
    selected: false,
    dragging: false,
    selectable: false,
    order: 0,
    removable: false,
};
export default HDSChip;
//# sourceMappingURL=HDSChip.js.map