import { LitElement, nothing, PropertyValues } from 'lit';
export declare type PaginationChangePayload = {
    page: number;
    itemsPerPage: number;
    itemsFrom: number;
    itemsTo: number;
};
export declare type PaginationPageInputType = 'input' | 'select' | 'none';
/**
 * @event {CustomEvent<{page: number, itemsPerPage: number, itemsFrom: number, itemsTo: number}>} change Event fired when page/itemsPerPage changed `PaginationChangePayload`
 */
export declare class Pagination extends LitElement {
    static styles: import("lit").CSSResultGroup;
    private _page;
    private _itemsPerPage;
    disabled: boolean;
    itemsPerPageValues: Array<Number>;
    totalItems: any;
    textBeforeItemsPerPage: any;
    textAfterItemsPerPage: any;
    textBeforePage: any;
    textAfterPage: any;
    textBeforeNav: any;
    textAfterNav: any;
    pageInputType: PaginationPageInputType;
    get page(): any;
    set page(value: any);
    get itemsPerPage(): any;
    set itemsPerPage(value: any);
    private get _totalPages();
    private get _canGoBackward();
    private get _canGoForward();
    private get _itemsFrom();
    private get _itemsTo();
    protected updated(_changedProps: PropertyValues): void;
    private _onInputForPageChange;
    private _onSelectForPageChange;
    private _onSelectForItemsPerPageChange;
    backward(): void;
    forward(): void;
    private renderOption;
    protected renderPageInput(): any;
    protected renderItemsPerPageInput(): import("lit-html").TemplateResult<1> | typeof nothing;
    private renderSeparator;
    private renderLabel;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-pagination': Pagination;
    }
}
