{"version":3,"file":"hds-grid.js","sourceRoot":"","sources":["../src/hds-grid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAW9C,MAAM,CAAC,MAAM,kBAAkB,GAAiB;IAC9C;QACE,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,GAAG;QACb,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,CAAC;KACX;IACD;QACE,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,GAAG;QACb,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,CAAC;KACX;IACD;QACE,IAAI,EAAE,eAAe;QACrB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,EAAE;KACZ;IACD;QACE,IAAI,EAAE,gBAAgB;QACtB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,EAAE;KACZ;IACD;QACE,IAAI,EAAE,eAAe;QACrB,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,EAAE;QACV,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,EAAE;KACZ;CACF,CAAC;AAEF,MAAM,OAAO,OAAO;IAGlB,MAAM,CAAC,qBAAqB,CAAC,IAAY,EAAE,EAAe;QACxD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxC,sCAAsC;YACtC,OAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC1C;QAED,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChD,IAAI,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC5C,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7E,OAAO,QAAQ,GAAG,YAAY,CAAC;SAChC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,EAAe;QAChC,MAAM,GAAG,GAAgC,EAAE,CAAC;QAC5C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;YACvC,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC1C;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAY,EAAE,EAAe;QAC7C,OAAO;YACL,IAAI;YACJ,OAAO,EAAE,QAAQ,CAAC,cAAc,CAAC,sBAAsB,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YACvE,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,wBAAwB,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1E,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,wBAAwB,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1E,SAAS,EAAE,QAAQ,CAAC,cAAc,CAAC,yBAAyB,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5E,MAAM,EAAE,QAAQ,CAAC,cAAc,CAAC,sBAAsB,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;SACvE,CAAC;IACJ,CAAC;;AAjCM,uBAAe,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC","sourcesContent":["import {getCSSVariable} from '@here/hds-base';\n\nexport interface Breakpoint {\n  name: string;\n  minWidth?: string | number;\n  maxWidth?: string | number;\n  rowGap: number | string;\n  columnGap: number | string;\n  columns: number;\n}\n\nexport const DefaultBreakpoints: Breakpoint[] = [\n  {\n    name: 'mobile',\n    maxWidth: 600,\n    rowGap: 10,\n    columnGap: 10,\n    columns: 4,\n  },\n  {\n    name: 'tablet',\n    minWidth: 601,\n    maxWidth: 1024,\n    rowGap: 10,\n    columnGap: 10,\n    columns: 6,\n  },\n  {\n    name: 'desktop-small',\n    minWidth: 1025,\n    maxWidth: 1440,\n    rowGap: 10,\n    columnGap: 10,\n    columns: 12,\n  },\n  {\n    name: 'desktop-medium',\n    minWidth: 1441,\n    maxWidth: 1680,\n    rowGap: 10,\n    columnGap: 10,\n    columns: 12,\n  },\n  {\n    name: 'desktop-large',\n    minWidth: 1681,\n    rowGap: 10,\n    columnGap: 10,\n    columns: 12,\n  },\n];\n\nexport class HDSGrid {\n  static breakpointNames = DefaultBreakpoints.map(e => e.name);\n\n  static getWidthForBreakpoint(name: string, el: HTMLElement): number | string | undefined {\n    if (!this.breakpointNames.includes(name)) {\n      // eslint-disable-next-line no-console\n      console.error('Invalid breakpoint name');\n    }\n\n    const {minWidth} = HDSGrid.breakpoint(name, el);\n    if (minWidth && typeof minWidth === 'number') {\n      const baseFontSize = parseInt(getCSSVariable('--hds-font-baseline', el), 10);\n      return minWidth * baseFontSize;\n    }\n    return minWidth;\n  }\n\n  static breakpoints(el: HTMLElement): {[key: string]: Breakpoint} {\n    const brs: {[key: string]: Breakpoint} = {};\n    for (const name of this.breakpointNames) {\n      brs[name] = HDSGrid.breakpoint(name, el);\n    }\n    return brs;\n  }\n\n  static breakpoint(name: string, el: HTMLElement): Breakpoint {\n    return {\n      name,\n      columns: parseInt(getCSSVariable(`--hds-grid-columns-${name}`, el), 10),\n      minWidth: parseInt(getCSSVariable(`--hds-grid-min-width-${name}`, el), 10),\n      maxWidth: parseInt(getCSSVariable(`--hds-grid-max-width-${name}`, el), 10),\n      columnGap: parseInt(getCSSVariable(`--hds-grid-column-gap-${name}`, el), 10),\n      rowGap: parseInt(getCSSVariable(`--hds-grid-row-gap-${name}`, el), 10),\n    };\n  }\n}\n"]}