import { BaseElement } from '@here/hds-base';
import '@here/hds-icon';
import { IconCategory } from '@here/hds-iconlibrary';
import { nothing, PropertyValues } from 'lit';
import { SwitcherSize, SwitcherVariant } from './hds-switcher.js';
export declare type SwitcherTabSelectPayload = string;
/**
 * @slot default Content
 *
 * @event {CustomEvent<string>} select Fired when the element has been selected `SwitcherTabSelectPayload`
 */
export declare class SwitcherTab extends BaseElement {
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    static styles: import("lit").CSSResultGroup;
    static switcherTabIdCounter: number;
    private _disabled;
    selected: boolean;
    icon?: string;
    iconRight?: string;
    iconCategory: IconCategory;
    iconRightCategory: IconCategory;
    switcherVariant: SwitcherVariant;
    switcherSize: SwitcherSize;
    switcherDisabled: boolean;
    isLastChild: boolean;
    isFirstChild: boolean;
    protected slotHasContent: boolean;
    protected defaultSlot: HTMLSlotElement;
    buttonElement: HTMLButtonElement;
    get disabled(): boolean;
    set disabled(value: boolean);
    focus(): void;
    blur(): void;
    click(): void;
    private _onClick;
    protected firstUpdated(): void;
    protected updated(_changedProperties: PropertyValues): void;
    protected renderIcon(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected renderIconRight(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected onSlotChange(): Promise<void>;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-switcher-tab': SwitcherTab;
    }
}
