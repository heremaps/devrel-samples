var SwitcherTab_1;
import { __decorate } from "tslib";
/* eslint max-classes-per-file: ["error", 2] */
import { BaseElement, customElement, isSlotEmpty } from '@here/hds-base';
import '@here/hds-icon';
import { html, LitElement, nothing } from 'lit';
import { property, query, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-switcher-tab.css.js';
import { Switcher } from './hds-switcher.js';
/**
 * @slot default Content
 *
 * @event {CustomEvent<string>} select Fired when the element has been selected `SwitcherTabSelectPayload`
 */
let SwitcherTab = SwitcherTab_1 = class SwitcherTab extends BaseElement {
    constructor() {
        super(...arguments);
        this._disabled = false;
        this.selected = false;
        this.iconCategory = 'core-ui';
        this.iconRightCategory = 'core-ui';
        this.switcherVariant = 'subtle';
        this.switcherSize = 'medium';
        this.switcherDisabled = false;
        this.isLastChild = false;
        this.isFirstChild = false;
        this.slotHasContent = false;
    }
    get disabled() {
        return this._disabled || this.switcherDisabled;
    }
    set disabled(value) {
        const oldValue = this._disabled;
        this._disabled = value;
        this.requestUpdate('disabled', oldValue);
    }
    focus() {
        return this.buttonElement && this.buttonElement.focus();
    }
    blur() {
        return this.buttonElement && this.buttonElement.blur();
    }
    click() {
        if (!this.disabled) {
            this.buttonElement.click();
        }
    }
    _onClick() {
        this.selected = true;
    }
    firstUpdated() {
        this.id = this.id || `hds-switcher-tab-${++SwitcherTab_1.switcherTabIdCounter}`;
        this.onSlotChange();
    }
    updated(_changedProperties) {
        const isSelectedChanged = this.selected && _changedProperties.get('selected') !== undefined;
        const isDisabledChanged = this.disabled && _changedProperties.get('disabled') !== undefined;
        if (isSelectedChanged) {
            this.dispatchEvent(new CustomEvent('select', {
                detail: this.id,
                bubbles: true,
                composed: true,
            }));
        }
        if (isDisabledChanged && this.parentNode instanceof Switcher) {
            this.parentNode.selectFirstNotDisabled();
        }
    }
    renderIcon() {
        if (this.icon) {
            return html `<hds-icon
        name="${this.icon}"
        size="16px"
        category="${this.iconCategory}"
      ></hds-icon>`;
        }
        return nothing;
    }
    renderIconRight() {
        if (this.iconRight) {
            return html `<hds-icon
        name="${this.iconRight}"
        size="16px"
        category="${this.iconRightCategory}"
      ></hds-icon>`;
        }
        return nothing;
    }
    async onSlotChange() {
        this.slotHasContent = !isSlotEmpty(this.defaultSlot);
    }
    render() {
        const classes = {
            '-hds-switcher-tab-wrapper': true,
            'slot-has-content': this.slotHasContent,
            icon: !!this.icon,
            'icon-right': !!this.iconRight,
            'last-child': this.isLastChild,
            'first-child': this.isFirstChild,
        };
        classes[`hds-switcher-tab-variant-${this.switcherVariant}`] = true;
        classes[`hds-switcher-tab-size-${this.switcherSize}`] = true;
        classes[`${this.selected ? 'selected' : 'not-selected'}`] = true;
        classes[`${this.disabled ? 'disabled' : 'not-disabled'}`] = true;
        const isAreaChecked = !this.disabled && !this.switcherDisabled && this.selected;
        return html `
      <button
        .ariaLabel="${this.ariaLabel ?? this.icon}"
        .ariaChecked="${isAreaChecked.toString()}"
        .role="${'radio'}"
        class="${classMap(classes)}"
        ?disabled="${this.disabled}"
        @click="${this._onClick}"
      >
        ${this.renderIcon()}
        <span class="content">
          <slot @slotchange="${this.onSlotChange}"></slot>
        </span>
        ${this.renderIconRight()}
      </button>
    `;
    }
};
SwitcherTab.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
SwitcherTab.styles = styles;
SwitcherTab.switcherTabIdCounter = 0;
__decorate([
    property({ type: Boolean, reflect: true })
], SwitcherTab.prototype, "selected", void 0);
__decorate([
    property({ type: String })
], SwitcherTab.prototype, "icon", void 0);
__decorate([
    property({ type: String, attribute: 'icon-right' })
], SwitcherTab.prototype, "iconRight", void 0);
__decorate([
    property({ type: String, attribute: 'icon-category' })
], SwitcherTab.prototype, "iconCategory", void 0);
__decorate([
    property({ type: String, attribute: 'icon-right-category' })
], SwitcherTab.prototype, "iconRightCategory", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "switcherVariant", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "switcherSize", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "switcherDisabled", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "isLastChild", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "isFirstChild", void 0);
__decorate([
    state()
], SwitcherTab.prototype, "slotHasContent", void 0);
__decorate([
    query('slot:not([name])')
], SwitcherTab.prototype, "defaultSlot", void 0);
__decorate([
    query('button')
], SwitcherTab.prototype, "buttonElement", void 0);
__decorate([
    property({ type: Boolean })
], SwitcherTab.prototype, "disabled", null);
SwitcherTab = SwitcherTab_1 = __decorate([
    customElement('hds-switcher-tab')
], SwitcherTab);
export { SwitcherTab };
//# sourceMappingURL=hds-switcher-tab.js.map