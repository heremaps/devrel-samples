{"version":3,"file":"hds-tab-bar.js","sourceRoot":"","sources":["../src/hds-tab-bar.ts"],"names":[],"mappings":"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","sourcesContent":["import {customElement, findElementsInSlot} from '@here/hds-base';\nimport {html, LitElement} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styles} from './hds-tab-bar.css.js';\nimport {Tab} from './hds-tab.js';\n\nexport type TabBarSelectPayload = number;\nexport type TabBarVariant = 'default' | 'wide';\n\n/**\n * @slot default Content for the list of `hds-tab` elements\n *\n * @event {CustomEvent<number>} select Fired when a tab item has been selected `TabBarSelectPayload`\n *\n */\n@customElement('hds-tab-bar')\nexport class TabBar extends LitElement {\n  static styles = styles;\n  static tabBarCounter = 0;\n  @property({type: String, attribute: true}) variant: TabBarVariant = 'default';\n  @property({type: Boolean, attribute: 'select-first-tab'}) selectFirstTab = false;\n  @property({type: String, attribute: 'aria-label'}) ariaLabel;\n  @property({type: String, attribute: 'aria-role'}) ariaRole = 'tablist';\n  previousTabIndex = '';\n  @query('slot') protected tabsSlot!: HTMLElement;\n  private tabElements: Tab[] = [];\n\n  protected firstUpdated() {\n    this.id = this.id || `hds-tab-bar-${++TabBar.tabBarCounter}`;\n    this._onSlotChange();\n    this._setDefaultSelectedTab();\n  }\n\n  protected updated() {\n    this._updateTabs();\n  }\n\n  protected render() {\n    const classes = {\n      wrapper: true,\n    };\n    classes[`hds-tab-bar--variant-${this.variant}`] = true;\n\n    return html`\n      <div\n        id=\"tabs\"\n        class=\"${classMap(classes)}\"\n        role=\"${ifDefined(this.ariaRole)}\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        @tabselect=\"${this._handleSelectedTab}\"\n      >\n        <slot @slotchange=\"${this._onSlotChange}\"></slot>\n      </div>\n    `;\n  }\n\n  private _onSlotChange() {\n    this.tabElements = findElementsInSlot<Tab>(this.tabsSlot as HTMLSlotElement, Tab);\n    this._setDefaultSelectedTab();\n    this._updateTabs();\n  }\n\n  private _updateTabs() {\n    for (let i = 0; i < this.tabElements.length; i += 1) {\n      this.tabElements[i].variant = this.variant;\n    }\n  }\n\n  private _setDefaultSelectedTab() {\n    if (this.tabElements.length === 0) {\n      return;\n    }\n    if (this._activateFirstSelectedTab()) {\n      return;\n    }\n    if (this.selectFirstTab) {\n      this.tabElements[0].selected = true;\n    }\n  }\n\n  private _activateFirstSelectedTab() {\n    const selectedTabs = this.tabElements.filter(tab => tab.selected);\n    if (selectedTabs.length === 0) {\n      return false;\n    }\n    this._clearActiveTab();\n    selectedTabs[0].selected = true;\n    return true;\n  }\n\n  private async _handleSelectedTab(evt: CustomEvent<string>) {\n    evt.stopPropagation();\n    const {detail: tabId} = evt;\n    const currentSelectedTab = this._getSelectedTab();\n    const newSelectedTabIndex = this._getTabIndex(tabId);\n    const newSelectedTab = this.tabElements.find(tab => tab.id === tabId);\n\n    if (currentSelectedTab?.clickActionValue || newSelectedTab?.clickActionValue) {\n      this._handleClickShowMenu(newSelectedTab as Tab);\n    }\n\n    if (newSelectedTabIndex !== -1) {\n      this._clearActiveTab();\n      this._setSelectedTab(tabId);\n\n      if (currentSelectedTab?.id !== tabId) {\n        await this.updateComplete;\n        this.dispatchEvent(\n          new CustomEvent<TabBarSelectPayload>('select', {detail: newSelectedTabIndex})\n        );\n      }\n    }\n  }\n\n  private _handleClickShowMenu(newSelectedTab: Tab): void {\n    if (newSelectedTab?.id === this.previousTabIndex) {\n      newSelectedTab.showSelectedTabMenu(false);\n      this.previousTabIndex = '';\n    } else {\n      this.tabElements.forEach((tab: Tab) =>\n        tab.showSelectedTabMenu(tab === newSelectedTab && tab.clickActionValue)\n      );\n      this.previousTabIndex = newSelectedTab?.id as string;\n    }\n  }\n\n  private _getTabIndex(tabId: string) {\n    return this.tabElements.findIndex(tab => tab.id === tabId);\n  }\n\n  private _getSelectedTab() {\n    return this.tabElements.find(tab => tab.selected);\n  }\n\n  private _clearActiveTab() {\n    for (const tab of this.tabElements) {\n      tab.selected = false;\n    }\n  }\n\n  private _setSelectedTab(tabId: string) {\n    for (const tab of this.tabElements) {\n      if (tab.id === tabId) {\n        tab.selected = true;\n        return;\n      }\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hds-tab-bar': TabBar;\n  }\n}\n"]}