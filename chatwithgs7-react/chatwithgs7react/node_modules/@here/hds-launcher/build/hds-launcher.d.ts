import '@here/hds-button';
import { Panel } from '@here/hds-panel';
import { PropertyValues } from 'lit';
export declare type LauncherVariant = 'subtle' | 'solid';
export declare type LauncherChangePayload = {
    expanded: boolean;
};
/**
 * @slot title Content for the title in the header section
 * @slot subtitle Content for the subtitle in the header section
 * @slot main Content for the body of the launcher
 * @slot footer Content for the footer section
 *
 * @event {CustomEvent<{expanded: boolean}>} change Fired when element changes the state: expanded/collapsed `LauncherChangePayload`
 */
export declare class Launcher extends Panel {
    static styles: import("lit").CSSResultGroup;
    launcherExpanded: boolean;
    launcherVariant: LauncherVariant;
    launcherWrapper: HTMLElement;
    protected hideFooterDivider: boolean;
    protected hasSubTitle: boolean;
    protected slotFooterEl: HTMLSlotElement;
    protected slotSubtitleEl: HTMLSlotElement;
    firstUpdated(): void;
    show(): void;
    hide(): void;
    toggle(): void;
    protected updated(changedProperties: PropertyValues): Promise<void>;
    protected render(): import("lit-html").TemplateResult<1>;
    private _handleKeydown;
    private _renderLauncher;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-launcher': Launcher;
    }
}
