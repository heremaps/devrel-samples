import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-button';
import { Panel } from '@here/hds-panel';
import { html } from 'lit';
import { property, query, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-launcher.css.js';
/**
 * @slot title Content for the title in the header section
 * @slot subtitle Content for the subtitle in the header section
 * @slot main Content for the body of the launcher
 * @slot footer Content for the footer section
 *
 * @event {CustomEvent<{expanded: boolean}>} change Fired when element changes the state: expanded/collapsed `LauncherChangePayload`
 */
let Launcher = class Launcher extends Panel {
    constructor() {
        super(...arguments);
        this.launcherExpanded = false;
        this.launcherVariant = 'subtle';
        this.hideFooterDivider = false;
        this.hasSubTitle = true;
        // close launcher on escape key press
        this._handleKeydown = (e) => {
            if (e.key === 'Escape') {
                this.hide();
            }
        };
    }
    firstUpdated() {
        super.firstUpdated();
        const slotFooterContent = this.slotFooterEl.assignedNodes({ flatten: true }) || [];
        this.hideFooterDivider = !(slotFooterContent.length > 0);
        const slotSubtitleContent = this.slotSubtitleEl.assignedNodes({ flatten: true }) || [];
        this.hasSubTitle = slotSubtitleContent.length > 0;
    }
    show() {
        this.launcherExpanded = true;
    }
    hide() {
        this.launcherExpanded = false;
    }
    toggle() {
        this.launcherExpanded = !this.launcherExpanded;
        this.requestUpdate();
    }
    async updated(changedProperties) {
        if (changedProperties.has('launcherExpanded')) {
            if (!changedProperties.get('launcherExpanded')) {
                this.launcherWrapper.focus();
            }
            this.dispatchEvent(new CustomEvent('change', {
                detail: { expanded: this.launcherExpanded },
                bubbles: true,
            }));
        }
    }
    render() {
        return super.renderPanel(this._renderLauncher());
    }
    _renderLauncher() {
        const classes = {
            expanded: this.launcherExpanded,
            'hide-footer-divider': this.hideFooterDivider,
            'has-subtitle': this.hasSubTitle,
        };
        classes[`hds-launcher-${this.launcherVariant}`] = true;
        return html `
      <div
        class="-hds-launcher-wrapper ${classMap(classes)}"
        tabindex="0"
        @keydown="${this._handleKeydown}"
      >
        <div class="hds-launcher--header">
          <hds-button
            variant="secondary"
            class="close-btn"
            icon="cross"
            size="small"
            role="button"
            aria-label="Close"
            @click="${this.hide}"
          ></hds-button>
          <div class="hds-launcher--title">
            <slot name="title"></slot>
          </div>
          <div class="hds-launcher--sub-title">
            <slot name="subtitle"></slot>
          </div>
        </div>
        <div class="hds-launcher--content">
          <div class="hds-launcher--main">
            <slot name="main"></slot>
          </div>
          <div class="hds-launcher--footer">
            <hr />
            <slot name="footer"></slot>
          </div>
        </div>
      </div>
    `;
    }
};
Launcher.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'expanded' })
], Launcher.prototype, "launcherExpanded", void 0);
__decorate([
    property({ type: String, attribute: 'variant' })
], Launcher.prototype, "launcherVariant", void 0);
__decorate([
    query('.-hds-launcher-wrapper')
], Launcher.prototype, "launcherWrapper", void 0);
__decorate([
    state()
], Launcher.prototype, "hideFooterDivider", void 0);
__decorate([
    state()
], Launcher.prototype, "hasSubTitle", void 0);
__decorate([
    query('slot[name=footer]')
], Launcher.prototype, "slotFooterEl", void 0);
__decorate([
    query('slot[name=subtitle]')
], Launcher.prototype, "slotSubtitleEl", void 0);
Launcher = __decorate([
    customElement('hds-launcher')
], Launcher);
export { Launcher };
//# sourceMappingURL=hds-launcher.js.map