import { IconStyle } from '@here/hds-icon';
import { IconCategory } from '@here/hds-iconlibrary';
import '@here/hds-input';
import '@here/hds-label';
import { LitElement, nothing } from 'lit';
export declare type SliderChangePayload = {
    value: number;
    value2?: number;
};
export declare type SliderType = 'default' | 'range';
export declare type SliderSize = 'medium' | 'large';
export declare type SliderStepType = 'none' | 'dots' | 'ticks';
/**
 *
 * @event {CustomEvent<{value: number, value2?: number}>} change Fired when the value(s) of the slider changes `SliderChangePayload`
 *
 */
export declare class Slider extends LitElement {
    static styles: import("lit").CSSResultGroup;
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    disabled: boolean;
    min: number;
    max: number;
    step: number;
    type: SliderType;
    size: SliderSize;
    textStart: string;
    textEnd: string;
    trackFillStart: number | undefined;
    noTrackFill: boolean;
    trackColors: string[];
    trackColorsLengths: string[];
    stepType: SliderStepType;
    stepValues: number[];
    stepLabels: string[];
    iconStart: string;
    iconStartStyle: IconStyle;
    iconStartCategory: IconCategory;
    iconEnd: string;
    iconEndStyle: IconStyle;
    iconEndCategory: IconCategory;
    thumb1Element: HTMLDivElement;
    thumb2Element: HTMLDivElement;
    sliderElement: HTMLDivElement;
    value: number;
    value2: number;
    private _lastActiveThumb;
    private _thumbInDragging;
    private _thumbDraggingStartX;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected updated(_changedProperties: any): void;
    private _updateDom;
    private _onSliderMouseDown;
    private _onDocumentMouseMove;
    private _onDocumentMouseUp;
    protected renderThumb1(): import("lit-html").TemplateResult<1>;
    protected renderThumb2(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected onKeyDown(e: KeyboardEvent): void;
    protected renderStep(value: number, label?: string): import("lit-html").TemplateResult<1>;
    protected renderAllSteps(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected formatTemplateString(str: string): string;
    protected renderTextStart(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderTextEnd(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderIconStart(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderIconEnd(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-slider': Slider;
    }
}
