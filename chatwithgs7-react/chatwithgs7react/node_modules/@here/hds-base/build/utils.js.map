{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Rounds a number to the nearest of a specified value.\n *\n * @param {number} x - The number to be rounded.\n * @param {number} [nearest=0.0] - The nearest value to round to. Defaults to 0.0 if not provided.\n * @returns {number} The number rounded to the nearest specified value.\n */\nexport function roundToNearest(x: number, nearest: number = 0.0) {\n  return nearest === 0 ? x : Math.round(x / nearest) * nearest;\n}\n\n/**\n * Scales a number from one range to another.\n *\n * @param {number} x - The number to be scaled.\n * @param {number} xMin - The minimum value of the original range.\n * @param {number} xMax - The maximum value of the original range.\n * @param {number} [xNewMin=0] - The minimum value of the new range (default is 0).\n * @param {number} [xNewMax=1] - The maximum value of the new range (default is 1).\n * @returns {number} - The scaled number.\n */\nexport function scale(\n  x: number,\n  xMin: number,\n  xMax: number,\n  xNewMin: number = 0,\n  xNewMax: number = 1\n) {\n  return (xNewMax - xNewMin) * ((x - xMin) / (xMax - xMin)) + xNewMin;\n}\n\n/**\n * Clamp function that check that a number `x` in between the bounds `[min, max]`\n *\n * @param x - Number to check\n * @param min - Minimum bound\n * @param max - Maximum bound\n * @return `min` if `x <= min`, `x` if `min < x < max`, `max` if `x >= max`\n */\nexport function clamp(x: number, min: number, max: number) {\n  if (Number.isNaN(x)) return NaN;\n  return Math.min(Math.max(x, min), max);\n}\n\n/**\n * Simple debounce function, so it is called once every given time.\n * Useful to use with events like resize, mousemove, etc.\n *\n * @template T extends unknown[] - Type of functions\n * @template U - callback function\n * @param callback - callback function to be debounced\n * @param wait - wait number in milliseconds\n * @returns the debounced function\n */\nexport function debounce<T extends unknown[], U>(\n  callback: (...args: T) => PromiseLike<U> | U,\n  wait: number\n) {\n  let timer: ReturnType<typeof setTimeout>;\n\n  return (...args: T): Promise<U> => {\n    clearTimeout(timer);\n    return new Promise(resolve => {\n      timer = setTimeout(() => resolve(callback(...args)), wait);\n    });\n  };\n}\n\n/**\n * Simple throttle function that limits the execution of a function to once in every specified time interval.\n *\n * @template T extends unknown[] - Type of functions\n * @template U - callback function\n * @param callback - callback function to be throttled\n * @param wait - wait number in milliseconds\n * @returns the throttled function\n */\nexport function throttle<T extends unknown[], U>(\n  callback: (...args: T) => PromiseLike<U> | U,\n  wait: number\n) {\n  let lastTime: number = 0;\n  let timer: ReturnType<typeof setTimeout>;\n\n  return (...args: T): Promise<U> =>\n    new Promise(resolve => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        if (Date.now() - lastTime >= wait) {\n          resolve(callback(...args));\n          lastTime = Date.now();\n        }\n      }, Math.max(0, wait - (Date.now() - lastTime)));\n    });\n}\n\n/**\n * Find the closest element with a given selector up to dom from the base element\n *\n * @param selector - selector for element to be found\n * @param base - the element from which the search starts\n * @returns first element found by selector or null if not found\n */\nexport function closestElement<T extends Element>(selector: string, base: Element): T | null {\n  function findClosest(el: Element | Window | Document): Element | null {\n    if (!el || el === document || el === window) {\n      return null;\n    }\n    const found = (el as Element).closest(selector);\n    return found || findClosest(((el as Element).getRootNode() as ShadowRoot).host);\n  }\n\n  return findClosest(base) as T;\n}\n\n/**\n * Get the value of a CSS Variable for a given HTML Element.\n * If not HTML Element is passed it will take the first element with\n * the attribute `[data-theme^=hds]`\n *\n * @param name - name of the CSS variable\n * @param el - HTMLElement to get the CSS variable from, fallback to first `[data-theme]` element if `undefined`\n * @returns The value of the CSS Variable\n */\nexport function getCSSVariable(name: string, el?: HTMLElement) {\n  const htmlElement = el || document.querySelector('[data-theme^=hds]');\n  return getComputedStyle(htmlElement)?.getPropertyValue(name).trim();\n}\n\n/**\n * Returns if a given slot or and array of nodes are empty\n *\n * @param slotOrNodes - Slot element or array of nodes to be inspected\n * @returns `true` if slot is empty or `false` if contains any kind of nodes\n */\nexport function isSlotEmpty(slotOrNodes: HTMLSlotElement | Array<Node> | undefined | null) {\n  let isEmpty = true;\n\n  if (slotOrNodes) {\n    const nodes: Array<Node> =\n      slotOrNodes instanceof HTMLSlotElement\n        ? slotOrNodes.assignedNodes({flatten: true})\n        : slotOrNodes;\n\n    for (let n = 0; n < nodes.length; n += 1) {\n      const isWebComponent =\n        nodes[n] instanceof HTMLElement && (nodes[n] as HTMLElement).tagName.indexOf('-') !== -1;\n      const hasAnyContent = nodes[n].textContent.trim() !== '';\n\n      if (hasAnyContent || isWebComponent) {\n        isEmpty = false;\n        break;\n      }\n    }\n  }\n\n  return isEmpty;\n}\n\n/**\n * Decorator to define the class in the browser's custom elements registry for a given element tag name.\n * It checks if the tag already exists. If it does it behaves depending on the configuration parameters.\n *\n * @param tagName - name of the tag for the element class\n * @returns The decorated class\n */\nexport const customElement = (tagName: string) => (ctor: CustomElementConstructor) => {\n  if (typeof window !== 'undefined') {\n    const settings = window.hds || {};\n    const disableAutoCustomElementsDefine = !!settings.disableAutoCustomElementsDefine;\n\n    if (!disableAutoCustomElementsDefine) {\n      const tryGetBeforeCustomElementsDefine = !!settings.tryGetBeforeCustomElementsDefine;\n\n      if (\n        !tryGetBeforeCustomElementsDefine ||\n        (tryGetBeforeCustomElementsDefine && !window.customElements.get(tagName))\n      ) {\n        window.customElements.define(tagName, ctor);\n      }\n    }\n  }\n};\n\n/**\n * Format string template by passed arguments\n *\n * @param template - original string template\n * @param args - arguments for replacement\n * @param keepNotMatched - if true will keep all unresolved params\n * @example stringFormat('hello {0}', {0: 'world'}) => 'hello world'\n * @example stringFormat('hello {name}', {name: 'Dmytro'}) => 'hello Dmytro'\n * @example stringFormat('hello {world} {name}', {name: 'Dmytro'}, true) => 'hello {world} Dmytro'\n * @returns - formatted string\n */\nexport const stringFormat = (\n  template: string,\n  args: {[key: string | number]: any},\n  keepNotMatched: boolean = false\n) => {\n  if (template) {\n    const argsKeysArray = Object.keys(args);\n    const replacer = (_: any, match: any) => {\n      let valueByName = args[match];\n      let valueByIndex = args[argsKeysArray[match]];\n      valueByName = typeof valueByName === 'number' ? valueByName.toString() : valueByName;\n      valueByIndex = typeof valueByIndex === 'number' ? valueByIndex.toString() : valueByIndex;\n      const originalValue = keepNotMatched ? `{${match}}` : '';\n      const formatted = valueByName || valueByIndex || originalValue;\n      return formatted;\n    };\n    return template.replace(/{([a-zA-Z0-9]+)}/g, replacer);\n  }\n  return template;\n};\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * Find the HTML elements of a given type recursively inside a slot\n *\n * @param slot - Slot to find the element\n * @param filterType - Class of the element to Find\n * @example findElementsInSlot(this.shadowRoot!.querySelector('slot'), ListItem)\n * @returns - Array with elements of the given type\n */\nexport function findElementsInSlot<T extends HTMLElement>(\n  slot: HTMLSlotElement,\n  filterType: Constructor<T>\n): T[] {\n  const results: T[] = [];\n  if (!slot) return results;\n\n  const elements = slot.assignedElements({flatten: true});\n  elements.forEach(node => {\n    if (node instanceof filterType) results.push(node);\n    results.push(\n      ...(Array.from(node.querySelectorAll('*')).filter(e => e instanceof filterType) as T[])\n    );\n  });\n  return results;\n}\n"]}