/**
 * Rounds a number to the nearest of a specified value.
 *
 * @param {number} x - The number to be rounded.
 * @param {number} [nearest=0.0] - The nearest value to round to. Defaults to 0.0 if not provided.
 * @returns {number} The number rounded to the nearest specified value.
 */
export declare function roundToNearest(x: number, nearest?: number): number;
/**
 * Scales a number from one range to another.
 *
 * @param {number} x - The number to be scaled.
 * @param {number} xMin - The minimum value of the original range.
 * @param {number} xMax - The maximum value of the original range.
 * @param {number} [xNewMin=0] - The minimum value of the new range (default is 0).
 * @param {number} [xNewMax=1] - The maximum value of the new range (default is 1).
 * @returns {number} - The scaled number.
 */
export declare function scale(x: number, xMin: number, xMax: number, xNewMin?: number, xNewMax?: number): number;
/**
 * Clamp function that check that a number `x` in between the bounds `[min, max]`
 *
 * @param x - Number to check
 * @param min - Minimum bound
 * @param max - Maximum bound
 * @return `min` if `x <= min`, `x` if `min < x < max`, `max` if `x >= max`
 */
export declare function clamp(x: number, min: number, max: number): number;
/**
 * Simple debounce function, so it is called once every given time.
 * Useful to use with events like resize, mousemove, etc.
 *
 * @template T extends unknown[] - Type of functions
 * @template U - callback function
 * @param callback - callback function to be debounced
 * @param wait - wait number in milliseconds
 * @returns the debounced function
 */
export declare function debounce<T extends unknown[], U>(callback: (...args: T) => PromiseLike<U> | U, wait: number): (...args: T) => Promise<U>;
/**
 * Simple throttle function that limits the execution of a function to once in every specified time interval.
 *
 * @template T extends unknown[] - Type of functions
 * @template U - callback function
 * @param callback - callback function to be throttled
 * @param wait - wait number in milliseconds
 * @returns the throttled function
 */
export declare function throttle<T extends unknown[], U>(callback: (...args: T) => PromiseLike<U> | U, wait: number): (...args: T) => Promise<U>;
/**
 * Find the closest element with a given selector up to dom from the base element
 *
 * @param selector - selector for element to be found
 * @param base - the element from which the search starts
 * @returns first element found by selector or null if not found
 */
export declare function closestElement<T extends Element>(selector: string, base: Element): T | null;
/**
 * Get the value of a CSS Variable for a given HTML Element.
 * If not HTML Element is passed it will take the first element with
 * the attribute `[data-theme^=hds]`
 *
 * @param name - name of the CSS variable
 * @param el - HTMLElement to get the CSS variable from, fallback to first `[data-theme]` element if `undefined`
 * @returns The value of the CSS Variable
 */
export declare function getCSSVariable(name: string, el?: HTMLElement): string;
/**
 * Returns if a given slot or and array of nodes are empty
 *
 * @param slotOrNodes - Slot element or array of nodes to be inspected
 * @returns `true` if slot is empty or `false` if contains any kind of nodes
 */
export declare function isSlotEmpty(slotOrNodes: HTMLSlotElement | Array<Node> | undefined | null): boolean;
/**
 * Decorator to define the class in the browser's custom elements registry for a given element tag name.
 * It checks if the tag already exists. If it does it behaves depending on the configuration parameters.
 *
 * @param tagName - name of the tag for the element class
 * @returns The decorated class
 */
export declare const customElement: (tagName: string) => (ctor: CustomElementConstructor) => void;
/**
 * Format string template by passed arguments
 *
 * @param template - original string template
 * @param args - arguments for replacement
 * @param keepNotMatched - if true will keep all unresolved params
 * @example stringFormat('hello {0}', {0: 'world'}) => 'hello world'
 * @example stringFormat('hello {name}', {name: 'Dmytro'}) => 'hello Dmytro'
 * @example stringFormat('hello {world} {name}', {name: 'Dmytro'}, true) => 'hello {world} Dmytro'
 * @returns - formatted string
 */
export declare const stringFormat: (template: string, args: {
    [key: string]: any;
    [key: number]: any;
}, keepNotMatched?: boolean) => string;
declare type Constructor<T> = new (...args: any[]) => T;
/**
 * Find the HTML elements of a given type recursively inside a slot
 *
 * @param slot - Slot to find the element
 * @param filterType - Class of the element to Find
 * @example findElementsInSlot(this.shadowRoot!.querySelector('slot'), ListItem)
 * @returns - Array with elements of the given type
 */
export declare function findElementsInSlot<T extends HTMLElement>(slot: HTMLSlotElement, filterType: Constructor<T>): T[];
export {};
