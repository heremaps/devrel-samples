import { BaseElement } from '@here/hds-base';
import '@here/hds-label';
import { nothing, PropertyValues } from 'lit';
export declare type TextareaStyleResize = 'none' | 'both' | 'horizontal' | 'vertical';
export declare type TextareaInputPayload = {
    value: string;
};
export declare type TextareaChangePayload = {
    value: string;
};
/**
 *
 * @event {CustomEvent<{value: string}>} input Fired when the value of the element has changed `TextareaInputPayload`
 * @event {CustomEvent<{value: string}>} change Fired when an alteration to the element's value is committed by the user `TextChangePayload`
 * @event {CustomEvent<Textarea>} focus Fired when the element has focus
 * @event {CustomEvent<Textarea>} blur Fired when the element loses focus
 * @event {KeyboardEvent} keydown Fired when a key is pressed
 * @event {KeyboardEvent} keyup Fired when a key is released
 *
 */
export declare class Textarea extends BaseElement {
    static styles: import("lit").CSSResultGroup;
    static idCounter: number;
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    static formAssociated: boolean;
    isTabbable: boolean;
    name: string;
    placeholder?: any;
    label?: any;
    secondaryLabel?: any;
    rows: number;
    cols: number;
    disabled: boolean;
    readonly: boolean;
    required: boolean;
    autofocus: boolean;
    minlength: number;
    maxlength: number;
    charCounter: boolean;
    error: boolean;
    errorText?: any;
    ariaLabelledBy?: any;
    resize: TextareaStyleResize;
    autocomplete: string;
    textareaElement: HTMLTextAreaElement;
    private _labelId;
    private _value;
    protected get charCounterVisible(): boolean;
    protected get errorTextVisible(): boolean;
    connectedCallback(): void;
    protected firstUpdated(): void;
    protected updated(_changedProps: PropertyValues): void;
    get value(): string;
    set value(val: string);
    setSelectionRange(start: number, end: number, direction?: 'forward' | 'backward' | 'none'): void;
    setRangeText(replacement: string, start?: number, end?: number, selectionMode?: SelectionMode): void;
    checkValidity(): boolean;
    reportValidity(): boolean;
    select(): void;
    setCustomValidity(error: string): void;
    focus(): void;
    blur(): void;
    clear(): Promise<void>;
    private _nativeFocus;
    private _nativeBlur;
    protected renderCharCounter(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderSecondaryLabel(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderLabels(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderHelperText(): import("lit-html").TemplateResult<1> | undefined;
    protected render(): import("lit-html").TemplateResult<1>;
    protected getAriaLabelledBy(): any;
    private _nativeInput;
    private _nativeChange;
    private _nativeKeyPress;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-textarea': Textarea;
    }
}
