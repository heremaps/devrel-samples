import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { Modal } from '@here/hds-modal';
import '@here/hds-overlay';
import { html } from 'lit';
import { styles } from './hds-confirm.css.js';
/**
 * Confirm class.
 *
 * @event {CustomEvent<{from: 'button' | 'overlay' | 'escape'}>} change Fired when the modal is closed and from where has been closed: button / overlay / escape `ModalChangePayload`
 *
 * @slot header Content placed in the header of the Dialog.
 * @slot body Content placed in the body of the Dialog.
 * @slot footer  Content placed in the footer of the Dialog.
 */
let Confirm = class Confirm extends Modal {
    static get styles() {
        return [super.styles, styles];
    }
    async updated() {
        super.setTabbableElements();
        await super.changeDefaultButtonSize('tablet');
    }
    render() {
        return html `
      <div class="-hds-modal-wrapper hds-grid-container">
        <div class="wrapper" role="dialog" aria-modal="true" aria-describedby="content">
          <div class="content-wrapper">
            ${this.renderHeader()}
            <div
              class="body"
              id="content"
              @scroll="${() => this.dispatchEvent(new CustomEvent('scroll', { composed: true, bubbles: true }))}"
            >
              <slot name="body"></slot>
              <slot>
                <div class="message">${this.message}</div>
              </slot>
            </div>
            ${this.renderFooter()} ${this.renderCloseButton()}
          </div>
        </div>
        <hds-overlay @click="${this.handleClickOverlay}"></hds-overlay>
      </div>
    `;
    }
};
Confirm = __decorate([
    customElement('hds-confirm')
], Confirm);
export { Confirm };
//# sourceMappingURL=hds-confirm.js.map