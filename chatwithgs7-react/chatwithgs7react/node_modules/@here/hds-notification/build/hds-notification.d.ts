import { LitElement, nothing, PropertyValues } from 'lit';
export declare type NotificationChangePayload = {
    open: boolean;
};
export declare type NotificationActionPayload = {
    action: string;
};
export declare type NotificationStatus = 'default' | 'positive' | 'warning' | 'error' | 'inverse';
export declare type NotificationVariant = 'solid' | 'subtle';
export declare type NotificationSize = 'medium' | 'small' | 'extra-small';
/**
 *
 * @slot default - Main content for the notification
 * @slot action - Custom action(s)
 *
 * @event {CustomEvent<{open: boolean}>} change Fired when the notification changes the state: open / close `NotificationChangePayload`
 * @event {CustomEvent<{action: string}>} action Fired when the action has been clicked
 */
export declare class Notification extends LitElement {
    static styles: import("lit").CSSResultGroup;
    private static ICON_NAME_BY_STATUS;
    open: boolean;
    variant: NotificationVariant;
    status: NotificationStatus;
    headline: string;
    size: NotificationSize;
    timeout: number;
    hideIcon: boolean;
    keepNode: boolean;
    inline: boolean;
    hideClose: boolean;
    closeAriaLabel: string;
    protected isDefaultSlotNotEmpty: boolean;
    protected isActionSlotNotEmpty: boolean;
    private _timeoutId;
    private get type();
    disconnectedCallback(): void;
    close(): void;
    protected updated(changedProperties: PropertyValues): void;
    protected renderClose(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected onActionSlotChange(e: {
        target: HTMLSlotElement;
    }): Promise<void>;
    protected onDefaultSlotChange(e: {
        target: HTMLSlotElement;
    }): Promise<void>;
    protected onActionClick(e: any): Promise<void>;
    protected renderActions(): import("lit-html").TemplateResult<1>;
    protected renderIcon(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected render(): import("lit-html").TemplateResult<1>;
    private clearTimeout;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-notification': Notification;
    }
}
