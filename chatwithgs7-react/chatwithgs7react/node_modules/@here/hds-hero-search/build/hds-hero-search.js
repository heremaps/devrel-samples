import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-icon';
import { Input } from '@here/hds-input';
import { html, nothing } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-hero-search.css.js';
let HeroSearch = class HeroSearch extends Input {
    firstUpdated() {
        this.type = 'text';
    }
    renderSearchIcon() {
        if (this === this.ownerDocument.activeElement || this.value) {
            return nothing;
        }
        return html ` <hds-icon
      class="search-icon"
      name="search"
      icon-style="solid"
      size="16px"
    ></hds-icon>`;
    }
    renderClearIcon() {
        if (this.value === '' || this.value == null || !this.value || this.disabled) {
            return nothing;
        }
        return html ` <hds-icon
      name="clear"
      class="clear-action-icon"
      @click="${super.clear}"
    ></hds-icon>`;
    }
    renderRightActionTray() {
        if (this.value || this.disabled) {
            return nothing;
        }
        return super.renderSlotRight();
    }
    render() {
        const classes = {
            disabled: this.disabled,
        };
        return html `
      <div class="wrapper">
        <div class="input-wrapper ${classMap(classes)}">
          ${this.renderSearchIcon()} ${super.renderInput()} ${this.renderClearIcon()}
          ${this.renderRightActionTray()}
        </div>
      </div>
    `;
    }
};
HeroSearch.styles = [Input.styles, styles];
HeroSearch = __decorate([
    customElement('hds-hero-search')
], HeroSearch);
export { HeroSearch };
//# sourceMappingURL=hds-hero-search.js.map