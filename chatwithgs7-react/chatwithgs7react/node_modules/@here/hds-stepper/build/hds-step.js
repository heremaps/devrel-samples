import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-icon';
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-step.css.js';
/**
 *
 * @event {CustomEvent<{currentState: StepState, previousState: StepState, stepIndex: number}>} state Fired when the step state has changed `StepStatePayload`
 * @event {CustomEvent<{stepIndex: number}>} activate-step-internal (**Internal use**) Fired when the step is active `StepActivateStepInternal`
 * @event {CustomEvent<{currentState: StepState, previousState: StepState, stepIndex: number}>} step-state **Deprecated event:** Use event `state`. `StepStatePayload`
 *
 */
let Step = class Step extends LitElement {
    constructor() {
        super(...arguments);
        this.label = '';
        this.hideLabel = false;
        this.nonLinear = false;
        this.bottomLabel = false;
        this.orientation = 'horizontal';
        this.optional = false;
        this.index = 0;
        this.state = 'disabled';
        this.isTabbable = true;
    }
    _handleClick(e) {
        if (!this.nonLinear) {
            e.stopPropagation();
            e.preventDefault();
            return;
        }
        this.dispatchEvent(new CustomEvent('activate-step-internal', {
            detail: {
                stepIndex: this.index,
            },
            bubbles: true,
        }));
    }
    getStepConnector() {
        if (this.index !== 0 && this.orientation === 'horizontal' && this.bottomLabel) {
            return html ` <hds-step-connector
        orientation="${this.orientation}"
        .bottomLabel="${this.bottomLabel}"
      ></hds-step-connector>`;
        }
        return nothing;
    }
    async updated(_changedProperties) {
        super.updated(_changedProperties);
        if (_changedProperties.has('state')) {
            this.dispatchEvent(new CustomEvent('state', {
                detail: {
                    currentState: this.state,
                    previousState: _changedProperties.get('state'),
                    stepIndex: this.index,
                },
                bubbles: true,
                composed: true,
            }));
            // TODO: Deprecate step-state event
            this.dispatchEvent(new CustomEvent('step-state', {
                detail: {
                    currentState: this.state,
                    previousState: _changedProperties.get('state'),
                    stepIndex: this.index,
                },
                bubbles: true,
                composed: true,
            }));
        }
    }
    render() {
        const buttonClasses = {
            [`hds-step-button--state-${this.state}`]: true,
            'hds-step-button--non-linear-interaction': this.nonLinear,
        };
        const stepClasses = {
            'hds-step--label-bottom': this.orientation === 'horizontal' && this.bottomLabel,
            [`hds-step--orientation-${this.orientation}`]: true,
        };
        const _index = this.index + 1;
        const _hasNumberedNode = this.state !== 'error' && this.state !== 'completed';
        return html `
      <div
        class="hds-step-wrapper ${classMap(stepClasses)}"
        aria-current="${this.state === 'active' ? 'step' : 'false'}"
        aria-disabled="${!this.nonLinear}"
      >
        ${this.getStepConnector()}
        <button
          class="hds-step-button ${classMap(buttonClasses)}"
          ?disabled="${!this.nonLinear}"
          @click="${e => this._handleClick(e)}"
        >
          <span class="hds-step-button-label-container">
            <div class="hds-step-button-node-container">
              <div class="hds-step-button-node-inner-container">
                ${(_hasNumberedNode &&
            html `<span class="hds-step-button-node-number">${_index}</span>`) ||
            nothing}
                ${(this.state === 'completed' &&
            html ` <hds-icon name="checkmark" icon-style="solid" size="24px"></hds-icon>`) ||
            nothing}
                ${(this.state === 'error' &&
            html ` <hds-icon name="cross" icon-style="solid" size="24px"></hds-icon>`) ||
            nothing}
              </div>
            </div>
            ${(!this.hideLabel &&
            html `<span class="hds-step-button-label-text-container">
                <span class="hds-step-button-label-text-primary">${this.label}</span>
                ${(this.optional &&
                this.state !== 'error' &&
                html `<span class="hds-step-button-label-text-secondary">Optional</span>`) ||
                nothing}
                ${(this.state === 'error' &&
                html `<span class="hds-step-button-label-text-secondary">Error</span>`) ||
                nothing}
              </span>`) ||
            nothing}
          </span>
        </button>
      </div>
    `;
    }
};
Step.styles = styles;
__decorate([
    property({ type: String })
], Step.prototype, "label", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], Step.prototype, "hideLabel", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], Step.prototype, "nonLinear", void 0);
__decorate([
    property({ type: Boolean, attribute: false, reflect: true })
], Step.prototype, "bottomLabel", void 0);
__decorate([
    property({ type: String, attribute: false, reflect: true })
], Step.prototype, "orientation", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Step.prototype, "optional", void 0);
__decorate([
    property({ type: Number, attribute: false, reflect: true })
], Step.prototype, "index", void 0);
__decorate([
    property({ type: String, attribute: false, reflect: true })
], Step.prototype, "state", void 0);
Step = __decorate([
    customElement('hds-step')
], Step);
export { Step };
//# sourceMappingURL=hds-step.js.map