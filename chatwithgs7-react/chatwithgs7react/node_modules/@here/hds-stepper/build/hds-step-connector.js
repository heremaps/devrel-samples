import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-step-connector.css.js';
/**
 * @summary Element to be used internally by the `hds-stepper`
 */
let StepConnector = class StepConnector extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.active = false;
        this.completed = false;
        this.bottomLabel = false;
        this.orientation = 'horizontal';
        this.index = 0;
    }
    render() {
        const classes = {
            'hds-step--label-bottom': this.orientation === 'horizontal' && this.bottomLabel,
            [`hds-step--orientation-${this.orientation}`]: true,
        };
        return html ` <div class="hds-step-connector-wrapper ${classMap(classes)}">
      <span class="hds-step-connector"></span>
    </div>`;
    }
};
StepConnector.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true })
], StepConnector.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], StepConnector.prototype, "active", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], StepConnector.prototype, "completed", void 0);
__decorate([
    property({ type: Boolean, attribute: false, reflect: true })
], StepConnector.prototype, "bottomLabel", void 0);
__decorate([
    property({ type: String, attribute: false, reflect: true })
], StepConnector.prototype, "orientation", void 0);
__decorate([
    property({ type: Number, attribute: false, reflect: true })
], StepConnector.prototype, "index", void 0);
StepConnector = __decorate([
    customElement('hds-step-connector')
], StepConnector);
export { StepConnector };
//# sourceMappingURL=hds-step-connector.js.map