import '@here/hds-icon';
import { LitElement, nothing, PropertyValues } from 'lit';
import { StepperOrientation } from './hds-stepper.js';
export declare type StepState = 'disabled' | 'completed' | 'active' | 'error';
export declare type StepStatePayload = {
    currentState: StepState;
    previousState: StepState;
    stepIndex: number;
};
export declare type StepActivateStepInternal = {
    stepIndex: number;
};
/**
 *
 * @event {CustomEvent<{currentState: StepState, previousState: StepState, stepIndex: number}>} state Fired when the step state has changed `StepStatePayload`
 * @event {CustomEvent<{stepIndex: number}>} activate-step-internal (**Internal use**) Fired when the step is active `StepActivateStepInternal`
 * @event {CustomEvent<{currentState: StepState, previousState: StepState, stepIndex: number}>} step-state **Deprecated event:** Use event `state`. `StepStatePayload`
 *
 */
export declare class Step extends LitElement {
    static styles: import("lit").CSSResultGroup;
    label: string;
    hideLabel: boolean;
    nonLinear: boolean;
    bottomLabel: boolean;
    orientation: StepperOrientation;
    optional: boolean;
    index: number;
    state: StepState;
    protected isTabbable: boolean;
    protected _handleClick(e: Event): void;
    protected getStepConnector(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected updated(_changedProperties: PropertyValues): Promise<void>;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-step': Step;
    }
}
