var Dropdown_1;
import { __decorate } from "tslib";
import { customElement, BaseElement } from '@here/hds-base';
import '@here/hds-icon';
import { html, LitElement } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-dropdown.css.js';
import { computePosition, autoPlacement, offset } from '@floating-ui/dom';
/**
 * @slot trigger Element to be the trigger for the dropdown menu
 * @slot toggle Label for the toggle element
 * @slot menu Element `hds-list` for the items of the dropdown menu
 *
 * @event {CustomEvent<{open: boolean}>} change Fired when the dropdown has been changed: expanded/collapsed `DropdownChangePayload`
 * @event {CustomEvent<{id: string; index: number}>} select Fired when an item from the menu has been selected `ListSelectPayload`
 */
let Dropdown = Dropdown_1 = class Dropdown extends BaseElement {
    constructor() {
        super();
        this.isTabbable = true;
        this.open = false;
        this.placement = 'bottom';
        this.hideOnScroll = false;
        this.allowedPlacements = ['top', 'right', 'bottom', 'left'];
        this._handleKeydown = this._handleKeydown.bind(this);
        this._handleClickOutside = this._handleClickOutside.bind(this);
        this._handleScroll = this._handleScroll.bind(this);
    }
    connectedCallback() {
        super.connectedCallback && super.connectedCallback();
        this._addEventListeners();
    }
    disconnectedCallback() {
        super.disconnectedCallback && super.disconnectedCallback();
        this._removeEventListeners();
    }
    async updated(changedPropertyValues) {
        if (changedPropertyValues.has('open') && changedPropertyValues.get('open') !== undefined) {
            this.dispatchEvent(new CustomEvent('change', {
                detail: {
                    open: this.open,
                },
                bubbles: true,
                composed: true,
            }));
        }
        if (this.open) {
            this.updatePosition();
            this._getMenu()[0].focus();
        }
    }
    async updatePosition() {
        const isAuto = this.getAttribute('placement') === 'auto';
        const offsetFn = Dropdown_1.utils.offset(8);
        const autoPlacementFn = isAuto
            ? Dropdown_1.utils.autoPlacement({
                allowedPlacements: this.allowedPlacements,
            })
            : undefined;
        const middleware = isAuto ? [autoPlacementFn, offsetFn] : [offsetFn];
        const placement = isAuto ? undefined : this.placement;
        const pos = await Dropdown_1.utils.computePosition(this, this.menuWrapper, {
            placement,
            strategy: 'fixed',
            middleware,
        });
        Object.assign(this.menuWrapper.style, {
            top: `${pos.y}px`,
            left: `${pos.x}px`,
        });
        this.placement = pos.placement;
    }
    render() {
        const menuClasses = {
            'menu-wrapper': true,
            open: this.open,
            [`placement-${this.placement}`]: true,
        };
        return html `
      <div
        id="hds-dropdown"
        class="hds-dropdown-wrapper"
        @click="${(e) => e.stopPropagation()}"
        @select="${this._handleOnSelect}"
      >
        <div class="trigger-wrapper">
          <slot name="trigger" @click="${this._handleToggleClick}"></slot>
        </div>
        <div class="${classMap(menuClasses)}">
          <slot name="menu"></slot>
        </div>
      </div>
    `;
    }
    _handleKeydown(e) {
        // emits close event on Escape key down
        if (e.key === 'Escape') {
            this._handleClose();
        }
    }
    _handleClose() {
        this.open = false;
        this.querySelectorAll('hds-list-item[selected]').forEach(itemElement => {
            const item = itemElement;
            item.selected = false;
        });
        // TODO: review this after #1071 is closed
        this.querySelectorAll('hds-list').forEach(listElement => {
            const list = listElement;
            list.selectedIndex = -1;
        });
    }
    _handleClickOutside(e) {
        const closestDropdown = e.target.closest &&
            e.target.closest(this.tagName.toLowerCase());
        if (closestDropdown !== this) {
            this._handleClose();
        }
    }
    _removeEventListeners() {
        this.ownerDocument.removeEventListener('click', this._handleClickOutside, true);
        this.ownerDocument.removeEventListener('scroll', this._handleScroll, true);
        this.ownerDocument.removeEventListener('wheel', this._handleScroll, true);
        this.ownerDocument.removeEventListener('keydown', this._handleKeydown);
        this.ownerDocument.defaultView?.removeEventListener('resize', this._handleScroll);
    }
    _addEventListeners() {
        this._removeEventListeners();
        this.ownerDocument.addEventListener('click', this._handleClickOutside, true);
        this.ownerDocument.addEventListener('scroll', this._handleScroll, true);
        this.ownerDocument.addEventListener('wheel', this._handleScroll, true);
        this.ownerDocument.addEventListener('keydown', this._handleKeydown);
        this.ownerDocument.defaultView?.addEventListener('resize', this._handleScroll);
    }
    async _handleOnSelect(e) {
        e.stopPropagation();
        await this.updateComplete;
        this.dispatchEvent(new CustomEvent('select', {
            detail: e.detail,
            bubbles: true,
            composed: true,
        }));
        this._handleClose();
    }
    async _handleToggleClick() {
        this.open = !this.open;
    }
    _getMenu() {
        return this.menuSlot.assignedNodes({ flatten: true });
    }
    _handleScroll() {
        if (this.open) {
            if (this.hideOnScroll) {
                this.open = false;
                this.requestUpdate('open', true);
            }
            else {
                this.updatePosition();
            }
        }
    }
};
Dropdown.styles = styles;
Dropdown.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
Dropdown.utils = { computePosition, autoPlacement, offset };
__decorate([
    property({ type: Boolean, reflect: true })
], Dropdown.prototype, "open", void 0);
__decorate([
    property({ type: String })
], Dropdown.prototype, "placement", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-on-scroll' })
], Dropdown.prototype, "hideOnScroll", void 0);
__decorate([
    property({
        type: Array,
        attribute: 'allowed-placements',
        converter: {
            fromAttribute: value => value?.split(','),
        },
    })
], Dropdown.prototype, "allowedPlacements", void 0);
__decorate([
    query('[name="menu"]')
], Dropdown.prototype, "menuSlot", void 0);
__decorate([
    query('.menu-wrapper')
], Dropdown.prototype, "menuWrapper", void 0);
Dropdown = Dropdown_1 = __decorate([
    customElement('hds-dropdown')
], Dropdown);
export { Dropdown };
//# sourceMappingURL=hds-dropdown.js.map