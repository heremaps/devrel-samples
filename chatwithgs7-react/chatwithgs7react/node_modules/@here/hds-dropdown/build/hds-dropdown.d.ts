import { BaseElement } from '@here/hds-base';
import '@here/hds-icon';
import { PropertyValues } from 'lit';
import { Placement } from '@floating-ui/dom';
export declare type DropdownVariant = 'solid' | 'subtle';
export declare type DropdownSize = 'small' | 'medium' | 'large';
export declare type DropdownPlacement = 'auto' | 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
export declare type DropdownChangePayload = {
    open: boolean;
};
/**
 * @slot trigger Element to be the trigger for the dropdown menu
 * @slot toggle Label for the toggle element
 * @slot menu Element `hds-list` for the items of the dropdown menu
 *
 * @event {CustomEvent<{open: boolean}>} change Fired when the dropdown has been changed: expanded/collapsed `DropdownChangePayload`
 * @event {CustomEvent<{id: string; index: number}>} select Fired when an item from the menu has been selected `ListSelectPayload`
 */
export declare class Dropdown extends BaseElement {
    static styles: import("lit").CSSResultGroup;
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    static utils: {
        computePosition: (reference: import("@floating-ui/dom").ReferenceElement, floating: HTMLElement, options?: Partial<{
            placement?: Placement | undefined;
            strategy?: import("@floating-ui/utils").Strategy | undefined;
            middleware?: (false | {
                name: string;
                options?: any;
                fn: (state: {
                    placement: Placement;
                    x: number;
                    y: number;
                    initialPlacement: Placement;
                    strategy: import("@floating-ui/utils").Strategy;
                    middlewareData: import("@floating-ui/core").MiddlewareData;
                    rects: import("@floating-ui/utils").ElementRects;
                    platform: import("@floating-ui/core").Platform;
                    elements: import("@floating-ui/dom").Elements;
                }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
            } | null | undefined)[] | undefined;
            platform?: import("@floating-ui/dom").Platform | undefined;
        }> | undefined) => Promise<import("@floating-ui/core").ComputePositionReturn>;
        autoPlacement: (options?: {
            allowedPlacements?: Placement[] | undefined;
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            crossAxis?: boolean | undefined;
            alignment?: import("@floating-ui/utils").Alignment | null | undefined;
            autoAlignment?: boolean | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        } | import("@floating-ui/core").Derivable<{
            allowedPlacements?: Placement[] | undefined;
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            crossAxis?: boolean | undefined;
            alignment?: import("@floating-ui/utils").Alignment | null | undefined;
            autoAlignment?: boolean | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }> | undefined) => {
            name: string;
            options?: any;
            fn: (state: {
                placement: Placement;
                x: number;
                y: number;
                initialPlacement: Placement;
                strategy: import("@floating-ui/utils").Strategy;
                middlewareData: import("@floating-ui/core").MiddlewareData;
                rects: import("@floating-ui/utils").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/dom").Elements;
            }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
        };
        offset: (options?: import("@floating-ui/core").OffsetOptions | undefined) => import("@floating-ui/core").Middleware;
    };
    isTabbable: boolean;
    open: boolean;
    placement: DropdownPlacement;
    hideOnScroll: boolean;
    allowedPlacements: DropdownPlacement[];
    protected menuSlot: HTMLElement;
    protected menuWrapper: HTMLElement;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected updated(changedPropertyValues: PropertyValues): Promise<void>;
    protected updatePosition(): Promise<void>;
    protected render(): import("lit-html").TemplateResult<1>;
    private _handleKeydown;
    private _handleClose;
    private _handleClickOutside;
    private _removeEventListeners;
    private _addEventListeners;
    private _handleOnSelect;
    private _handleToggleClick;
    private _getMenu;
    private _handleScroll;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-dropdown': Dropdown;
    }
}
