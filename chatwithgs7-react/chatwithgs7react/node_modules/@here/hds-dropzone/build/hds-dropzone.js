import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-icon';
import '@here/hds-progress-indicator';
import { html, LitElement, nothing } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { styles } from './hds-dropzone.css.js';
/**
 * @event {CustomEvent<{files: FileList | null}>} change Fired when there has been a change in the filelist `DropzoneChangePayload`
 */
let Dropzone = class Dropzone extends LitElement {
    constructor() {
        super(...arguments);
        this.progress = false;
        this.dragging = false;
        this.error = false;
        this.disabled = false;
        this.multiple = false;
        this.accept = '';
        this.files = null;
        this.icon = '';
        this.iconCategory = 'core-ui';
        this.orientation = 'horizontal';
        this.textDropzoneBrowseFiles = 'Browse files';
        this.textDropzoneDropFiles = 'Drop files here';
        this.textDropzoneOr = 'or';
        this.textDropzoneUploading = 'Uploading';
        this.textDropzoneDraggingOver = '';
        this.textDropzoneFileRestrictions = '';
        this.textAssistive = '';
        this.textError = '';
        this.textTitle = '';
        this.textFileRestrictions = '';
    }
    /**
     * Asynchronous function that clears all selected/dragged files
     */
    async reset() {
        this.nativeInput.value = '';
        await this._emitChange(this.nativeInput.files);
    }
    browse() {
        this.nativeInput.click();
    }
    render() {
        const classes = {
            disabled: this.disabled,
            progress: this.progress,
            error: this.error,
            'dragging-over': this.dragging,
        };
        classes[`orientation-${this.orientation}`] = true;
        const isDraggingOver = this.dragging && this.textDropzoneDraggingOver && this.textDropzoneDraggingOver.length;
        let dropzoneContent = nothing;
        if (this.progress)
            dropzoneContent = this.renderProgress();
        else if (isDraggingOver)
            dropzoneContent = this.renderDraggingOver();
        else
            dropzoneContent = this.renderDropzone();
        return html `
      <div
        class="-hds-dropzone-wrapper ${classMap(classes)}"
        @drop="${this._onDrop}"
        @dragover="${this._onDragOver}"
        @dragleave="${this._onDragLeave}"
      >
        <div class="header">
          <span> ${ifDefined(this.textTitle)} </span>
          <span class="caption"> ${ifDefined(this.textFileRestrictions)} </span>
        </div>
        <div class="dropzone">${dropzoneContent}</div>
        <div class="footer">
          <span class="caption">
            ${ifDefined(this.error && this.textError ? this.textError : this.textAssistive)}
          </span>
        </div>
        <input
          type="file"
          accept="${this.accept}"
          ?multiple="${this.multiple}"
          @change="${this._onNativeInputChange}"
        />
      </div>
    `;
    }
    async _emitChange(files) {
        if (!this.progress) {
            this.files = files;
            await this.updateComplete;
            this.dispatchEvent(new CustomEvent('change', {
                detail: { files },
                bubbles: true,
                composed: true,
            }));
        }
    }
    async _onNativeInputChange(e) {
        e.stopPropagation();
        e.preventDefault();
        await this._emitChange(this.nativeInput.files);
    }
    async _onDrop(e) {
        this.dragging = false;
        e.stopPropagation();
        e.preventDefault();
        await this._emitChange(e.dataTransfer.files);
    }
    _onDragOver(e) {
        this.dragging = true;
        e.stopPropagation();
        e.preventDefault();
    }
    _onDragLeave(e) {
        this.dragging = false;
        e.stopPropagation();
        e.preventDefault();
    }
    renderProgress() {
        return html ` <div class="row uploading">
      <hds-progress-indicator
        class="progress-indicator"
        size="large"
        color="action"
        indicator-type="circular"
      ></hds-progress-indicator>
      <div>${this.textDropzoneUploading}</div>
    </div>`;
    }
    renderDraggingOver() {
        return html ` <div class="row">${this.textDropzoneDraggingOver}</div>`;
    }
    renderIcon() {
        return this.icon
            ? html ` <div class="row uploading">
          <hds-icon
            class="icon"
            size="16px"
            name="${this.icon}"
            category="${this.iconCategory}"
          ></hds-icon>
        </div>`
            : nothing;
    }
    renderSeparator() {
        return this.orientation === 'vertical' ? html ` <div class="row"></div>` : nothing;
    }
    renderDropzone() {
        const textDropzoneBrowseFiles = this.textDropzoneBrowseFiles.trim() !== '' ? this.textDropzoneBrowseFiles : 'Browse files';
        return html `
      ${this.renderIcon()}
      <div class="row">
        <span>${this.textDropzoneDropFiles} ${this.renderSeparator()} ${this.textDropzoneOr}</span>
        <span>${this.renderSeparator()}</span>
        <hds-button
          @click="${this.browse}"
          ?disabled="${this.disabled}"
          class="button"
          variant="link"
          size="small"
          icon-right="folder-open"
          icon-category="core-ui"
          >${textDropzoneBrowseFiles}</hds-button
        >
      </div>
      <div class="row dropzone-file-restrictions">${this.textDropzoneFileRestrictions}</div>
    `;
    }
};
Dropzone.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true })
], Dropzone.prototype, "progress", void 0);
__decorate([
    property({ type: Boolean, attribute: false })
], Dropzone.prototype, "dragging", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Dropzone.prototype, "error", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Dropzone.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean })
], Dropzone.prototype, "multiple", void 0);
__decorate([
    property({ type: String })
], Dropzone.prototype, "accept", void 0);
__decorate([
    property({ type: Object, attribute: false })
], Dropzone.prototype, "files", void 0);
__decorate([
    property({ type: String })
], Dropzone.prototype, "icon", void 0);
__decorate([
    property({ type: String, attribute: 'icon-category' })
], Dropzone.prototype, "iconCategory", void 0);
__decorate([
    property({ type: String })
], Dropzone.prototype, "orientation", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-browse-files' })
], Dropzone.prototype, "textDropzoneBrowseFiles", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-drop-files' })
], Dropzone.prototype, "textDropzoneDropFiles", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-or' })
], Dropzone.prototype, "textDropzoneOr", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-uploading' })
], Dropzone.prototype, "textDropzoneUploading", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-dragging-over' })
], Dropzone.prototype, "textDropzoneDraggingOver", void 0);
__decorate([
    property({ type: String, attribute: 'text-dropzone-file-restrictions' })
], Dropzone.prototype, "textDropzoneFileRestrictions", void 0);
__decorate([
    property({ type: String, attribute: 'text-assistive' })
], Dropzone.prototype, "textAssistive", void 0);
__decorate([
    property({ type: String, attribute: 'text-error' })
], Dropzone.prototype, "textError", void 0);
__decorate([
    property({ type: String, attribute: 'text-title' })
], Dropzone.prototype, "textTitle", void 0);
__decorate([
    property({ type: String, attribute: 'text-file-restrictions' })
], Dropzone.prototype, "textFileRestrictions", void 0);
__decorate([
    query('input[type=file]')
], Dropzone.prototype, "nativeInput", void 0);
Dropzone = __decorate([
    customElement('hds-dropzone')
], Dropzone);
export { Dropzone };
//# sourceMappingURL=hds-dropzone.js.map