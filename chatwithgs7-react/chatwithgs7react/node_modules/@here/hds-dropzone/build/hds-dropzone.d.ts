import '@here/hds-icon';
import { IconCategory } from '@here/hds-iconlibrary';
import '@here/hds-progress-indicator';
import { LitElement, TemplateResult } from 'lit';
export declare type DropzoneOrientation = 'horizontal' | 'vertical';
export declare type DropzoneChangePayload = {
    files: FileList | null;
};
/**
 * @event {CustomEvent<{files: FileList | null}>} change Fired when there has been a change in the filelist `DropzoneChangePayload`
 */
export declare class Dropzone extends LitElement {
    static styles: import("lit").CSSResultGroup;
    progress: boolean;
    dragging: boolean;
    error: boolean;
    disabled: boolean;
    multiple: boolean;
    accept: string;
    files: FileList | null;
    icon: string;
    iconCategory: IconCategory;
    orientation: DropzoneOrientation;
    textDropzoneBrowseFiles: string;
    textDropzoneDropFiles: string;
    textDropzoneOr: string;
    textDropzoneUploading: string;
    textDropzoneDraggingOver: string;
    textDropzoneFileRestrictions: string;
    textAssistive: string;
    textError: string;
    textTitle: string;
    textFileRestrictions: string;
    protected nativeInput: HTMLInputElement;
    /**
     * Asynchronous function that clears all selected/dragged files
     */
    reset(): Promise<void>;
    browse(): void;
    protected render(): TemplateResult<1>;
    private _emitChange;
    private _onNativeInputChange;
    private _onDrop;
    private _onDragOver;
    private _onDragLeave;
    private renderProgress;
    private renderDraggingOver;
    private renderIcon;
    private renderSeparator;
    private renderDropzone;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-dropzone': Dropzone;
    }
}
