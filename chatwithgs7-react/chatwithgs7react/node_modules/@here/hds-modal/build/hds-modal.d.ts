import { BaseElement } from '@here/hds-base';
import '@here/hds-button';
import '@here/hds-icon';
import { IconCategory } from '@here/hds-iconlibrary';
import '@here/hds-overlay';
import { nothing, PropertyValues, TemplateResult } from 'lit';
export declare type ModalTitleSize = 'small' | 'large';
export declare type ModalVariant = 'primary' | 'secondary' | 'subtle' | 'warning' | 'danger' | 'link';
export declare type ModalChangePayload = {
    from: 'button' | 'overlay' | 'escape';
};
export declare type ModalActionPayload = {
    from: 'confirm' | 'cancel' | 'thirdButton';
};
/**
 * @slot header Content to be shown as title on the header
 * @slot body Main content of the modal
 * @slot footer Content to be shown on the footer
 *
 * @event {CustomEvent<{from: 'button' | 'overlay' | 'escape'}>} change Fired when the modal is changed (closed/open) and from where has been closed: `button | overlay | escape` `ModalChangePayload`
 * @event {CustomEvent<{from: 'confirm' | 'cancel' | 'thirdButton'}>} action Fired when one of the actions button has been clicked `ModalActionPayload`
 *
 * @cssprop --hds-modal-tablet-grid-column Column property value for the modal width for `tablet` breakpoint
 * @cssprop --hds-modal-desktop-small-grid-column Column property value for the modal width for `desktop-small` breakpoint
 * @cssprop --hds-modal-desktop-medium-grid-column Column property value for the modal width for `desktop-medium` breakpoint
 * @cssprop --hds-modal-desktop-large-grid-column Column property value for the modal width for `desktop-large` breakpoint
 * @cssprop --hds-modal-body-height Variable for the content height (default `100%`)
 */
export declare class Modal extends BaseElement {
    static styles: import("lit").CSSResultGroup;
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    hideCloseBtn: boolean;
    closeAriaLabel: string;
    icon: string;
    iconColor: string;
    iconCategory: IconCategory;
    headingMessage: string;
    message: string;
    titleSize: ModalTitleSize;
    disableCloseOnOverlayClick: boolean;
    disableCloseOnEscape: boolean;
    hideHeader: boolean;
    hideFooter: boolean;
    confirmVariant: ModalVariant;
    buttonsWidth: number;
    hideConfirm: boolean;
    hideCancel: boolean;
    hideThirdButton: boolean;
    confirmText: string;
    cancelText: string;
    thirdButtonText: string;
    protected tabbableElements: any[];
    protected debouncedResize: () => Promise<void>;
    protected HDS_SPACING_10: number;
    protected headerSlot: HTMLSlotElement;
    protected bodySlot: HTMLSlotElement;
    protected footerSlot: HTMLSlotElement;
    protected closeBtn: HTMLElement;
    protected defaultButtons: HTMLElement[];
    protected debouncedButtonResize: () => Promise<void>;
    private activeElement;
    constructor();
    protected get headerSlotted(): boolean;
    private get firstTabbableElement();
    private get lastTabbableElement();
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(changedProperties: PropertyValues): void;
    protected updated(): Promise<void>;
    /**
     * Adds focus trap on modal window to prevent keyboard navigation outside of modal
     */
    protected setTabbableElements(): void;
    protected setTabKeydownListeners(): void;
    protected render(): TemplateResult<1>;
    protected renderHeader(): TemplateResult | unknown;
    protected removeHandleFocusEvents(): void;
    /**
     * Close action on Overlay click key down
     */
    protected handleClickOverlay(): void;
    protected renderFooter(): TemplateResult | unknown;
    protected renderCloseButton(): typeof nothing | TemplateResult<1>;
    /**
     * Set large size to default buttons in footer on small screens
     */
    protected changeDefaultButtonSize(breakpointName?: string): Promise<void>;
    /**
     * Set calculated footer and header height as custom css variable
     * for body max height calculation in css for calc function
     */
    protected changeBodyMaxHeight(): Promise<void>;
    /**
     * Return array of nodes in particular slot or empty array
     * @param slot
     * @returns All the Elements in the slots
     */
    protected slotNodes(slot: HTMLSlotElement): Element[];
    /**
     * Wraps css variable to be placed in styles
     */
    protected wrapCssVariable: (variableName: string | undefined) => string | undefined;
    /**
     * Focus first element
     */
    private focusFirstTabbableElement;
    /**
     * Focus previously stored active element after close modal
     */
    private focusActiveElement;
    private handleFocus;
    private renderButtons;
    private buttonClick;
    private close;
    private renderDefaultButton;
    private addEventListeners;
    private removeEventListeners;
    /**
     * Close action on Escape key down
     */
    private handleKeydown;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-modal': Modal;
    }
}
