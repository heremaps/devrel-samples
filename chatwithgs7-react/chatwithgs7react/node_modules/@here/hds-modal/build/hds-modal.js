import { __decorate } from "tslib";
import { customElement, BaseElement, closestElement, debounce, getCSSVariable } from '@here/hds-base';
import '@here/hds-button';
import { HDSGrid } from '@here/hds-grid';
import '@here/hds-icon';
import '@here/hds-overlay';
import { html, LitElement, nothing } from 'lit';
import { property, query, queryAll } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { styleMap } from 'lit/directives/style-map.js';
import { tabbable } from 'tabbable';
import { styles } from './hds-modal.css.js';
import { getHDSTabblableComponents } from './hds-tabbable.js';
/**
 * @slot header Content to be shown as title on the header
 * @slot body Main content of the modal
 * @slot footer Content to be shown on the footer
 *
 * @event {CustomEvent<{from: 'button' | 'overlay' | 'escape'}>} change Fired when the modal is changed (closed/open) and from where has been closed: `button | overlay | escape` `ModalChangePayload`
 * @event {CustomEvent<{from: 'confirm' | 'cancel' | 'thirdButton'}>} action Fired when one of the actions button has been clicked `ModalActionPayload`
 *
 * @cssprop --hds-modal-tablet-grid-column Column property value for the modal width for `tablet` breakpoint
 * @cssprop --hds-modal-desktop-small-grid-column Column property value for the modal width for `desktop-small` breakpoint
 * @cssprop --hds-modal-desktop-medium-grid-column Column property value for the modal width for `desktop-medium` breakpoint
 * @cssprop --hds-modal-desktop-large-grid-column Column property value for the modal width for `desktop-large` breakpoint
 * @cssprop --hds-modal-body-height Variable for the content height (default `100%`)
 */
let Modal = class Modal extends BaseElement {
    constructor() {
        super();
        this.hideCloseBtn = false;
        this.closeAriaLabel = 'Close';
        this.icon = '';
        this.iconColor = '';
        this.iconCategory = 'core-ui';
        this.headingMessage = '';
        this.message = '';
        this.titleSize = 'large';
        this.disableCloseOnOverlayClick = false;
        this.disableCloseOnEscape = false;
        this.hideHeader = false;
        this.hideFooter = false;
        this.confirmVariant = 'primary';
        this.buttonsWidth = 128;
        this.hideConfirm = false;
        this.hideCancel = false;
        this.hideThirdButton = false;
        this.confirmText = 'Done';
        this.cancelText = 'Cancel';
        this.thirdButtonText = 'Settings';
        this.tabbableElements = [];
        this.debouncedResize = debounce(() => this.changeBodyMaxHeight(), 150);
        this.HDS_SPACING_10 = 64;
        this.debouncedButtonResize = debounce(() => this.changeDefaultButtonSize(), 150);
        // Holds the active element before the modal is opened.
        this.activeElement = null;
        /**
         * Wraps css variable to be placed in styles
         */
        this.wrapCssVariable = (variableName) => variableName?.startsWith('--') ? `var(${variableName})` : variableName;
        this.handleKeydown = this.handleKeydown.bind(this);
        this.handleFocus = this.handleFocus.bind(this);
    }
    get headerSlotted() {
        return !!this.slotNodes(this.headerSlot).length;
    }
    get firstTabbableElement() {
        return this.tabbableElements[0];
    }
    get lastTabbableElement() {
        return this.tabbableElements[this.tabbableElements.length ? this.tabbableElements.length - 1 : 0];
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListeners();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListeners();
        this.removeHandleFocusEvents();
        this.activeElement = null;
    }
    firstUpdated(changedProperties) {
        super.firstUpdated(changedProperties);
        const spacing = parseInt(getCSSVariable('--hds-spacing-10', this), 10);
        const baseline = parseInt(getCSSVariable('--hds-font-baseline', this), 10);
        if (spacing && baseline) {
            this.HDS_SPACING_10 = spacing * baseline;
        }
        const parentEl = closestElement("[data-theme^='hds-']", this);
        const container = document.querySelector('hds-modal-container');
        if (container) {
            container.appendChild(this);
        }
        else if (parentEl) {
            parentEl.appendChild(this);
        }
        else {
            // eslint-disable-next-line no-console
            console.error("No parent element with data attribute [data-theme^='hds-'] found. Data attribute with name of existing hds theme should be added to the root container.");
        }
    }
    async updated() {
        this.setTabbableElements();
        await this.changeBodyMaxHeight();
        await this.changeDefaultButtonSize();
    }
    /**
     * Adds focus trap on modal window to prevent keyboard navigation outside of modal
     */
    setTabbableElements() {
        const bodyElements = this.slotNodes(this.bodySlot);
        const bodyNode = bodyElements[0];
        const footerElements = this.slotNodes(this.footerSlot);
        const footerNode = footerElements[0];
        // Web components tabbable elements
        const tabbableFooterComponents = getHDSTabblableComponents(footerNode);
        const tabbableBodyComponents = getHDSTabblableComponents(bodyNode);
        this.tabbableElements = [
            ...(bodyElements.length ? tabbable(bodyElements[0]) : []),
            ...tabbableBodyComponents,
            ...(footerElements.length ? tabbable(footerElements[0]) : []),
            ...tabbableFooterComponents,
        ];
        if (!this.hideCloseBtn && this.headerSlotted) {
            this.tabbableElements.push(this.closeBtn);
        }
        this.setTabKeydownListeners();
    }
    setTabKeydownListeners() {
        if (this.tabbableElements.length && this.tabbableElements[0]?.focus) {
            this.focusFirstTabbableElement();
            this.tabbableElements.forEach(element => element?.addEventListener('keydown', this.handleFocus));
        }
    }
    render() {
        return html `
      <div class="-hds-modal-wrapper hds-grid-container">
        <div class="wrapper" role="dialog" aria-modal="true" aria-label="${ifDefined(this.title)}">
          ${this.renderHeader()}
          <div
            class="hds-modal-body"
            id="content"
            @scroll="${() => this.dispatchEvent(new CustomEvent('scroll', { composed: true, bubbles: true }))}"
          >
            <slot name="body"></slot>
            <slot>
              <div>${this.message}</div>
            </slot>
          </div>
          ${this.renderFooter()} ${this.renderCloseButton()}
        </div>
        <hds-overlay @click="${this.handleClickOverlay}"></hds-overlay>
      </div>
    `;
    }
    renderHeader() {
        if (this.hideHeader) {
            return nothing;
        }
        const classes = {
            'hds-modal-header': true,
            '-icon': this.icon,
        };
        const titleClasses = {
            title: true,
            [`title--size-${this.titleSize}`]: true,
        };
        let iconElement = html ``;
        let localStyles = {};
        if (this.iconColor || this.iconColor !== '') {
            localStyles = {
                '--hds-icon-color': this.wrapCssVariable(this.iconColor),
            };
        }
        if (this.icon) {
            iconElement = html ` <hds-icon
        class="title-icon"
        name="${this.icon}"
        category="${this.iconCategory}"
      ></hds-icon>`;
        }
        if (!this.icon && !this.headerSlotted && !this.headingMessage) {
            return html ` <div class="${classMap(classes)}">
        <slot name="header"></slot>
      </div>`;
        }
        return html `
      <div id="modal-header" class="${classMap(classes)}" style="${styleMap(localStyles)}">
        ${iconElement}
        <div id="title" class="${classMap(titleClasses)}">
          <slot name="header">${this.headingMessage}</slot>
        </div>
      </div>
    `;
    }
    removeHandleFocusEvents() {
        this.tabbableElements.forEach(element => element?.removeEventListener('keydown', this.handleFocus));
    }
    /**
     * Close action on Overlay click key down
     */
    handleClickOverlay() {
        if (!this.disableCloseOnOverlayClick) {
            this.close('overlay');
        }
    }
    renderFooter() {
        if (this.hideFooter) {
            return nothing;
        }
        return html `
      <div id="modal-footer" class="hds-modal-footer">
        <slot name="footer">${this.renderButtons()}</slot>
      </div>
    `;
    }
    renderCloseButton() {
        if (this.hideHeader) {
            return nothing;
        }
        const heading = this.shadowRoot?.querySelector('#modal-header');
        if (!this.hideCloseBtn) {
            heading?.classList.add('with-close');
            return html `
        <hds-button
          class="close"
          icon="cross"
          variant="subtle-quiet"
          @click="${() => this.close('button')}"
          aria-label="${this.closeAriaLabel}"
          size="small"
        ></hds-button>
      `;
        }
        heading?.classList.remove('with-close');
        return nothing;
    }
    /**
     * Set large size to default buttons in footer on small screens
     */
    async changeDefaultButtonSize(breakpointName = 'desktop-small') {
        const documentWidth = this.shadowRoot.ownerDocument.body.offsetWidth;
        this.defaultButtons.forEach(button => {
            const breakpointWidth = HDSGrid.getWidthForBreakpoint(breakpointName, this) &&
                typeof HDSGrid.getWidthForBreakpoint(breakpointName, this) === 'number'
                ? HDSGrid.getWidthForBreakpoint(breakpointName, this)
                : 0;
            documentWidth <= breakpointWidth
                ? button.setAttribute('size', 'large')
                : button.setAttribute('size', 'small');
        });
    }
    /**
     * Set calculated footer and header height as custom css variable
     * for body max height calculation in css for calc function
     */
    async changeBodyMaxHeight() {
        await this.updateComplete;
        const body = this.shadowRoot.querySelector('#content');
        const header = this.shadowRoot.querySelector('#modal-header');
        const footer = this.shadowRoot.querySelector('#modal-footer');
        const viewPortHeight = window.innerHeight;
        const headerHeight = header?.offsetHeight || 0;
        const footerHeight = footer?.offsetHeight || 0;
        const elementsHeight = `${viewPortHeight - (headerHeight + footerHeight + this.HDS_SPACING_10)}px`;
        body.style.setProperty('--hds-modal-max-height', elementsHeight);
    }
    /**
     * Return array of nodes in particular slot or empty array
     * @param slot
     * @returns All the Elements in the slots
     */
    slotNodes(slot) {
        return slot?.assignedElements({ flatten: true }) || [];
    }
    /**
     * Focus first element
     */
    focusFirstTabbableElement() {
        setTimeout(() => this.firstTabbableElement.focus());
    }
    /**
     * Focus previously stored active element after close modal
     */
    focusActiveElement() {
        if (this.activeElement && this.activeElement?.focus) {
            this.activeElement.focus();
        }
    }
    handleFocus(e) {
        if (e.code !== 'Tab') {
            return;
        }
        if (e.shiftKey && e.target === this.firstTabbableElement && this.lastTabbableElement?.focus) {
            e.preventDefault();
            this.lastTabbableElement?.focus();
        }
        else if (!e.shiftKey &&
            e.target === this.lastTabbableElement &&
            this.firstTabbableElement?.focus) {
            e.preventDefault();
            this.firstTabbableElement?.focus();
        }
    }
    renderButtons() {
        const confirm = this.hideConfirm
            ? nothing
            : this.renderDefaultButton(this.confirmVariant, this.confirmText, 'confirm');
        const cancel = this.hideCancel
            ? nothing
            : this.renderDefaultButton('secondary', this.cancelText, 'cancel');
        const thirdButton = this.hideThirdButton
            ? nothing
            : this.renderDefaultButton('subtle', this.thirdButtonText, 'thirdButton');
        return html ` <div class="hds-modal-footer--default">${thirdButton}${cancel}${confirm}</div>`;
    }
    buttonClick(name) {
        this.dispatchEvent(new CustomEvent('action', {
            detail: {
                from: name,
            },
        }));
    }
    close(value) {
        this.dispatchEvent(new CustomEvent('change', {
            detail: {
                from: value,
            },
        }));
        this.focusActiveElement();
    }
    renderDefaultButton(variant, text, name) {
        return html ` <hds-button
      variant="${variant}"
      class="default-button ${name}"
      width="100%"
      @click="${() => this.buttonClick(name)}"
      aria-label="${text}"
      size="small"
      >${text}
    </hds-button>`;
    }
    addEventListeners() {
        this.removeEventListeners();
        this.ownerDocument.addEventListener('keydown', this.handleKeydown);
        window.addEventListener('resize', this.debouncedResize);
        window.addEventListener('resize', this.debouncedButtonResize);
    }
    removeEventListeners() {
        this.ownerDocument.removeEventListener('keydown', this.handleKeydown);
        window.removeEventListener('resize', this.debouncedResize);
        window.removeEventListener('resize', this.debouncedButtonResize);
        this.removeHandleFocusEvents();
    }
    /**
     * Close action on Escape key down
     */
    handleKeydown(e) {
        if (e.key === 'Escape' && !this.disableCloseOnEscape) {
            this.close('escape');
        }
    }
};
Modal.styles = styles;
Modal.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: false };
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'hide-close-btn' })
], Modal.prototype, "hideCloseBtn", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'close-aria-label' })
], Modal.prototype, "closeAriaLabel", void 0);
__decorate([
    property({ type: String })
], Modal.prototype, "icon", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'icon-color' })
], Modal.prototype, "iconColor", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'icon-category' })
], Modal.prototype, "iconCategory", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'heading-message' })
], Modal.prototype, "headingMessage", void 0);
__decorate([
    property({ type: String })
], Modal.prototype, "message", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'title-size' })
], Modal.prototype, "titleSize", void 0);
__decorate([
    property({ type: Boolean, attribute: 'disable-close-on-overlay-click' })
], Modal.prototype, "disableCloseOnOverlayClick", void 0);
__decorate([
    property({ type: Boolean, attribute: 'disable-close-on-escape' })
], Modal.prototype, "disableCloseOnEscape", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-header' })
], Modal.prototype, "hideHeader", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-footer' })
], Modal.prototype, "hideFooter", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'confirm-variant' })
], Modal.prototype, "confirmVariant", void 0);
__decorate([
    property({ type: Number, reflect: true, attribute: 'buttons-width' })
], Modal.prototype, "buttonsWidth", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-confirm' })
], Modal.prototype, "hideConfirm", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-cancel' })
], Modal.prototype, "hideCancel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide-third-button' })
], Modal.prototype, "hideThirdButton", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'confirm-text' })
], Modal.prototype, "confirmText", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'cancel-text' })
], Modal.prototype, "cancelText", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'third-button-text' })
], Modal.prototype, "thirdButtonText", void 0);
__decorate([
    query('slot[name="header"]')
], Modal.prototype, "headerSlot", void 0);
__decorate([
    query('slot[name="body"]')
], Modal.prototype, "bodySlot", void 0);
__decorate([
    query('slot[name="footer"]')
], Modal.prototype, "footerSlot", void 0);
__decorate([
    query('.close')
], Modal.prototype, "closeBtn", void 0);
__decorate([
    queryAll('.hds-modal-footer--default .default-button')
], Modal.prototype, "defaultButtons", void 0);
Modal = __decorate([
    customElement('hds-modal')
], Modal);
export { Modal };
//# sourceMappingURL=hds-modal.js.map