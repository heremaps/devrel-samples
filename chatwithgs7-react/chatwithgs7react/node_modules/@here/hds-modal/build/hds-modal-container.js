import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { html, LitElement } from 'lit';
let ModalContainer = class ModalContainer extends LitElement {
    render() {
        return html ` <div id="hds-modal__container">
      <slot></slot>
    </div>`;
    }
};
ModalContainer.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
ModalContainer = __decorate([
    customElement('hds-modal-container')
], ModalContainer);
export { ModalContainer };
/**
 * Displays a new modal on the screen.
 * The modal content can be passed as a string argument in the `message` property,
 * it supports custom HTML, or you can pass a `<template>` element id in the `bodyTemplateElementId` property.
 */
export const modal = ({ bodyTemplateElementId = '', hideCloseBtn = false, icon = '', iconColor = '', iconCategory = 'core-ui', message = '', disableCloseOnOverlayClick = false, disableCloseOnEscape = false, hideHeader = false, hideFooter = false, titleSize = 'small', headingMessage = '', confirmVariant = 'primary', // buttonsWidth = 128,
hideConfirm = false, hideCancel = false, hideThirdButton = false, confirmText = '', cancelText = '', thirdButtonText = '', onClose, onConfirm, onCancel, onThirdButton, } = {}) => {
    let parentEl = document.querySelector("[data-theme^='hds-']");
    if (!parentEl) {
        console.error("No [data-theme^='hds-'] element found.");
        parentEl = document.body;
    }
    const modalEl = document.createElement('hds-modal');
    modalEl.hideCloseBtn = hideCloseBtn;
    modalEl.icon = icon;
    modalEl.iconColor = iconColor;
    modalEl.iconCategory = iconCategory;
    modalEl.message = message;
    modalEl.disableCloseOnOverlayClick = disableCloseOnOverlayClick;
    modalEl.disableCloseOnEscape = disableCloseOnEscape;
    modalEl.hideHeader = hideHeader;
    modalEl.hideFooter = hideFooter;
    modalEl.titleSize = titleSize;
    modalEl.headingMessage = headingMessage;
    modalEl.confirmVariant = confirmVariant;
    // modalEl.buttonsWidth = buttonsWidth;
    modalEl.hideConfirm = hideConfirm;
    modalEl.hideCancel = hideCancel;
    modalEl.hideThirdButton = hideThirdButton;
    modalEl.confirmText = confirmText;
    modalEl.cancelText = cancelText;
    modalEl.thirdButtonText = thirdButtonText;
    if (onClose) {
        modalEl.addEventListener('change', () => onClose());
    }
    if (onConfirm || onThirdButton || onCancel) {
        modalEl.addEventListener('action', e => {
            switch (e.detail.from) {
                case 'cancel':
                    onCancel && onCancel();
                    break;
                case 'comfirm':
                    onConfirm && onConfirm();
                    break;
                case 'thirdButton':
                    onThirdButton && onThirdButton();
                    break;
            }
        });
    }
    if (bodyTemplateElementId) {
        const templateEl = document.getElementById(bodyTemplateElementId);
        if (templateEl) {
            const templateClone = templateEl.content.cloneNode(true);
            modalEl.appendChild(templateClone);
        }
        else {
            console.error(`No template element found with id: ${bodyTemplateElementId}`);
            return;
        }
    }
    else {
        modalEl.innerHTML = message;
    }
    let container = document.querySelector('hds-modal-container');
    if (!container) {
        container = document.createElement('hds-modal-container');
        parentEl.appendChild(container);
    }
    container.appendChild(modalEl);
};
//# sourceMappingURL=hds-modal-container.js.map