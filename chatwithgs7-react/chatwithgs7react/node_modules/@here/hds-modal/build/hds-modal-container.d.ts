import { IconCategory } from '@here/hds-iconlibrary';
import { LitElement } from 'lit';
import { ModalTitleSize, ModalVariant } from './hds-modal.js';
export declare class ModalContainer extends LitElement {
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    protected render(): import("lit-html").TemplateResult<1>;
}
interface ModalProps {
    bodyTemplateElementId?: string;
    hideCloseBtn?: boolean;
    icon?: string;
    iconColor?: string;
    iconCategory?: IconCategory;
    message?: string;
    disableCloseOnOverlayClick?: boolean;
    disableCloseOnEscape?: boolean;
    hideHeader?: boolean;
    hideFooter?: boolean;
    titleSize?: ModalTitleSize;
    headingMessage?: string;
    confirmVariant?: ModalVariant;
    hideConfirm?: boolean;
    hideCancel?: boolean;
    hideThirdButton?: boolean;
    confirmText?: string;
    cancelText?: string;
    thirdButtonText?: string;
    onClose?: () => void;
    onConfirm?: () => void;
    onCancel?: () => void;
    onThirdButton?: () => void;
}
/**
 * Displays a new modal on the screen.
 * The modal content can be passed as a string argument in the `message` property,
 * it supports custom HTML, or you can pass a `<template>` element id in the `bodyTemplateElementId` property.
 */
export declare const modal: ({ bodyTemplateElementId, hideCloseBtn, icon, iconColor, iconCategory, message, disableCloseOnOverlayClick, disableCloseOnEscape, hideHeader, hideFooter, titleSize, headingMessage, confirmVariant, hideConfirm, hideCancel, hideThirdButton, confirmText, cancelText, thirdButtonText, onClose, onConfirm, onCancel, onThirdButton, }?: ModalProps) => void;
declare global {
    interface HTMLElementTagNameMap {
        'hds-modal-container': ModalContainer;
    }
}
export {};
