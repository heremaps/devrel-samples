import { __decorate } from "tslib";
import { customElement, BaseElement } from '@here/hds-base';
import '@here/hds-checkbox';
import '@here/hds-icon';
import { html, LitElement, nothing } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-option.css.js';
/**
 * @slot default Content for the label
 */
let Option = class Option extends BaseElement {
    constructor() {
        super(...arguments);
        this.isTabbable = true;
        this.disabled = false;
        this.selected = false;
        this.variant = 'single';
    }
    render() {
        const classes = {
            selected: this.selected,
            disabled: this.disabled,
        };
        const optionTemplate = this.variant === 'single'
            ? this.renderSingleOption(this.selected)
            : this.renderMultipleOption(this.selected, this.disabled);
        return html `
      <div class="-hds-option-wrapper ${classMap(classes)}" tabindex="-1">${optionTemplate}</div>
    `;
    }
    renderIcon() {
        return html ` <hds-icon name="checkmark" size="16px"></hds-icon>`;
    }
    renderSingleOption(isSelected) {
        return html `
      <div class="single-variant">
        <div class="option-text">
          <slot></slot>
        </div>
        ${isSelected ? this.renderIcon() : nothing}
      </div>
    `;
    }
    renderMultipleOption(isSelected, isDisabled) {
        return html `
      <div class="multiple-variant">
        <hds-checkbox
          ?checked="${isSelected}"
          ?disabled="${isDisabled}"
          @click="${e => e.preventDefault()}"
        >
        </hds-checkbox>
        <div class="option-text">
          <slot></slot>
        </div>
      </div>
    `;
    }
};
Option.styles = styles;
Option.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
__decorate([
    property({ type: Boolean })
], Option.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Option.prototype, "selected", void 0);
__decorate([
    property({ type: String, attribute: 'variant' })
], Option.prototype, "variant", void 0);
__decorate([
    query('slot')
], Option.prototype, "optionContentSlot", void 0);
Option = __decorate([
    customElement('hds-option')
], Option);
export { Option };
//# sourceMappingURL=hds-option.js.map