import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { html, LitElement, nothing } from 'lit';
import { property, queryAll, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-calendar.css.js';
export const CALENDAR_WEEKDAYS = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
];
/**
 * @slot date-YYYY-MM-DD date cell slot
 * @event {CustomEvent<{selected: string}>} select Event fired when cell was selected `CalendarSelectPayload`
 * @event {CustomEvent<{value: string}>} change Event fired when value was changed `CalendarChangePayload`
 */
let Calendar = class Calendar extends LitElement {
    constructor() {
        super(...arguments);
        this.hideYearControls = false;
        this.hideMonthControls = false;
        this.variant = 'default';
        this.firstDayOfWeek = 'Sunday';
        this.lang = 'en-US';
        this.monthFormat = 'long';
        this.yearFormat = 'numeric';
        this.weekdayFormat = 'short';
        this.dayFormat = 'numeric';
        this.dayOutsideFormat = 'numeric';
        this.value = '';
        this.selected = '';
        this._hasDateSlot = false;
    }
    connectedCallback() {
        super.connectedCallback && super.connectedCallback();
        this.value = this.value || this._todayAsString;
    }
    get _todayAsString() {
        return this.getStringFromDate(new Date());
    }
    get _valueAsDate() {
        return this.getDateFromString(this.value);
    }
    getStringFromDate(date) {
        const dateEnUsFormat = date
            .toLocaleDateString('en-US', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
            .split('/');
        const month = dateEnUsFormat[0];
        const day = dateEnUsFormat[1];
        const year = dateEnUsFormat[2];
        return `${year}-${month}-${day}`;
    }
    getDateFromString(date) {
        return new Date(date);
    }
    updated(_changedProps) {
        if (_changedProps.get('selected') !== undefined && _changedProps.has('selected')) {
            this.dispatchEvent(new CustomEvent('select', {
                detail: { selected: this.selected },
                bubbles: true,
                composed: true,
            }));
        }
        if (_changedProps.get('value') !== undefined && _changedProps.has('value')) {
            this.dispatchEvent(new CustomEvent('change', {
                detail: { value: this.value },
                bubbles: true,
                composed: true,
            }));
        }
    }
    _getNextMonth() {
        const { _valueAsDate: valueAsDate } = this;
        return new Date(valueAsDate.getFullYear(), valueAsDate.getMonth() + 1, 1);
    }
    _getPreviousMonth() {
        const { _valueAsDate: valueAsDate } = this;
        return new Date(valueAsDate.getFullYear(), valueAsDate.getMonth() - 1, 1);
    }
    nextMonth() {
        if (this.hideMonthControls)
            return;
        this.value = this.getStringFromDate(this._getNextMonth());
    }
    previousMonth() {
        if (this.hideMonthControls)
            return;
        this.value = this.getStringFromDate(this._getPreviousMonth());
    }
    nextYear() {
        if (this.hideYearControls)
            return;
        const { _valueAsDate: valueAsDate } = this;
        const nextYearDate = new Date(valueAsDate.getFullYear() + 1, 0, 1);
        this.value = this.getStringFromDate(nextYearDate);
    }
    previousYear() {
        if (this.hideYearControls)
            return;
        const { _valueAsDate: valueAsDate } = this;
        const previousYearDate = new Date(valueAsDate.getFullYear() - 1, 0, 1);
        this.value = this.getStringFromDate(previousYearDate);
    }
    renderPreviousMonthControl() {
        if (this.hideMonthControls || !this.monthFormat || this.monthFormat === 'none') {
            return nothing;
        }
        return html `<hds-button
      variant="subtle"
      size="small"
      @click="${this.previousMonth}"
      icon="chevron-left"
      tabindex="0"
    ></hds-button>`;
    }
    renderNextMonthControl() {
        if (this.hideMonthControls || !this.monthFormat || this.monthFormat === 'none') {
            return nothing;
        }
        return html `<hds-button
      variant="subtle"
      size="small"
      @click="${this.nextMonth}"
      icon="chevron-right"
      tabindex="0"
    ></hds-button>`;
    }
    renderPreviousYearControl() {
        if (this.hideYearControls || !this.yearFormat || this.yearFormat === 'none') {
            return nothing;
        }
        return html `<hds-button
      variant="subtle"
      size="small"
      @click="${this.previousYear}"
      icon="chevron-left"
      tabindex="0"
    ></hds-button>`;
    }
    renderNextYearControl() {
        if (this.hideYearControls || !this.yearFormat || this.yearFormat === 'none') {
            return nothing;
        }
        return html `<hds-button
      variant="subtle"
      size="small"
      @click="${this.nextYear}"
      icon="chevron-right"
      tabindex="0"
    ></hds-button>`;
    }
    _onSlotChange() {
        this._hasDateSlot = !!this.querySelector('[slot^="date-"]');
    }
    async _onCellKeyDown(e, index, cellDate, _viewDate) {
        if (e.key !== 'Tab') {
            e.preventDefault();
        }
        const viewDates = this._getCalendarView(this._valueAsDate, this.firstDayOfWeek);
        let newFocusIdx = -1;
        const canChangeMonth = !this.hideMonthControls && !this.hideYearControls;
        switch (e.key) {
            case 'ArrowUp':
                if (index - CALENDAR_WEEKDAYS.length >= 0) {
                    newFocusIdx = index - CALENDAR_WEEKDAYS.length;
                }
                else if (canChangeMonth && index - CALENDAR_WEEKDAYS.length < 0) {
                    this.value = this.getStringFromDate(this._getPreviousMonth());
                    newFocusIdx = viewDates.length - CALENDAR_WEEKDAYS.length + index;
                }
                break;
            case 'ArrowDown':
                if (index + CALENDAR_WEEKDAYS.length < viewDates.length) {
                    newFocusIdx = index + CALENDAR_WEEKDAYS.length;
                }
                else if (canChangeMonth && index + CALENDAR_WEEKDAYS.length >= viewDates.length) {
                    this.value = this.getStringFromDate(this._getNextMonth());
                    newFocusIdx = Math.abs(viewDates.length - CALENDAR_WEEKDAYS.length - index);
                }
                break;
            case 'ArrowLeft':
                if (index - 1 >= 0) {
                    newFocusIdx = index - 1;
                }
                else if (canChangeMonth && index === 0) {
                    this.value = this.getStringFromDate(this._getPreviousMonth());
                    newFocusIdx = viewDates.length - 1;
                }
                break;
            case 'ArrowRight':
                if (index + 1 < viewDates.length) {
                    newFocusIdx = index + 1;
                }
                else if (canChangeMonth && index === viewDates.length - 1) {
                    this.value = this.getStringFromDate(this._getNextMonth());
                    newFocusIdx = 0;
                }
                break;
            case 'Enter':
            case ' ':
                this.selected = this.getStringFromDate(cellDate);
                break;
            default:
                break;
        }
        if (newFocusIdx !== -1) {
            await this.updateComplete;
            this._cellElements[newFocusIdx].focus();
        }
    }
    _onCellClick(_e, _index, cellDate, _viewDate) {
        this.selected = this.getStringFromDate(cellDate);
    }
    renderCell(index, cellDate, viewDate) {
        const now = new Date();
        const cellDateAsString = this.getStringFromDate(cellDate);
        const isInsideMonthCell = cellDate.getMonth() === viewDate.getMonth();
        const isSelected = this.selected === cellDateAsString;
        const isToday = now.getFullYear() === cellDate.getFullYear() &&
            now.getMonth() === cellDate.getMonth() &&
            now.getDate() === cellDate.getDate();
        const cssClasses = {
            cell: true,
            today: isToday,
            selected: isSelected,
            'not-selected': !isSelected,
            'inside-month-cell': isInsideMonthCell,
            'outside-month-cell': !isInsideMonthCell,
        };
        const cellSlotName = `date-${cellDateAsString}`;
        const dayFormat = isInsideMonthCell ? this.dayFormat : this.dayOutsideFormat;
        const cellValue = dayFormat && dayFormat !== 'none'
            ? cellDate.toLocaleDateString(this.lang, { day: dayFormat })
            : '';
        return html `<div
      class="${classMap(cssClasses)}"
      @click="${e => this._onCellClick(e, index, cellDate, viewDate)}"
      @keydown=${e => this._onCellKeyDown(e, index, cellDate, viewDate)}
      tabindex="0"
      data-cell-date="${cellDateAsString}"
      data-cell-index="${index}"
    >
      <slot name="${cellSlotName}">${cellValue}</slot>
    </div>`;
    }
    renderDayOfWeek(date) {
        const dayOfWeekValue = this.weekdayFormat && this.weekdayFormat !== 'none'
            ? date.toLocaleDateString(this.lang, { weekday: this.weekdayFormat })
            : '';
        return html `<div class="cell">${dayOfWeekValue}</div>`;
    }
    render() {
        const viewDates = this._getCalendarView(this._valueAsDate, this.firstDayOfWeek);
        const daysOfWeek = viewDates.slice(0, 7);
        const cssClasses = {
            '-hds-calendar-wrapper': true,
            '-has-date-slot': this._hasDateSlot,
            '-no-date-slot': !this._hasDateSlot,
            '-no-year-controls': this.hideYearControls,
            '-has-year-controls': !this.hideYearControls,
            '-no-month-controls': this.hideMonthControls,
            '-has-month-controls': !this.hideMonthControls,
        };
        cssClasses[`hds-calendar-variant-${this.variant}`] = true;
        const { _valueAsDate: valueAsDate } = this;
        const monthValue = this.monthFormat && this.monthFormat !== 'none'
            ? valueAsDate.toLocaleDateString(this.lang, { month: this.monthFormat })
            : '';
        const yearValue = this.yearFormat && this.yearFormat !== 'none'
            ? valueAsDate.toLocaleDateString(this.lang, { year: this.yearFormat })
            : '';
        return html `
      <div class="${classMap(cssClasses)}" @slotchange="${this._onSlotChange}">
        <div class="header">
          <div class="month">
            ${this.renderPreviousMonthControl()}
            <div class="month-value">${monthValue}</div>
            ${this.renderNextMonthControl()}
          </div>
          <div class="year">
            ${this.renderPreviousYearControl()}
            <div class="year-value">${yearValue}</div>
            ${this.renderNextYearControl()}
          </div>
        </div>
        <div class="grid-days-of-week">${daysOfWeek.map(d => this.renderDayOfWeek(d))}</div>
        <div class="grid-calendar-cells">
          ${viewDates.map((d, idx) => this.renderCell(idx, d, this._valueAsDate))}
        </div>
      </div>
    `;
    }
    _getCalendarView(forDate, firstDayOfWeek) {
        let view = [];
        const weekStartIdx = CALENDAR_WEEKDAYS.indexOf(firstDayOfWeek);
        const prevMonthDate = new Date(forDate.getFullYear(), forDate.getMonth() - 1, 31 / 2);
        const nextMonthDate = new Date(forDate.getFullYear(), forDate.getMonth() + 1, 31 / 2);
        const currMonthStartDate = new Date(forDate.getFullYear(), forDate.getMonth(), 1);
        const cursor = new Date(prevMonthDate.getTime());
        while (cursor <= nextMonthDate) {
            if (cursor.getMonth() === prevMonthDate.getMonth() &&
                currMonthStartDate.getDay() !== weekStartIdx) {
                if (cursor.getDay() === weekStartIdx) {
                    view = [];
                }
                view.push(new Date(cursor.getTime()));
            }
            else if (cursor.getMonth() === forDate.getMonth()) {
                view.push(new Date(cursor.getTime()));
            }
            else if (cursor.getMonth() === nextMonthDate.getMonth() && view.length !== 7 * 6) {
                view.push(new Date(cursor.getTime()));
            }
            cursor.setDate(cursor.getDate() + 1);
        }
        return view;
    }
};
Calendar.styles = styles;
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'hide-year-controls' })
], Calendar.prototype, "hideYearControls", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'hide-month-controls' })
], Calendar.prototype, "hideMonthControls", void 0);
__decorate([
    property({ type: String, reflect: true })
], Calendar.prototype, "variant", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'first-day-of-week' })
], Calendar.prototype, "firstDayOfWeek", void 0);
__decorate([
    property({ type: String, reflect: true })
], Calendar.prototype, "lang", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'month-format' })
], Calendar.prototype, "monthFormat", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'year-format' })
], Calendar.prototype, "yearFormat", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'weekday-format' })
], Calendar.prototype, "weekdayFormat", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'day-format' })
], Calendar.prototype, "dayFormat", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'day-outside-format' })
], Calendar.prototype, "dayOutsideFormat", void 0);
__decorate([
    property({ type: String, reflect: true })
], Calendar.prototype, "value", void 0);
__decorate([
    property({ type: String, reflect: true })
], Calendar.prototype, "selected", void 0);
__decorate([
    state()
], Calendar.prototype, "_hasDateSlot", void 0);
__decorate([
    queryAll('[data-cell-index]')
], Calendar.prototype, "_cellElements", void 0);
Calendar = __decorate([
    customElement('hds-calendar')
], Calendar);
export { Calendar };
//# sourceMappingURL=hds-calendar.js.map