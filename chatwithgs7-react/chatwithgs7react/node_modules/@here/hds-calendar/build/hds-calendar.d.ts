import { LitElement, nothing, PropertyValues } from 'lit';
export declare const CALENDAR_WEEKDAYS: readonly ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
export declare type CalendarVariant = 'default' | 'dense';
export declare type CalendarDayOfWeek = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
export declare type CalendarChangePayload = {
    value: string;
};
export declare type CalendarSelectPayload = {
    selected: string;
};
export declare type CalendarMonthFormat = 'none' | 'numeric' | '2-digit' | 'long' | 'short' | 'narrow';
export declare type CalendarYearFormat = 'none' | 'numeric' | '2-digit';
export declare type CalendarWeekdayFormat = 'none' | 'long' | 'short' | 'narrow';
export declare type CalendarDayFormat = 'none' | 'numeric' | '2-digit';
/**
 * @slot date-YYYY-MM-DD date cell slot
 * @event {CustomEvent<{selected: string}>} select Event fired when cell was selected `CalendarSelectPayload`
 * @event {CustomEvent<{value: string}>} change Event fired when value was changed `CalendarChangePayload`
 */
export declare class Calendar extends LitElement {
    static styles: import("lit").CSSResultGroup;
    hideYearControls: boolean;
    hideMonthControls: boolean;
    variant: CalendarVariant;
    firstDayOfWeek: CalendarDayOfWeek;
    lang: string;
    monthFormat: CalendarMonthFormat;
    yearFormat: CalendarYearFormat;
    weekdayFormat: CalendarWeekdayFormat;
    dayFormat: CalendarDayFormat;
    dayOutsideFormat: CalendarDayFormat;
    value: string;
    selected: string;
    private _hasDateSlot;
    private _cellElements;
    connectedCallback(): void;
    private get _todayAsString();
    private get _valueAsDate();
    protected getStringFromDate(date: Date): string;
    protected getDateFromString(date: string): Date;
    protected updated(_changedProps: PropertyValues): void;
    private _getNextMonth;
    private _getPreviousMonth;
    nextMonth(): void;
    previousMonth(): void;
    nextYear(): void;
    previousYear(): void;
    protected renderPreviousMonthControl(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderNextMonthControl(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderPreviousYearControl(): typeof nothing | import("lit-html").TemplateResult<1>;
    protected renderNextYearControl(): typeof nothing | import("lit-html").TemplateResult<1>;
    private _onSlotChange;
    private _onCellKeyDown;
    private _onCellClick;
    protected renderCell(index: number, cellDate: Date, viewDate: Date): import("lit-html").TemplateResult<1>;
    protected renderDayOfWeek(date: Date): import("lit-html").TemplateResult<1>;
    protected render(): import("lit-html").TemplateResult<1>;
    private _getCalendarView;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-calendar': Calendar;
    }
}
