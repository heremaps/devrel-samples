var BreadcrumbItem_1;
import { __decorate } from "tslib";
/* eslint-disable lit-a11y/click-events-have-key-events */
import { customElement } from '@here/hds-base';
import '@here/hds-icon';
import '@here/hds-tooltip';
import { html, LitElement, nothing } from 'lit';
import { property, query, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-breadcrumb-item.css.js';
/**
 *
 * @event {CustomEvent<string>} expand Internal event (no need to listen to it)
 *
 * @slot default Content placed inside the item, it could be an anchor tag or simple text for the active item.
 */
let BreadcrumbItem = BreadcrumbItem_1 = class BreadcrumbItem extends LitElement {
    constructor() {
        super(...arguments);
        this.active = false;
        this.visible = true;
        this.isEllipsis = false;
        this.isLastItem = false;
        this.hasTooltip = false;
        this._handleKeydown = (e) => {
            let customKeyEvent = false;
            // eslint-disable-next-line default-case
            switch (e.key) {
                case 'Enter':
                case ' ':
                    if (this.ellipsisContainer) {
                        this.ellipsisContainer.click();
                        customKeyEvent = true;
                    }
                    else {
                        this.itemContentSlot.assignedNodes()[0].click();
                        customKeyEvent = true;
                    }
                    break;
            }
            if (customKeyEvent) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
    }
    connectedCallback() {
        super.connectedCallback && super.connectedCallback();
        this.id = this.id || `hds-breadcrumb-item-${(BreadcrumbItem_1.itemCounter += 1)}`;
        this.setAttribute('data-hds-tooltip', this.id);
    }
    render() {
        return html ` ${this._renderAsLink()} `;
    }
    _handleSlotChange() {
        this.itemContentSlot.assignedElements().forEach(el => {
            const isEllipsisActive = el instanceof HTMLElement && el.offsetWidth < el.scrollWidth;
            if (isEllipsisActive) {
                this.hasTooltip = true;
            }
        });
    }
    renderTooltip() {
        if (this.hasTooltip) {
            return html `
        <hds-tooltip id="${this.id}">
          <div style="word-break: break-all">${this.textContent}</div>
        </hds-tooltip>
      `;
        }
        return nothing;
    }
    _renderAsLink() {
        const classes = {
            'breadcrumb-link': !this.active,
            'breadcrumb-text-truncate': true,
            active: this.active,
        };
        const renderedNonLastItem = !this.isLastItem
            ? html ` <hds-icon class="breadcrumb-arrow" name="chevron-right" size="8px"></hds-icon> `
            : nothing;
        // lit-a11y/click-events-have-key-events
        const renderedEllipsis = this.isEllipsis
            ? html `
          <li class="breadcrumb-item" @keydown="${this._handleKeydown}">
            <div
              tabindex="0"
              class="breadcrumb-link breadcrumb-expand"
              @click="${this._handleExpandClick}"
              role="button"
            >
              <span class="breadcrumb-ellipsis">...</span>
            </div>
            <hds-icon class="breadcrumb-arrow" name="chevron-right" size="8px"></hds-icon>
          </li>
        `
            : nothing;
        const renderedItem = html `
      <li
        class="breadcrumb-item"
        id="breadcrumb-item-slot-container"
        @slotchange="${this._handleSlotChange}"
        @keydown="${this._handleKeydown}"
      >
        <div class="${classMap(classes)}">
          <slot></slot>
        </div>
        ${renderedNonLastItem} ${this.renderTooltip()}
      </li>
    `;
        return html `${this.visible ? renderedItem : renderedEllipsis}`;
    }
    async _handleExpandClick() {
        await this.updateComplete;
        this.dispatchEvent(new CustomEvent('expand', { detail: this.id, bubbles: true }));
    }
};
BreadcrumbItem.styles = styles;
BreadcrumbItem.itemCounter = 0;
__decorate([
    property({ type: Boolean })
], BreadcrumbItem.prototype, "active", void 0);
__decorate([
    property({ type: Boolean })
], BreadcrumbItem.prototype, "visible", void 0);
__decorate([
    property({ type: Boolean, attribute: 'is-ellipsis' })
], BreadcrumbItem.prototype, "isEllipsis", void 0);
__decorate([
    property({ type: Boolean, attribute: 'is-last-item' })
], BreadcrumbItem.prototype, "isLastItem", void 0);
__decorate([
    state()
], BreadcrumbItem.prototype, "hasTooltip", void 0);
__decorate([
    query('slot:not([name])')
], BreadcrumbItem.prototype, "itemContentSlot", void 0);
__decorate([
    query('.breadcrumb-expand')
], BreadcrumbItem.prototype, "ellipsisContainer", void 0);
BreadcrumbItem = BreadcrumbItem_1 = __decorate([
    customElement('hds-breadcrumb-item')
], BreadcrumbItem);
export { BreadcrumbItem };
//# sourceMappingURL=hds-breadcrumb-item.js.map