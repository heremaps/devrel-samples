import '@here/hds-icon';
import '@here/hds-tooltip';
import { LitElement, nothing } from 'lit';
/**
 *
 * @event {CustomEvent<string>} expand Internal event (no need to listen to it)
 *
 * @slot default Content placed inside the item, it could be an anchor tag or simple text for the active item.
 */
export declare class BreadcrumbItem extends LitElement {
    static styles: import("lit").CSSResultGroup;
    static itemCounter: number;
    active: boolean;
    visible: boolean;
    isEllipsis: boolean;
    isLastItem: boolean;
    protected hasTooltip: boolean;
    protected itemContentSlot: HTMLSlotElement;
    protected ellipsisContainer?: HTMLElement;
    connectedCallback(): void;
    protected render(): import("lit-html").TemplateResult<1>;
    protected _handleSlotChange(): void;
    protected _handleKeydown: (e: KeyboardEvent) => void;
    protected renderTooltip(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected _renderAsLink(): import("lit-html").TemplateResult<1>;
    protected _handleExpandClick(): Promise<void>;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-breadcrumb-item': BreadcrumbItem;
    }
}
