import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { html, LitElement } from 'lit';
import { property, query } from 'lit/decorators.js';
import { styles } from './hds-breadcrumb.css.js';
import { BreadcrumbItem } from './hds-breadcrumb-item.js';
/**
 *
 * @event {CustomEvent<{expanded: boolean}>} change Fired when the breadcrumb status has been expanded `BreadcrumbChangePayload`
 *
 * @slot default List of `hds-breadcrumb-item` elements
 */
let Breadcrumb = class Breadcrumb extends LitElement {
    constructor() {
        super(...arguments);
        this.truncateItems = false;
        this.truncateItemBuffer = 5;
    }
    firstUpdated() {
        this._setDefaultActive();
    }
    render() {
        return html `
      <nav class="-hds-breadcrumb-wrapper" aria-label="breadcrumb" @expand="${this._handleExpand}">
        <ol class="breadcrumb">
          <slot></slot>
        </ol>
      </nav>
    `;
    }
    async _handleExpand(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this._getItems().forEach(item => (item.visible = true));
        await this.updateComplete;
        this.dispatchEvent(new CustomEvent('change', {
            detail: {
                expanded: true,
            },
        }));
    }
    _setDefaultActive() {
        const items = this._getItems();
        if (items.length === 0) {
            return;
        }
        if (this.truncateItems) {
            items.forEach((item, index) => {
                if (item &&
                    items.length >= this.truncateItemBuffer &&
                    index > 0 &&
                    index < items.length - 1) {
                    // eslint-disable-next-line no-param-reassign
                    item.visible = false;
                }
            });
            items[1].isEllipsis = true;
        }
        items[items.length - 1].isLastItem = true;
    }
    _getItems() {
        return this.itemsSlot
            .assignedNodes({ flatten: true })
            .filter((e) => e instanceof BreadcrumbItem);
    }
};
Breadcrumb.styles = styles;
__decorate([
    property({ type: Boolean, attribute: 'truncate-items' })
], Breadcrumb.prototype, "truncateItems", void 0);
__decorate([
    property({ type: Number, attribute: 'truncate-item-buffer' })
], Breadcrumb.prototype, "truncateItemBuffer", void 0);
__decorate([
    query('slot:not([name])')
], Breadcrumb.prototype, "itemsSlot", void 0);
Breadcrumb = __decorate([
    customElement('hds-breadcrumb')
], Breadcrumb);
export { Breadcrumb };
//# sourceMappingURL=hds-breadcrumb.js.map