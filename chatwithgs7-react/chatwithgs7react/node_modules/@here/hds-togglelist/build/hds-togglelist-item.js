import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { ListItem } from '@here/hds-list';
import { html, LitElement } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-togglelist-item.css.js';
import { ToggleList } from './hds-togglelist.js';
/**
 * @slot default Content for item label
 *
 * @event {CustomEvent<{index: number; expanded: boolean}>} change Fired when item has changed its status: expanded / collapsed `ToggleListChangePayload`
 */
let ToggleListItem = class ToggleListItem extends ListItem {
    constructor() {
        super(...arguments);
        this.hasSubList = false;
        this.expanded = false;
        this.index = -1;
    }
    static get styles() {
        return [super.styles, styles];
    }
    firstUpdated() {
        super.firstUpdated();
        const parentElem = this.parentNode;
        const slotContent = this.slotElement
            .assignedNodes({ flatten: true })
            .filter((e) => e instanceof ToggleList);
        if (parentElem instanceof ToggleList && parentElem.classList.contains('disabled')) {
            this.disabled = true;
        }
        if (slotContent.length !== 0) {
            this.hasSubList = true;
            this.icon = 'chevron-right';
            this._appendSubList(slotContent);
        }
        else {
            this.hasSubList = false;
        }
        if (this.hasTooltip) {
            this.hasTooltip = false;
        }
    }
    render() {
        const classes = {
            disabled: this.disabled,
            expanded: this.expanded && this.hasSubList,
        };
        classes[`hds-toggle-list-item-${this.groupVariant}`] = true;
        return html `
      <div class="-hds-togglelist-item ${classMap(classes)}" aria-expanded="${this.expanded}">
        <div class="main-list-wrapper" @click="${this._toggle}" @keydown="${this._onKeyDown}">
          ${super.render()}
        </div>
        <div class="sub-list-wrapper"></div>
      </div>
    `;
    }
    _toggle(e) {
        e.stopPropagation();
        if (!this.disabled) {
            this.expanded = this.hasSubList ? !this.expanded : false;
            this.dispatchEvent(new CustomEvent('change', {
                detail: {
                    index: this.index,
                    expanded: this.expanded,
                },
                bubbles: true,
            }));
        }
    }
    _appendSubList(slotContent) {
        for (let i = 0; i < slotContent.length; i++) {
            if (this.disabled) {
                slotContent[i].classList.add('disabled');
            }
            this.subListElement.append(slotContent[i]);
        }
    }
    _onKeyDown(e) {
        e.preventDefault();
        if (['Enter', 'Space'].includes(e.code)) {
            this._toggle(e);
        }
    }
};
ToggleListItem.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
__decorate([
    property({ type: Boolean, attribute: false, reflect: true })
], ToggleListItem.prototype, "hasSubList", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], ToggleListItem.prototype, "expanded", void 0);
__decorate([
    property({ type: Number, attribute: false })
], ToggleListItem.prototype, "index", void 0);
__decorate([
    query('.sub-list-wrapper')
], ToggleListItem.prototype, "subListElement", void 0);
__decorate([
    query('slot')
], ToggleListItem.prototype, "slotElement", void 0);
ToggleListItem = __decorate([
    customElement('hds-togglelist-item')
], ToggleListItem);
export { ToggleListItem };
//# sourceMappingURL=hds-togglelist-item.js.map