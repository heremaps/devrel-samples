import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import { List } from '@here/hds-list';
import { html, LitElement } from 'lit';
import { property, query } from 'lit/decorators.js';
import { ToggleListItem } from './hds-togglelist-item.js';
import { styles } from './hds-togglelist.css.js';
/**
 * @slot default Content for the `hds-togglelist-item` elements
 *
 * @event {CustomEvent<{index: number; expanded: boolean}>} change Fired when item has changed its status: expanded / collapsed `ToggleListChangePayload`
 * @event {CustomEvent<{id: string; index: number}>} select Fired when an item has been selected `ListSelectPayload`
 *
 */
let ToggleList = class ToggleList extends List {
    constructor() {
        super(...arguments);
        this.expandMode = 'many';
        this.defaultExpanded = false;
    }
    static get styles() {
        return [super.styles, styles];
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('change', this._onChange);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('change', this._onChange);
    }
    render() {
        return html `
      <div class="-hds-togglelist" @slotchange="${this._onListSlotChange}">${super.render()}</div>
    `;
    }
    _getListItems() {
        return this.slotElement
            .assignedNodes({ flatten: true })
            .filter((e) => e instanceof ToggleListItem);
    }
    _updateItems() {
        const items = this._getListItems();
        for (let i = 0; i < items.length; i++) {
            items[i].index = i;
        }
    }
    _onChange(e) {
        if (this.expandMode === 'one') {
            const event = e;
            if (event.detail.index > -1 && event.detail.expanded) {
                this._getListItems().forEach(item => {
                    item.expanded = event.detail.expanded ? e.target === item : false;
                });
            }
        }
    }
    _onListSlotChange() {
        if (this.defaultExpanded) {
            const items = this._getListItems();
            for (let i = 0; i < items.length; i++) {
                if (items[i].hasSubList && !items[i].disabled) {
                    items[i].expanded = true;
                    if (this.expandMode === 'one') {
                        break;
                    }
                }
            }
        }
        this._updateItems();
    }
};
ToggleList.shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };
__decorate([
    property({ type: String, reflect: true, attribute: 'expand-mode' })
], ToggleList.prototype, "expandMode", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'default-expanded' })
], ToggleList.prototype, "defaultExpanded", void 0);
__decorate([
    query('slot')
], ToggleList.prototype, "slotElement", void 0);
ToggleList = __decorate([
    customElement('hds-togglelist')
], ToggleList);
export { ToggleList };
//# sourceMappingURL=hds-togglelist.js.map