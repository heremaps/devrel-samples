import { __decorate } from "tslib";
import { customElement, isSlotEmpty } from '@here/hds-base';
import '@here/hds-icon';
import { html, LitElement, nothing } from 'lit';
import { property, query } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-banner.css.js';
/**
 * @slot default Content for the message.
 * @slot action-links Content for action links in the middle.
 * @slot action-buttons Content for action buttons on the right side.
 *
 * @event {CustomEvent<{from: 'button' | 'timeout'}>} change Event fired when the component should be closed and from where (close button / timeout) `BannerChangePayload`
 */
let Banner = class Banner extends LitElement {
    constructor() {
        super(...arguments);
        this.variant = 'default';
        this.state = 'informative';
        this.alignCenter = false;
        this.timeout = 0;
        this.removable = false;
        this.icon = false;
        this.open = true;
        this.caption = '';
        this.headline = '';
    }
    set duration(value) {
        console.warn("[hds-banner] 'duration' property is depricated, use 'timeout' instead");
        this.timeout = value;
    }
    updated(_changedProperties) {
        if (_changedProperties.has('open') && _changedProperties.get('open') !== undefined) {
            this.dispatchEvent(new CustomEvent('change', {
                detail: {
                    open: this.open,
                    from: this.fromChangeEvent,
                },
                bubbles: true,
                composed: true,
            }));
            this.fromChangeEvent = undefined;
        }
        if (_changedProperties.has('timeout') && this.timeout > 0) {
            clearTimeout(this.timer);
            this.timer = setTimeout(this.timeOut.bind(this), this.timeout * 1000);
        }
    }
    renderMessageCaption() {
        if (this.variant === 'wide' && this.caption) {
            return html `<div class="message-caption">${this.caption}</div>`;
        }
        return nothing;
    }
    renderMessageHeadline() {
        if (this.variant === 'wide' && this.headline) {
            return html `<div class="message-headline">${this.headline}</div>`;
        }
        return nothing;
    }
    renderIcon() {
        if (this.variant === 'default' && this.icon) {
            const iconName = {
                error: 'alert',
                warning: 'attention',
                positive: 'confirm',
                informative: 'information',
            }[this.state];
            return html `<div class="message-left icon">
        <hds-icon name="${iconName}" icon-style="outline" size="24px"></hds-icon>
      </div>`;
        }
        return nothing;
    }
    render() {
        const role = this.state === 'error' || this.state === 'warning' ? 'alert' : 'banner';
        const hasActionButton = !isSlotEmpty(this.slotActionButton);
        const hasActionLink = !isSlotEmpty(this.slotActionLink);
        const classes = {
            open: this.open,
            '-hds-banner-wrapper': true,
            'align-center': this.variant === 'default' && this.alignCenter,
        };
        classes[`state-${this.state}`] = true;
        classes[`hds-banner--variant-${this.variant}`] = true;
        classes[`-${hasActionButton ? 'has' : 'no'}-action-button`] = true;
        classes[`-${hasActionLink ? 'has' : 'no'}-action-link`] = true;
        return html `
      <div class="${classMap(classes)}" role="${role}">
        <div class="content">
          <div class="message">
            ${this.renderIcon()}
            <div class="message-right">
              <div class="message-texts">
                ${this.renderMessageCaption()} ${this.renderMessageHeadline()}
                <slot @slotchange="${() => this.requestUpdate()}"></slot>
              </div>
              <div class="action-links">
                <slot name="action-link" @slotchange="${() => this.requestUpdate()}"></slot>
              </div>
            </div>
          </div>
          <div class="action-buttons">
            <slot name="action-button" @slotchange="${() => this.requestUpdate()}"></slot>
          </div>
        </div>
        ${this.renderCloseButton()}
      </div>
    `;
    }
    async handleRemoveClick(e) {
        e.preventDefault();
        e.stopPropagation();
        this.fromChangeEvent = 'button';
        this.open = false;
    }
    async timeOut() {
        this.timeout = 0;
        this.fromChangeEvent = 'timeout';
        this.open = false;
    }
    renderCloseButton() {
        if (!this.removable)
            return nothing;
        return html `
      <hds-button
        class="close-btn"
        size="small"
        variant="on-color-secondary"
        icon="cross"
        aria-label="close"
        role="button"
        @click="${this.handleRemoveClick}"
      ></hds-button>
    `;
    }
};
Banner.styles = styles;
__decorate([
    property({ type: String })
], Banner.prototype, "variant", void 0);
__decorate([
    property({ type: String })
], Banner.prototype, "state", void 0);
__decorate([
    property({ type: Boolean, attribute: 'align-center' })
], Banner.prototype, "alignCenter", void 0);
__decorate([
    property({ type: Number, reflect: true })
], Banner.prototype, "timeout", void 0);
__decorate([
    property({ type: Boolean })
], Banner.prototype, "removable", void 0);
__decorate([
    property({ type: Boolean, attribute: 'icon' })
], Banner.prototype, "icon", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Banner.prototype, "open", void 0);
__decorate([
    property({ type: String })
], Banner.prototype, "caption", void 0);
__decorate([
    property({ type: String })
], Banner.prototype, "headline", void 0);
__decorate([
    property({ type: Number, attribute: 'duration' })
], Banner.prototype, "duration", null);
__decorate([
    query('slot[name="action-button"]')
], Banner.prototype, "slotActionButton", void 0);
__decorate([
    query('slot[name="action-link"]')
], Banner.prototype, "slotActionLink", void 0);
Banner = __decorate([
    customElement('hds-banner')
], Banner);
export { Banner };
//# sourceMappingURL=hds-banner.js.map