import '@here/hds-icon';
import { LitElement, nothing, PropertyValues } from 'lit';
export declare type BannerVariant = 'default' | 'wide';
export declare type BannerState = 'informative' | 'positive' | 'warning' | 'error';
export declare type BannerChangePayload = {
    open: boolean;
    from: 'button' | 'timeout' | undefined;
};
/**
 * @slot default Content for the message.
 * @slot action-links Content for action links in the middle.
 * @slot action-buttons Content for action buttons on the right side.
 *
 * @event {CustomEvent<{from: 'button' | 'timeout'}>} change Event fired when the component should be closed and from where (close button / timeout) `BannerChangePayload`
 */
export declare class Banner extends LitElement {
    static styles: import("lit").CSSResultGroup;
    variant: BannerVariant;
    state: BannerState;
    alignCenter: boolean;
    timeout: number;
    removable: boolean;
    icon: boolean;
    open: boolean;
    caption: string;
    headline: string;
    set duration(value: number);
    protected slotActionButton: HTMLSlotElement;
    protected slotActionLink: HTMLSlotElement;
    private fromChangeEvent?;
    private timer?;
    protected updated(_changedProperties: PropertyValues): void;
    protected renderMessageCaption(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected renderMessageHeadline(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected renderIcon(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected render(): import("lit-html").TemplateResult<1>;
    protected handleRemoveClick(e: MouseEvent): Promise<void>;
    private timeOut;
    private renderCloseButton;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-banner': Banner;
    }
}
