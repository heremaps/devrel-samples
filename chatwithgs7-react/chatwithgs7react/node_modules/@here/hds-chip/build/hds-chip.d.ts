import { BaseElement } from '@here/hds-base';
import '@here/hds-icon';
import '@here/hds-tooltip';
import { PropertyValues } from 'lit';
export declare type ChipSize = 'small' | 'medium';
export declare type ChipSelectPayload = boolean;
/**
 *
 * @slot default Content for the chip label
 * @slot image Content for the image. Can be an `img` or `hds-icon` or `hds-avatar` element
 *
 * @event {CustomEvent} remove Fired when the remove button has been clicked
 * @event {CustomEvent<ChipSelectPayload>} select Fired when the chip has been clicked with the selected information `ChipSelectPayload`
 *
 * @cssprop --hds-chip-max-width Set the maximum width for the chip
 * @cssprop --hds-chip-image-border-color Sets the border color for the image to match the background
 *
 */
export declare class Chip extends BaseElement {
    static styles: import("lit").CSSResultGroup;
    static chipIdCounter: number;
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    size: ChipSize;
    disabled: boolean;
    selected: boolean;
    dragging: boolean;
    order: number;
    status: string;
    removable: boolean;
    image: boolean;
    icon: boolean;
    avatar: boolean;
    tooltip: boolean;
    selectable: boolean;
    removeButtonFocused: boolean;
    protected isTabbable: boolean;
    protected chipLabelSlot: HTMLSlotElement;
    protected labelEl: HTMLSlotElement;
    protected chipWrapper: HTMLButtonElement;
    connectedCallback(): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: any, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    protected firstUpdated(_changedProperties: PropertyValues): void;
    protected updated(_changedProperties: PropertyValues): void;
    protected render(): import("lit-html").TemplateResult<1>;
    private isTextOverflowing;
    private removeButtonClick;
    private renderImageOrIcon;
    private renderLabel;
    private renderCloseIcon;
    private renderTooltip;
    private _toggleSelect;
    private _focus;
    private _blur;
}
declare global {
    interface HTMLElementTagNameMap {
        'hds-chip': Chip;
    }
}
