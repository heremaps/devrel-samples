{"version":3,"file":"hds-chip.js","sourceRoot":"","sources":["../src/hds-chip.ts"],"names":[],"mappings":"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","sourcesContent":["import {Avatar} from '@here/hds-avatar';\nimport {customElement, BaseElement, getCSSVariable} from '@here/hds-base';\nimport '@here/hds-icon';\nimport '@here/hds-tooltip';\nimport {html, nothing, LitElement, PropertyValues} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {styles} from './hds-chip.css.js';\n\nexport type ChipSize = 'small' | 'medium';\nexport type ChipSelectPayload = boolean;\n\n/**\n *\n * @slot default Content for the chip label\n * @slot image Content for the image. Can be an `img` or `hds-icon` or `hds-avatar` element\n *\n * @event {CustomEvent} remove Fired when the remove button has been clicked\n * @event {CustomEvent<ChipSelectPayload>} select Fired when the chip has been clicked with the selected information `ChipSelectPayload`\n *\n * @cssprop --hds-chip-max-width Set the maximum width for the chip\n * @cssprop --hds-chip-image-border-color Sets the border color for the image to match the background\n *\n */\n@customElement('hds-chip')\nexport class Chip extends BaseElement {\n  static styles = styles;\n  static chipIdCounter = 0;\n  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};\n  @property({type: String}) size: ChipSize = 'medium';\n  @property({type: Boolean}) disabled = false;\n  @property({type: Boolean, reflect: true}) selected = false;\n  @property({type: Boolean}) dragging = false;\n  @property({type: Number, attribute: 'order'}) order = 0;\n  @property({type: String}) status = 'neutral';\n  @property({type: Boolean}) removable = false;\n  @property({type: Boolean, attribute: false}) image = false;\n  @property({type: Boolean, attribute: false}) icon = false;\n  @property({type: Boolean, attribute: false}) avatar = false;\n  @property({type: Boolean, attribute: false}) tooltip = false;\n  @property({type: Boolean}) selectable = false;\n  @state() removeButtonFocused = false;\n  protected isTabbable = true;\n  @query('#chip-label slot') protected chipLabelSlot!: HTMLSlotElement;\n  @query('#chip-label') protected labelEl!: HTMLSlotElement;\n  @query('.-hds-chip-wrapper') protected chipWrapper!: HTMLButtonElement;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.id = this.id || `hds-chip-item-${++Chip.chipIdCounter}`;\n    this.setAttribute('data-hds-tooltip', this.id);\n  }\n\n  addEventListener<K extends keyof HTMLElementEventMap>(\n    type: any,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) {\n    if (type === 'remove') {\n      this.removable = true;\n    }\n    super.addEventListener(type, listener, options);\n  }\n\n  protected firstUpdated(_changedProperties: PropertyValues) {\n    const slot = this.shadowRoot!.querySelectorAll('slot')[0];\n    const nodes = slot.assignedNodes();\n    this.image = nodes.length >= 1;\n    this.icon = this.image && nodes[0].nodeName.toLowerCase() === 'hds-icon';\n    if (this.image && nodes[0].nodeName.toLowerCase() === 'hds-avatar') {\n      const item = nodes[0] as Avatar;\n      this.avatar = true;\n      if (!item.borderless) {\n        item.borderless = true;\n      }\n    }\n\n    if (this.isTextOverflowing()) {\n      this.tooltip = true;\n    }\n  }\n\n  protected updated(_changedProperties: PropertyValues) {\n    super.updated(_changedProperties);\n    if (_changedProperties.has('selected') && _changedProperties.get('selected') !== undefined) {\n      this.dispatchEvent(new CustomEvent<ChipSelectPayload>('select', {detail: this.selected}));\n    }\n  }\n\n  protected render() {\n    const classes = {\n      dragging: this.dragging,\n      disabled: this.disabled,\n      selected: this.selected,\n      unselected: !this.selected,\n      removable: this.removable,\n      selectable: this.selectable,\n      clickable: this.selectable || this.removable,\n      unclickable: !this.selectable && !this.removable,\n      'with-image': this.image,\n      'with-avatar': this.avatar,\n      'with-icon': this.icon,\n    };\n    classes[this.size] = true;\n    classes[this.status] = true;\n    return html`\n      <div style=\"order: ${this.order}\">\n        <button\n          tabindex=\"-1\"\n          class=\"-hds-chip-wrapper ${classMap(classes)}\"\n          @click=\"${this._toggleSelect}\"\n          @focus=\"${this._focus}\"\n          @blur=\"${this._blur}\"\n          ?disabled=\"${this.disabled}\"\n          aria-disabled=\"${this.disabled}\"\n        >\n          ${this.renderImageOrIcon()} ${this.renderLabel()} ${this.renderCloseIcon()}\n        </button>\n        ${this.renderTooltip()}\n      </div>\n    `;\n  }\n\n  private isTextOverflowing() {\n    const maxWidthToken = getCSSVariable('--hds-chip-max-width', this);\n    const baseline = parseFloat(getCSSVariable('--hds-font-baseline', this));\n    let maxWidth = 100;\n    if (maxWidthToken.includes('px')) {\n      maxWidth = parseFloat(maxWidthToken);\n    } else if (maxWidthToken.includes('rem')) {\n      maxWidth = parseFloat(maxWidthToken) * baseline;\n    }\n    return maxWidth < this.labelEl.scrollWidth;\n  }\n\n  private removeButtonClick(evt: MouseEvent) {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    const event = new CustomEvent('remove', {\n      composed: true,\n      bubbles: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  private renderImageOrIcon() {\n    return html` <slot name=\"image\" class=\"image\" role=\"img\" aria-labelledby=\"chip-label\"></slot> `;\n  }\n\n  private renderLabel() {\n    return html`\n      <div class=\"label\" id=\"chip-label\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  private renderCloseIcon() {\n    if (this.removable) {\n      return html`\n        <button\n          class=\"remove\"\n          aria-label=\"Remove\"\n          ?disabled=\"${this.disabled}\"\n          @click=\"${this.removeButtonClick}\"\n        >\n          <hds-icon name=\"cross\" size=\"16px\"></hds-icon>\n        </button>\n      `;\n    }\n    return nothing;\n  }\n\n  private renderTooltip() {\n    if (this.tooltip && this.chipLabelSlot) {\n      return html`\n        <hds-tooltip id=\"${this.id}\">\n          <div>${this.chipLabelSlot.assignedNodes()[0]?.textContent}</div>\n        </hds-tooltip>\n      `;\n    }\n    return nothing;\n  }\n\n  private _toggleSelect() {\n    if (!this.selectable || this.disabled || this.dragging || this.status !== 'neutral') {\n      return;\n    }\n    this.selected = !this.selected;\n  }\n\n  private _focus() {\n    this.chipWrapper.setAttribute('tabindex', '0');\n  }\n\n  private _blur() {\n    this.chipWrapper.setAttribute('tabindex', '-1');\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hds-chip': Chip;\n  }\n}\n"]}