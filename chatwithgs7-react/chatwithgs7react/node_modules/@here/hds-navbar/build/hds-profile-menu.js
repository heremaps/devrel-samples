import { __decorate } from "tslib";
import { customElement } from '@here/hds-base';
import '@here/hds-avatar';
import '@here/hds-icon';
import '@here/hds-list';
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styles } from './hds-profile-menu.css.js';
/**
 * @slot default Content for the `hds-list-item` elements for the menu
 * @slot profile-info Additional info for signed-in state
 * @slot signup-link Link for sign-up
 * @slot singup-info Additional info for sign-up state
 * @slot before-tray Custom content before profile card
 * @slot before-tray Custom content after profile card
 *
 * @event {CustomEvent<{open: boolean}>} change Fired when the menu state has changed: open / close `ProfileMenuChangePayload`
 */
let ProfileMenu = class ProfileMenu extends LitElement {
    constructor() {
        super();
        this.profileName = '';
        this.profileEmail = '';
        this.avatarImageUrl = '';
        this.open = false;
        this.signup = false;
        this.navBarTopVariant = 'default';
        this.noTrigger = false;
        this._handleDocumentClick = this._handleDocumentClick.bind(this);
    }
    connectedCallback() {
        super.connectedCallback && super.connectedCallback();
        this.ownerDocument.addEventListener('click', this._handleDocumentClick, true);
    }
    disconnectedCallback() {
        this.ownerDocument.removeEventListener('click', this._handleDocumentClick, true);
        super.disconnectedCallback && super.disconnectedCallback();
    }
    updated(changedProperties) {
        if (changedProperties.has('open') && changedProperties.get('open') !== undefined) {
            this.dispatchEvent(new CustomEvent('change', {
                detail: {
                    open: this.open,
                },
            }));
        }
    }
    renderAvatar(isSignUp) {
        if (isSignUp) {
            return html ` <hds-avatar icon="profile" icon-style="solid"></hds-avatar>`;
        }
        return html ` <hds-avatar
      name="${this.profileName}"
      image-url="${this.avatarImageUrl}"
    ></hds-avatar>`;
    }
    renderTrigger() {
        if (this.noTrigger)
            return nothing;
        return html ` <div
      class="hds-profile-menu-closed-avatar"
      tabindex="0"
      @click="${this._handleClick}"
    >
      <span class="hds-avatar-wrapper" aria-label="${this.profileName} profile" role="button">
        ${this.renderAvatar(this.signup)}
      </span>
    </div>`;
    }
    renderProfile() {
        const isLoggedIn = !this.signup && (this.profileName || this.profileEmail || this.avatarImageUrl);
        const isLoggedOut = this.signup;
        let template = html ``;
        if (isLoggedIn) {
            template = html ` <div class="hds-profile-details">
        <span
          class="hds-profile-details-avatar-wrapper"
          aria-label="${this.profileName} profile"
          role="button"
          tabindex="0"
        >
          ${this.renderAvatar(this.signup)}
        </span>
        <span class="hds-profile-details-text-container">
          <span class="hds-profile-details-text hds-profile-details-text--name">
            ${this.profileName}
          </span>
          <span class="hds-profile-details-text hds-profile-details-text--email">
            ${this.profileEmail}
          </span>
          <div class="hds-profile-details-text hds-profile-details-text--info">
            <slot name="profile-info"></slot>
          </div>
        </span>
      </div>`;
        }
        else if (isLoggedOut) {
            template = html ` <div class="hds-profile-details">
        <span
          class="hds-profile-details-avatar-wrapper"
          aria-label="profile"
          role="button"
          tabindex="0"
        >
          ${this.renderAvatar(this.signup)}
        </span>
        <slot name="signup-link"></slot>
        <div class="hds-profile-details-text-container">
          <div class="hds-profile-details-text hds-profile-details-text--info">
            <slot name="singup-info"></slot>
          </div>
        </div>
      </div>`;
        }
        return template;
    }
    render() {
        const profileMenuClasses = {
            'hds-profile-menu': true,
            'signed-in': !this.signup,
            'not-signed-in': this.signup,
            open: !this.noTrigger && this.open,
            'no-trigger': this.noTrigger,
            'has-trigger': !this.noTrigger,
            [`--navbar-top-variant-${this.navBarTopVariant}`]: true,
        };
        return html `
      <div class="hds-profile-menu-wrapper">
        ${this.renderTrigger()}
        <div class="${classMap(profileMenuClasses)}">
          <slot name="before-tray"></slot>
          ${this.renderProfile()}
          <slot></slot>
          <slot name="after-tray"></slot>
        </div>
      </div>
    `;
    }
    _handleDocumentClick(e) {
        const closestProfileMenu = e.target.closest &&
            e.target.closest(this.tagName.toLowerCase());
        if (closestProfileMenu !== this) {
            this.open = false;
        }
    }
    _handleClick(e) {
        e.preventDefault();
        e.stopPropagation();
        this.open = !this.open;
    }
};
ProfileMenu.styles = styles;
__decorate([
    property({ type: String, attribute: 'profile-name' })
], ProfileMenu.prototype, "profileName", void 0);
__decorate([
    property({ type: String, attribute: 'profile-email' })
], ProfileMenu.prototype, "profileEmail", void 0);
__decorate([
    property({ type: String, attribute: 'avatar-image-url' })
], ProfileMenu.prototype, "avatarImageUrl", void 0);
__decorate([
    property({ type: Boolean, attribute: 'open', reflect: true })
], ProfileMenu.prototype, "open", void 0);
__decorate([
    property({ type: Boolean, attribute: 'signup', reflect: true })
], ProfileMenu.prototype, "signup", void 0);
__decorate([
    property({ type: String, attribute: false })
], ProfileMenu.prototype, "navBarTopVariant", void 0);
__decorate([
    property({ type: Boolean, attribute: 'no-trigger' })
], ProfileMenu.prototype, "noTrigger", void 0);
ProfileMenu = __decorate([
    customElement('hds-profile-menu')
], ProfileMenu);
export { ProfileMenu };
//# sourceMappingURL=hds-profile-menu.js.map